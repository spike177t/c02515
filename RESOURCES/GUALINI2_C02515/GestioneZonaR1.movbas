<?xml version="1.0" encoding="ISO-8859-1" ?>
<MovResource xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
<ScriptCode StartSel="7562" SelLength="0" OutStatusBar="1" OutLog="1" OutPrinter="0">'#Reference #System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089, processorArchitecture=MSIL
'#Reference #System.Core.resources, Version=3.5.0.0, Culture=it, PublicKeyToken=b77a5c561934e089, processorArchitecture=MSIL
'#Reference #System.Core, Version=3.5.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089, processorArchitecture=MSIL
'#Reference #System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089, processorArchitecture=MSIL
'#Reference #System.Data, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089, processorArchitecture=x86
'Sostituita la Variabile 'alm_Step_ToutR1_4200' con il nuovo nome 'msg_Step_R1_4200_AttesaMissione'
'Sostituita la Variabile 'Q2_In' con il nuovo nome 'Q2_Out'
'Sostituita la Variabile 'Q1_In' con il nuovo nome 'Q1_Out'
'Sostituita la Variabile 'alm_Step_Tout' con il nuovo nome 'alm_Step_ToutR1_4200'
'Sostituita la Variabile 'alm_FineRobot' con il nuovo nome 'alm_FineRobotR1'

'#Language "WWB.NET"

Option Explicit

Imports System
Imports System.IO
Imports System.Collections
Imports System.Collections.Generic
Imports System.Collections.ObjectModel
Imports System.Data.Odbc

Public Structure DSnMembers
    Dim DSn As String
    Dim Uid As String
    Dim Pwd As String
End Structure

Public Structure PosQuartina
    Dim mag As Integer
    Dim cass As Integer
End Structure

Public Structure stEstrattore
    Public DEPO As Boolean
    Public ID_CASSETTO As Integer
    Public ID_QUARTINA As String
    Public NOME_PEZZO_UNICO As String
    Public POSIZIONE As Integer
    Public PRONTO As Boolean
    Public STROBE As Boolean
End Structure

'TODO settare bene TOUT
Const TOUT_DISPONIBILE 	As Integer 	= 2 'in secondi - TODO settare a 1
Const TOUT_STEP			As Integer	= 5 'in secondi

'Dim codaMAG1_ES1 As System.Collections.Queue(Of stEstrattore) = New System.Collections.Queue(Of stEstrattore)()

Dim codaMAG1_ES1 As New System.Collections.Queue()
Dim codaMAG2_ES1 As New System.Collections.Queue()

Dim MySqlConnectionString As String
Dim disponibileLastCheck As Double
Dim filepathMemo As String 'memo fullName ultimo file letto da Quadra, usato in RimuoviFileDatiDaQuadra()

Dim enableLogMsg As Boolean = True

Dim oldDebugMsg As String


'Sub Main2
'	Dim F As Object
'    F = Dir("C:\SupervisioneGualini2_C02515_Varie\NoteScamibioDati\R_ note su scambio dati\test\*.*")
'    While F &lt;&gt; ""
'        Debug.Print F
'        F = Dir()
'    End While
'End Sub

Sub testCodaEstrattore
	Dim tmpEs,tmpEs2 As stEstrattore
	Dim tmpStr As String

	For i As Integer = 1  To 3 Step 1
	    tmpEs.DEPO = False
	    tmpEs.ID_CASSETTO = Rnd(1) * 29 + 1
	    tmpEs.ID_QUARTINA = "Q001"
	    tmpEs.NOME_PEZZO_UNICO = tmpEs.ID_QUARTINA &amp;"_" &amp; CStr(i)
	    tmpEs.POSIZIONE = i
	    tmpEs.PRONTO = False
	    tmpEs.STROBE = False

	    'tmpStr = CStr(tmpEs.DEPO)+";" + CStr(tmpEs.ID_CASSETTO)+";" + CStr(tmpEs.ID_QUARTINA)+";" + CStr(tmpEs.NOME_PEZZO_UNICO)+";" _
	    '		+ CStr(tmpEs.POSIZIONE)+";" + CStr(tmpEs.PRONTO)+";" + CStr(tmpEs.STROBE)+";"

		'tmpStr = Serializza_stEstrattore(tmpEs)
		codaMAG1_ES1.Enqueue(Serializza_stEstrattore(tmpEs))

	Next

	'Debug.Clear
	For Each element As String In codaMAG1_ES1
		Debug.Print "elem: " + Convert.ToString(element)' + "; ID_CASSETTO:" + CStr(element.ID_CASSETTO)  + "; ID_QUARTINA:" + element.ID_QUARTINA
		'Dim x() As String
		'x = Split(element,";")
		'For Each st As String In x
		'	Debug.Print st
		'Next
		'For count As Integer = 0 To UBound(x) -1
        '    Debug.Print "countLoop " + CStr(count) + "   " + x(count)
        'Next
		Deserializza_stEstrattore(tmpEs2, element)
	Next
End Sub

Function Serializza_stEstrattore (st As stEstrattore) As String
	Dim sep As String = ";"
	Serializza_stEstrattore = CStr(st.DEPO)+";" + CStr(st.ID_CASSETTO)+";" + CStr(st.ID_QUARTINA)+";" + CStr(st.NOME_PEZZO_UNICO)+";" _
	    		+ CStr(st.POSIZIONE)+";" + CStr(st.PRONTO)+";" + CStr(st.STROBE)+";"
	LogMsg("Serializza_stEstrattore(st) = " &amp; Serializza_stEstrattore)
End Function

Function Deserializza_stEstrattore (ByRef st As stEstrattore, element As String) As Integer
	Deserializza_stEstrattore = 0

	Dim x() As String
	x = Split(element,";")

	For count As Integer = 0 To UBound(x) -1
        'Debug.Print "countLoop " + CStr(count) + "   " + x(count)
        Select Case count
        Case 0
        	st.DEPO 			= CBool(x(count))
        Case 1
        	st.ID_CASSETTO 		= CInt(x(count))
        Case 2
        	st.ID_QUARTINA 		= CStr(x(count))
        Case 3
        	st.NOME_PEZZO_UNICO = CStr(x(count))
        Case 4
        	st.POSIZIONE 		= CInt(x(count))
        Case 5
        	st.PRONTO 			= CBool(x(count))
        Case 6
        	st.STROBE 			= CBool(x(count))
        Case Else
			Throw New System.Exception("GestioneZonaR1.movbas -&gt; Deserializza_stEstrattore() ECCEZZIONE valore Case ")
        End Select
    Next

End Function

Sub Main()

	'#################################
	'CHIAMATE PER DEBUG
	'ResetDatiPezzoMissione(1)
	'testCodaEstrattore()

	'EliminaFileDaQuadra(2)
	'Exit Sub
	'#####################################

	Dim ValutaProssimaCondizione As Boolean 'serve per valutare le condizioni dello stato Attesa

	Dim leggiDaQuadra As Integer
	Dim quartina As String
	Dim quartina_successiva As String
	Dim POSIZIONE As PosQuartina

	Dim ret As Integer
	Dim retMsgBox As VbMsgBoxResult

	Dim varname_pezzo As String
	Dim varname_missioneDaQuadra As String
	Dim varname_estrattore As String

	Dim missioneNum As Integer
	Dim numCassetti As Integer
	Dim valVerificaAttendiCassettoDisponibile As Integer

	Dim filepresente As Boolean
	Dim fileConfigIsOk As Boolean

	Dim stepTout As Double

	Dim rikEstrattore As stEstrattore
	Dim strEstrattore As String


	'MySqlConnectionString = "server=localhost;user=root;database=gualini;port=3306;password=co.mar;"
	'Connector/MySQL ODBC 5.3 ANSI Driver connection string
	If [loc_ImpostazioniImpianto:MySqlConnectionString] &lt;&gt; "" Then
	    MySqlConnectionString = [loc_ImpostazioniImpianto:MySqlConnectionString]
	Else
	    MySqlConnectionString = "DRIVER={MySQL ODBC 5.3 ANSI Driver};" &amp; _
	      "SERVER=localhost;" &amp; _
	      "DATABASE=gualini;" &amp; _
	      "UID=root;" &amp; _
	      "PASSWORD=co.mar;" &amp; _
	      "OPTION=3;"
	End If

    'inizializzo alcune variabili

    If StatoCicloCarico &lt; 100 Then
		StatoCicloCarico = 1000
    End If

    If StatoCicloCarico &lt;&gt; 1000 Then
    	retMsgBox = MsgBox("Attenzione: StatoCicloCarico = " &amp; CStr(StatoCicloCarico) &amp; "!" &amp; vbCrLf &amp; "Resettare?", vbYesNo, "Attenzione")
    	If retMsgBox = vbYes Then
			StatoCicloCarico = 1000
    	End If
    End If

    Debug.Clear

    'forzo aggiornamento estrattori
    [MAG1_ES1_ACT_OLD:ID_CASSETTO] = 16500
    [MAG2_ES1_ACT_OLD:ID_CASSETTO] = 16500

    'forzo aggiornamento dati pezzi da quadra
	'dopo di che rendo possibile processare le code degli estrattori
	If Not [MAG1_ES1_ACT:BUSY] Then
		ResetDatiMembriStruttura("Q1_PEZZO_DISP")
		[MAG1_ES1_ACT:NOME_PEZZO_UNICO] = ""
	End If
	If Not [MAG2_ES1_ACT:BUSY] Then
		ResetDatiMembriStruttura("Q2_PEZZO_DISP")
		[MAG2_ES1_ACT:NOME_PEZZO_UNICO] = ""
	End If

    'aggiorno cassetti pieni e disponibili
    AggiornaCassettiPieni(MySqlConnectionString, 1)
	AggiornaCassettiPieni(MySqlConnectionString, 2)
    AggiornaCassettiDisponibili(MySqlConnectionString, 1)
	AggiornaCassettiDisponibili(MySqlConnectionString, 2)
	AggiornaCassettiInRiempimento(MySqlConnectionString, 1)
	AggiornaCassettiInRiempimento(MySqlConnectionString, 2)

'############STATE MACHINE############


'#####TODO DEBUG
'rimuovere questa parte
'AA:
'[Q1_In:PezzoPronto] = True
'[Q2_In:PezzoPronto] = True
'StatoCicloCarico = 1000

'loc_Q1_path = "C:\SupervisioneGualini2_C02515_Varie\NoteScamibioDati\R_ note su scambio dati\test\Q1\"
'loc_Q2_path = "C:\SupervisioneGualini2_C02515_Varie\NoteScamibioDati\R_ note su scambio dati\test\Q2\"

'############################

	Do
		'azioni da fare tutti i cicli
		If [loc_ImpostazioniImpianto:ResetCicloR1] Then
			[loc_ImpostazioniImpianto:ResetCicloR1] = False
			StatoCicloCarico = 100
		End If

		'gestisco eventuali aggiornamentii da fare al DB per le posizioni degli estrattori
		AggiornaPosizioniEstrattoriES1(MySqlConnectionString)
		ProcessaCodaEstrattori_ZONA_R1()
		AnomaliaDeposito(MySqlConnectionString)

		If Not alm_Presenti_ZonaR1 Or StatoCicloCarico = 6100 Or StatoCicloCarico = 6150 Then
			Select Case StatoCicloCarico

				Case 100	'StatoIniziale
					StatoCicloCarico_txt = "100	'StatoIniziale"
					'DebugMsg "StatoCicloCarico = 100	'StatoIniziale"
					StatoCicloCarico = 1000		'AttesaPezzi

				Case 1000	'AttesaPezzi
					StatoCicloCarico_txt = "1000	'AttesaPezzi"
					'DebugMsg "StatoCicloCarico = 1000	'AttesaPezzi"
					'inizio a scorrere le condizioni di uscita dallo stato
					'StatoCicloCarico = 1010	'AttesaPezzi_AssegnaMissioneRobot

					ValutaProssimaCondizione = True
					'inizio a scorrere le condizioni di uscita dallo stato

					'AttesaPezzi_AssegnaMissioneRobot
					'condizione di richiesta nuovo casseto da magazzino
					If ValutaProssimaCondizione Then
						'guardo se ho una missione assegnabile
						missioneNum = MissioneAssegnabile() 'torna 1 se ho una missione assegnabile da Q1 o 2 se lo è da Q2
						If missioneNum &gt; 0 Then
							ValutaProssimaCondizione = False
							LogMsg "StatoCicloCarico = 1010	'AttesaPezzi_AssegnaMissioneRobot; missioneNum = 0 " &amp; CStr(missioneNum)
							StatoCicloCarico = 4100	'AssegnaMissioneRobot
						End If
					End If

					'AttesaPezzi_AttendiCassettoDisponibile
					'guardo se ho un cassetto disponibile da assegnare a pezzo pronto
					If ValutaProssimaCondizione Then
						valVerificaAttendiCassettoDisponibile = transizioneAttendiCassettoDisponibile() 'serve per non fare il controllo sempre
						'valVerificaAttendiCassettoDisponibile = AttendiCassettoDisponibile() 'serve per non fare il controllo sempre
						'valVerificaAttendiCassettoDisponibile = 0 solo se avevo letto un file della quadra e non avevo cassetti a cui assegnare la quartina
						'valVerificaAttendiCassettoDisponibile &gt; 0 se è passato un tout e non ho ancora assegnato la quartina
						If valVerificaAttendiCassettoDisponibile &gt; 0 Then
							ValutaProssimaCondizione = False
							LogMsg "StatoCicloCarico = 1020	'AttesaPezzi_AttendiCassettoDisponibile &amp; valVerificaAttendiCassettoDisponibile =  " &amp; CStr(valVerificaAttendiCassettoDisponibile)
							leggiDaQuadra = valVerificaAttendiCassettoDisponibile
							StatoCicloCarico = 3100	'AttendiCassettoDisponibile
							'AttendiCassettoDisponibile controlla che si sia liberato un cassetto per assegnare il pezzo ad una quartina
						End If
					End If

					'AttesaPezzi_LeggiFileDaQuadra
					'guardo se ho un pezzo pronto di cui non ho letto il file da quadra
					If ValutaProssimaCondizione Then
						'obiettivo: verificare se ci sono file_pezzo da leggere sulle quadra
						leggiDaQuadra = FileDaLeggere()
						filepresente = False
						If leggiDaQuadra &gt; 0 Then
							filepresente = FileEsiste(leggiDaQuadra)
						End If

						If leggiDaQuadra &gt; 0 And filepresente Then
							ValutaProssimaCondizione = False
							LogMsg "StatoCicloCarico = 1030	'AttesaPezzi_LeggiFileDaQuadra; leggiDaQuadra = " &amp; CStr(leggiDaQuadra)
							StatoCicloCarico = 2100	'LeggiFileDaQuadra
						End If
					End If


					'FineMissioneRobot
					If ValutaProssimaCondizione Then
						'DebugMsg "StatoCicloCarico = 1040	'FineMissioneRobot"
						If [R1_STATUS:FINE_MISSIONE]  _
							And [R1_DATI_PEZZO:MAGAZZINO_ASSEGNATO] &gt; 0 _
							And [R1_DATI_PEZZO:CASSETTO_ASSEGNATO] &gt; 0 _
							And [R1_DATI_PEZZO:NOME_PEZZO_UNICO] &lt;&gt; "" _
							And [R1_DATI_PEZZO:ID_QUARTINA] &lt;&gt; "" _
							Then
								ValutaProssimaCondizione = False
								LogMsg "StatoCicloCarico = 1040	'FineMissioneRobot; [R1_STATUS:FINE_MISSIONE] = True"
								StatoCicloCarico = 6100	'FineRobot
						End If
					End If

					'ErroreMissioneRobot
					If ValutaProssimaCondizione Then
						'DebugMsg "StatoCicloCarico = 1050	'ErroreMissioneRobot"
						If [R1_STATUS:ERR_MISSIONE]  _
							And [R1_DATI_PEZZO:MAGAZZINO_ASSEGNATO] &gt; 0 _
							And [R1_DATI_PEZZO:CASSETTO_ASSEGNATO] &gt; 0 _
							And [R1_DATI_PEZZO:NOME_PEZZO_UNICO] &lt;&gt; "" _
							And [R1_DATI_PEZZO:ID_QUARTINA] &lt;&gt; "" _
							Then
								ValutaProssimaCondizione = False
								LogMsg "StatoCicloCarico = 1050	'FineMissioneRobot; [R1_STATUS:ERR_MISSIONE] = True"
								StatoCicloCarico = 9100	'ErroreRobot
						End If
					End If

				Case 2100	'LeggiFileDaQuadra
					StatoCicloCarico_txt = "2100	'LeggiFileDaQuadra"
					LogMsg "StatoCicloCarico = 2100	'LeggiFileDaQuadra"
					'obiettivo: reperire le informazini contenute nei file_pezzo forniti dalla quadra. la quadra di riferimento dipende dal valore di leggiDaQuadra
					'Guardo se ho almeno un file da leggere
					If (leggiDaQuadra &gt; 0) Then
						'leggo le info del pezzo da file fornito dalla quadra
						varname_pezzo = LeggiFileDaQuadra(leggiDaQuadra)
						ret = VerificaCogruenzaDati(MySqlConnectionString _
													, GetVariableValue(varname_pezzo &amp; ":SERIE_PROFILO") _
													, GetVariableValue(varname_pezzo &amp; ":CODICE_PROFILO") _
													, GetVariableValue(varname_pezzo &amp; ":COD_SQUADRETTA1") _
													, GetVariableValue(varname_pezzo &amp; ":COD_SQUADRETTA2") _
													, GetVariableValue(varname_pezzo &amp; ":NUM_SQUADRETTE1") _
													, GetVariableValue(varname_pezzo &amp; ":NUM_SQUADRETTE2") _
													, fileConfigIsOk _
								)
						If ret &lt;&gt; 0 Then
							LogMsg "StatoCicloCarico = 2100	'LeggiFileDaQuadra -&gt; ERRORE VerificaCogruenzaDati,  codice: " &amp; CStr(ret)

							'TODO qui alzare allarme o StatoCicloCarico = xxxxx per andare in valore diverso

							ResetDatiMembriStruttura(varname_pezzo)
							StatoCicloCarico = 1000	'AttesaPezzi
							GoTo FineCase2100
						End If

						If Not fileConfigIsOk Then
							'alzo allarme
							Select Case leggiDaQuadra
							Case 1
								alm_R1_ConfigError_Q1 = True
								'resetto subito i dati letti
								ResetDatiMembriStruttura("Q1_PEZZO_DISP")
							Case 2
								alm_R1_ConfigError_Q2 = True
								'resetto subito i dati letti
								ResetDatiMembriStruttura("Q2_PEZZO_DISP")
							End Select

							'chiedo se operatore vuole rimuovere automaticamente il file
							Dim configNotOkMsg As String
							configNotOkMsg ="Allarme Configurazione NON VALIDA in File Da Quadra " &amp; CStr(leggiDaQuadra) &amp; vbCrLf _
										&amp; "Vuoi rimuovere automaticamente il file dati dalla quadra?" &amp; vbCrLf  &amp; vbCrLf

							If MsgBox(configNotOkMsg, vbYesNo, "Allarme Pezzo Duplicato") = vbYes Then
								EliminaFileDatiPezzoDuplicato(filepathMemo)
							End If

							StatoCicloCarico = 1000	'AttesaPezzi
							GoTo FineCase2100

						End If
						'controllo se il pezzo è presente nel DB
						Dim pzPresente As Boolean
						pzPresente = False
						ret = VerificaEsistePezzo(MySqlConnectionString _
													, GetVariableValue(varname_pezzo &amp; ":NOME_PEZZO_UNICO") _
													, pzPresente)
						If ret &lt;&gt; 0 Then
							LogMsg "StatoCicloCarico = 2100	'LeggiFileDaQuadra -&gt; ERRORE VerificaEsistePezzo,  codice: " &amp; CStr(ret)

							'TODO qui alzare allarme o StatoCicloCarico = xxxxx per andare in valore diverso

							ResetDatiMembriStruttura(varname_pezzo)
							StatoCicloCarico = 1000	'AttesaPezzi
							GoTo FineCase2100
						End If

						If pzPresente Then
							'alzo allarme
							Select Case leggiDaQuadra
							Case 1
								alm_R1_PezzoDuplicato_Q1 = True
								'resetto subito i dati letti
								ResetDatiMembriStruttura("Q1_PEZZO_DISP")
							Case 2
								alm_R1_PezzoDuplicato_Q2 = True
								'resetto subito i dati letti
								ResetDatiMembriStruttura("Q2_PEZZO_DISP")
							End Select

							'chiedo se operatore vuole rimuovere automaticamente il file
							Dim pzDupMsg As String
							pzDupMsg ="Allarme Pezzo duplicato da quadra " &amp; CStr(leggiDaQuadra) &amp; vbCrLf _
										&amp; "Vuoi rimuovere automaticamente il file dati dalla quadra?" &amp; vbCrLf  &amp; vbCrLf _
										&amp; "Se si verificare anche la fotocellula di presenza pezzo sulla quadra."
							If MsgBox(pzDupMsg, vbYesNo, "Allarme Pezzo Duplicato") = vbYes Then
								EliminaFileDatiPezzoDuplicato(filepathMemo)
							End If

							StatoCicloCarico = 1000	'AttesaPezzi
							GoTo FineCase2100
						End If

						quartina = GetVariableValue(varname_pezzo &amp; ":ID_QUARTINA")
						quartina_successiva = GetVariableValue(varname_pezzo &amp; ":ID_QUARTINA_SUCCESSIVA")

						If quartina = "" Or quartina = "0" Or quartina = " " Then
							'file non presente
							LogMsg "GestioneZonaR1.movbas -&gt; Main() - Case 2100; File non presente su PezzoPronto da Quadra: " &amp; CStr(leggiDaQuadra)
							StatoCicloCarico = 1000	'AttesaPezzi
						Else
							'verifico se la quartina esiste in magazzino
							POSIZIONE = VerificaSeQuartinaEsisteInMagazzino(leggiDaQuadra, quartina, MySqlConnectionString)

							If POSIZIONE.mag &gt; 0 Then
								'la quartina è stata assegnata allora aggiungo la richiesta cassetto alla coda missioni del PLC
								'ho gia memorizzato in VerificaSeQuartinaEsisteInMagazzino magazzinio e cassetto assegnato
								StatoCicloCarico = 2200	'RikCassettoInEstrattorePlc
							Else
								'quartina non esiste allora guardo se ci sono cassetti disponibili nel magazzino di riferimento in base a TipoCarico

								If [loc_ImpostazioniImpianto:TipoCarico] = 0 Then
									'QuadraSuMagazzinoCorrispondente
									numCassetti = CassettiDisponibili(leggiDaQuadra, MySqlConnectionString)
									If numCassetti &gt; 0 Then
										StatoCicloCarico = 2300	'AssegnaCassettoAllaQuartina
									Else
										StatoCicloCarico = 1000	'AttesaPezzi
									End If
								Else
									'QuadraSuTutto
									numCassetti = CassettiDisponibili(0, MySqlConnectionString)
									If numCassetti &gt; 0 Then
										StatoCicloCarico = 2300	'AssegnaCassettoAllaQuartina
									Else
										StatoCicloCarico = 1000	'AttesaPezzi
									End If
								End If
							End If
						End If
					End If
				FineCase2100:

				Case 2200	'RikCassettoInEstrattorePlc
					StatoCicloCarico_txt = "2200	'RikCassettoInEstrattorePlc"
					LogMsg "StatoCicloCarico = 2200	'RikCassettoInEstrattorePlc"
	'				'posso fare richiesta di estrattore se EsXX_RIK:NOME_PEZZO_UNICO = EsXX_ACT:NOME_PEZZO_UNICO e EsXX_ACT:DEPO = 1 , quindi pezzo depositato
	'				'oppure se EsXX_RIK:NOME_PEZZO_UNICO = "" che significa che non ho richieste pendenti
	'
	'				'RikCassettoInEstrattorePlc(posizione.mag, posizione.cass) 'non è necessario passare la quartina perchè è già stata assegnata al cassetto corrispondente
	'				If (posizione.mag = 1 And [MAG1_ES1_RIK:ID_CASSETTO] = posizione.cass) _
	'					Or (posizione.mag = 2 And [MAG2_ES1_RIK:ID_CASSETTO] = posizione.cass) Then
	'					'caso in cui il cassetto richiesto sia uguale a quello precedente
	'					StatoCicloCarico = 1000	'AttesaPezzi
	'				End If

					Select Case leggiDaQuadra
						Case 1:
							varname_pezzo = "Q1_PEZZO_DISP"
						Case 2:
							varname_pezzo = "Q2_PEZZO_DISP"
						Case Else
							Throw New System.Exception("GestioneZonaR1.movbas -&gt; Case 2200	'RikCassettoInEstrattorePlc: parametro leggiDaQuadra non ammesso: " &amp; CStr(leggiDaQuadra) &amp; ".")
					End Select

					If POSIZIONE.mag = 1  Then
						rikEstrattore.ID_CASSETTO				= POSIZIONE.cass
						rikEstrattore.ID_QUARTINA 				= GetVariableValue(varname_pezzo &amp; ":ID_QUARTINA") 'val di varname_pezzo viene da 	Case 2100	'LeggiFileDaQuadra
						rikEstrattore.NOME_PEZZO_UNICO 			= GetVariableValue(varname_pezzo &amp; ":NOME_PEZZO_UNICO")
						rikEstrattore.POSIZIONE 				= GetVariableValue(varname_pezzo &amp; ":POSIZIONE")
						rikEstrattore.DEPO						= False
						rikEstrattore.PRONTO					= False
						rikEstrattore.STROBE 					= True

						strEstrattore = Serializza_stEstrattore(rikEstrattore)
						DebugMsg("	Case 2200	'RikCassettoInEstrattorePlc - codaMAG1_ES1.Enqueue(" &amp; strEstrattore &amp; ")")
						'guardo di non richiedere cassetto già fuori
						If [MAG1_ES1_ACT:NOME_PEZZO_UNICO] &lt;&gt; rikEstrattore.NOME_PEZZO_UNICO Then
							codaMAG1_ES1.Enqueue(strEstrattore)
						Else
							DebugMsg("	Case 2200	'RikCassettoInEstrattorePlc - RIK DOPPIA :" &amp; strEstrattore &amp; ")")
						End If


						StatoCicloCarico = 1000	'AttesaPezzi

					ElseIf POSIZIONE.mag = 2 Then
						rikEstrattore.ID_CASSETTO				= POSIZIONE.cass
						rikEstrattore.ID_QUARTINA 				= GetVariableValue(varname_pezzo &amp; ":ID_QUARTINA") 'val di varname_pezzo viene da 	Case 2100	'LeggiFileDaQuadra
						rikEstrattore.NOME_PEZZO_UNICO 			= GetVariableValue(varname_pezzo &amp; ":NOME_PEZZO_UNICO")
						rikEstrattore.POSIZIONE 				= GetVariableValue(varname_pezzo &amp; ":POSIZIONE")
						rikEstrattore.DEPO						= False
						rikEstrattore.PRONTO					= False
						rikEstrattore.STROBE 					= True

						strEstrattore = Serializza_stEstrattore(rikEstrattore)
						DebugMsg("	Case 2200	'RikCassettoInEstrattorePlc - codaMAG2_ES1.Enqueue(" &amp; strEstrattore &amp; ")")
						'guardo di non richiedere cassetto già fuori
						If [MAG2_ES1_ACT:NOME_PEZZO_UNICO] &lt;&gt; rikEstrattore.NOME_PEZZO_UNICO Then
							codaMAG2_ES1.Enqueue(strEstrattore)
						Else
							DebugMsg("	Case 2200	'RikCassettoInEstrattorePlc - RIK DOPPIA :" &amp; strEstrattore &amp; ")")
						End If
						'codaMAG2_ES1.Enqueue(Serializza_stEstrattore(rikEstrattore))

						StatoCicloCarico = 1000	'AttesaPezzi
					ElseIf POSIZIONE.mag &lt;&gt; 1 And POSIZIONE.mag &lt;&gt; 2 Then
						Throw New System.Exception("GestioneZonaR1.movbas -&gt; Main() ECCEZZIONE: Case 2200 'RikCassettoInEstrattorePlc")
					End If


				Case 2300	'AssegnaCassettoAllaQuartina
					StatoCicloCarico_txt = "2300	'AssegnaCassettoAllaQuartina"
					LogMsg "StatoCicloCarico = 2300	'AssegnaCassettoAllaQuartina"
					'obiettivo: assegnare un casetto alla quartina. se sono qui sicuramento ho un cassetto disponibile in base al valore di [loc_ImpostazioniImpianto:TipoCarico]
					'assegno il cassetto alla quartina che proviene dalla quadra identificata da leggiDaQuadra

					Select Case leggiDaQuadra
						Case 1:
							varname_pezzo = "Q1_PEZZO_DISP"
						Case 2:
							varname_pezzo = "Q2_PEZZO_DISP"
						Case Else
							'Throw New System.Exception("GestioneZonaR1.movbas -&gt; Case 2300	'AssegnaCassettoAllaQuartina: parametro leggiDaQuadra non ammesso: " &amp; CStr(leggiDaQuadra) &amp; ".")
							alm_StatoCiclo_R1 = True
							alm_StatoCiclo_R1_txt = "ECCEZZIONE: Case 2300	'AssegnaCassettoAllaQuartina; leggiDaQuadra = " &amp; CStr(leggiDaQuadra) &amp; "; FARE RESET CICLO R1"
					End Select

					POSIZIONE = AssegnaCassettoAllaQuartina([loc_ImpostazioniImpianto:TipoCarico] _
										, leggiDaQuadra _
										, MySqlConnectionString _
										, GetVariableValue(varname_pezzo &amp; ":ID_QUARTINA") _
										, GetVariableValue(varname_pezzo &amp; ":TOTALE_PEZZI_QUARTINA") _
										, GetVariableValue(varname_pezzo &amp; ":NOME_COMMESSA") _
										, GetVariableValue(varname_pezzo &amp; ":NUM_SQUADRETTE1") _
										, GetVariableValue(varname_pezzo &amp; ":COD_SQUADRETTA1") _
										, GetVariableValue(varname_pezzo &amp; ":NUM_SQUADRETTE2") _
										, GetVariableValue(varname_pezzo &amp; ":COD_SQUADRETTA2") _
										)
					If POSIZIONE.mag &gt; 0 And POSIZIONE.cass &gt; 0 Then
						StatoCicloCarico = 2200	'RikCassettoInEstrattorePlc
					Else
						'Throw New System.Exception("GestioneZonaR1.movbas -&gt; Main() ECCEZZIONE: Case 2300 'AssegnaCassettoAllaQuartina: posizione.mag = " _
						'		&amp; CStr(POSIZIONE.mag) &amp; ": posizione.cass = " &amp; CStr(POSIZIONE.cass) &amp; ".")
						alm_StatoCiclo_R1 = True
						alm_StatoCiclo_R1_txt = "ECCEZZIONE: Case 2300	'AssegnaCassettoAllaQuartina; AssegnaCassettoAllaQuartina() POSIZIONE.mag = " &amp; CStr(POSIZIONE.mag) &amp; "POSIZIONE.cass=" &amp; CStr(POSIZIONE.cass) &amp; "; FARE RESET CICLO R1"
					End If

				Case 3100	'AttendiCassettoDisponibile
					StatoCicloCarico_txt = "3100	'AttendiCassettoDisponibile"
					LogMsg "StatoCicloCarico = 3100	'AttendiCassettoDisponibile" &amp; "; valVerificaAttendiCassettoDisponibile = " &amp; CStr(valVerificaAttendiCassettoDisponibile)
					'memorizzo da quale quadra proviene il pezzo
	'			leggiDaQuadra = AttendiCassettoDisponibile()
					If leggiDaQuadra &gt; 0 Then
						StatoCicloCarico = 2300	'AssegnaCassettoAllaQuartina
					Else
						StatoCicloCarico = 1000	'AttesaPezzi
					End If

				Case 4100	'AssegnaMissioneRobot
					StatoCicloCarico_txt = "4100	'AssegnaMissioneRobot"
					LogMsg "StatoCicloCarico = 4100	'AssegnaMissioneRobot"
					'se sono qui ho tutte le condizioni per assegnare una nuova missione al robot
					'devo capire però quale missione assegnare nel caso in cui ci siano le condizioni per tutte e due le quadre

					If [R1_STATUS:DISPONIBILE] And Not [R1_STATUS:IN_MISSIONE] Then
						[R1_STATUS:PZ_DA_QUADRA] = missioneNum ' da step 1010 -&gt; MissioneAssegnabile() torna 1 se ho una missione assegnabile da Q1 o 2 se lo è da Q2
						varname_missioneDaQuadra = IIf([R1_STATUS:PZ_DA_QUADRA] = 1, "Q1_PEZZO_DISP", "Q2_PEZZO_DISP")

						'memorizzo che ho assegnato il pezzo ad una missione
						SetVariableValue(varname_missioneDaQuadra &amp; ":ROBOT_ASSEGNATO", True)

						[R1_STATUS:MAGAZZINO]				= GetVariableValue(varname_missioneDaQuadra &amp; ":MAGAZZINO_ASSEGNATO")
						[R1_STATUS:CASSETTO]				= GetVariableValue(varname_missioneDaQuadra &amp; ":CASSETTO_ASSEGNATO")
						[R1_STATUS:POSIZIONE_PEZZO]			= GetVariableValue(varname_missioneDaQuadra &amp; ":POSIZIONE")
						[R1_STATUS:ID_QUARTINA]				= GetVariableValue(varname_missioneDaQuadra &amp; ":ID_QUARTINA")
						[R1_STATUS:ID_QUARTINA_SUCCESSIVA]	= GetVariableValue(varname_missioneDaQuadra &amp; ":ID_QUARTINA_SUCCESSIVA")

						'aggiungere tutte le altre variabili dimensionali
						'per comodità uso la variabile R1_DATI_PEZZO che ha stesso tipo di Q1_PEZZO_DISP e Q2_PEZZO_DISP
						'e copio tutti valori dei membri con un ciclo

						Dim objR1 As DBVarObjCmdTarget
						Dim objPezzo As DBVarObjCmdTarget
						Dim MemberR1 As DBVarObjCmdTarget
						Dim MemberPezzo As DBVarObjCmdTarget
						objPezzo = GetVariableObject(varname_missioneDaQuadra)
						objR1 = GetVariableObject("R1_DATI_PEZZO")
						Dim mCount As Integer	'contatore dei membri
						mCount = 0	'inizializzo a 0

						MemberPezzo 	= objPezzo.GetMemberObjectFromIndex(mCount)
						MemberR1 		= objR1.GetMemberObjectFromIndex(mCount)
						While Not MemberPezzo Is Nothing
							'DebugMsg "StatoCicloCarico = 4100 'AssegnaMissioneRobot -&gt; MemberPezzo name is -&gt; " &amp; MemberPezzo.GetName &amp; "; MemberPezzo value is -&gt; " &amp; CStr(MemberPezzo.Value) '
							'DebugMsg "StatoCicloCarico = 4100 'AssegnaMissioneRobot -&gt; MemberR1 name is -&gt; " &amp; MemberR1.GetName &amp; "; MemberR1 value is -&gt; " &amp; CStr(MemberR1.Value) '

							MemberR1.Value = MemberPezzo.Value
							mCount = mCount + 1
							MemberPezzo 	= objPezzo.GetMemberObjectFromIndex(mCount)
							MemberR1 		= objR1.GetMemberObjectFromIndex(mCount)
						End While
						MemberPezzo 	= Nothing
						MemberR1 		= Nothing
						objPezzo 		= Nothing
						objR1 			= Nothing

						'Decodifica Missione R1 in base a serie e codice profilo
						DecodificaMissioneR1()

					End If
					'alzo il bit al Robot di Strobe missione
					[R1_STATUS:NUOVA_MISSIONE] = True
					'rendo BUSY l'estrattore
					'If [R1_STATUS:MAGAZZINO] = 1 Then
					'	[MAG1_ES1_ACT:BUSY] = True
					'End If
					'If [R1_STATUS:MAGAZZINO] = 2 Then
					'	[MAG2_ES1_ACT:BUSY] = True
					'End If

					StatoCicloCarico = 4195	'AttesaSegnaleRobotOccupato_settout

				Case 4195	'AttesaSegnaleRobotOccupato_settout
					StatoCicloCarico_txt = "4195	'AttesaSegnaleRobotOccupato_settout"
					If	[R1_STATUS:DISPONIBILE] Then
						stepTout = Timer()
						StatoCicloCarico = 4200	'AttesaSegnaleRobotOccupato
					End If


				Case 4200	'AttesaSegnaleRobotOccupato
					StatoCicloCarico_txt = "4200	'AttesaSegnaleRobotOccupato"
					LogMsg "StatoCicloCarico = 4200	'AttesaSegnaleRobotOccupato"
					msg_Step_R1_4200_AttesaMissione = True
					'If SuperatoTimeout(stepTout, TOUT_STEP) Then
					'	msg_Step_R1_4200_AttesaMissione = True
					'	'per poter fare ripartenza devo fare reset delle struct già assegnate
					'	'ResetDatiMembriStruttura("R1_DATI_PEZZO")
					'	'ResetDatiMembriStruttura("Q1_PEZZO_DISP")
					'	'ResetDatiMembriStruttura("Q2_PEZZO_DISP")
					'	StatoCicloCarico = 4195	'AttesaSegnaleRobotOccupato_settout
					'End If
					'ricevo segnale di robot in missione
					If	[R1_STATUS:DISPONIBILE] And [R1_STATUS:IN_MISSIONE] Then
						msg_Step_R1_4200_AttesaMissione = False

						'rendo BUSY l'estrattore
						If [R1_STATUS:MAGAZZINO] = 1 Then
							[MAG1_ES1_ACT:BUSY] = True
						End If
						If [R1_STATUS:MAGAZZINO] = 2 Then
							[MAG2_ES1_ACT:BUSY] = True
						End If
						'StatoCicloCarico = 1000	'AttesaPezzi
						StatoCicloCarico =  4500	'Attendi Sblocco pezz
					End If

				Case 4500	'Attendi Sblocco pezzo
					StatoCicloCarico_txt = "4500	'Attendi Sblocco pezzo"
					LogMsg "StatoCicloCarico = 4500	'Attendi Sblocco pezzo EliminaFileDaQuadra"

					If [R1_STATUS:PZ_DA_QUADRA] = 1 And [Q1_In:PezzoScaricato]  Then
							'EliminaFileDaQuadra([R1_STATUS:PZ_DA_QUADRA])
							EliminaFileDaQuadra(1)
							'faccio reset dati pezzo perchè ho gia copiato i valori in R1_DATI_PEZZO
							ResetDatiMembriStruttura("Q1_PEZZO_DISP")
							ValutaProssimaCondizione = False
							LogMsg "StatoCicloCarico = 4500	'Attendi Sblocco pezzo EliminaFileDaQuadra ([R1_STATUS:PZ_DA_QUADRA]); Quadra = " &amp; CStr([R1_STATUS:PZ_DA_QUADRA])
							StatoCicloCarico = 1000	'AttesaPezzi
						End If

						'If ([PLC_TRANSF_Q2_IN:PEZZO_SCARICATO] And Not [Q1_Out:PezzoPronto])   Then
						If [R1_STATUS:PZ_DA_QUADRA] = 2 And [Q2_In:PezzoScaricato]  Then
							'EliminaFileDaQuadra([R1_STATUS:PZ_DA_QUADRA])
							EliminaFileDaQuadra(2)
							'faccio reset dati pezzo perchè ho gia copiato i valori in R1_DATI_PEZZO
							ResetDatiMembriStruttura("Q2_PEZZO_DISP")
							LogMsg "StatoCicloCarico = 4500	'Attendi Sblocco pezzo EliminaFileDaQuadra ([R1_STATUS:PZ_DA_QUADRA]); Quadra = " &amp; CStr([R1_STATUS:PZ_DA_QUADRA])
							StatoCicloCarico = 1000	'AttesaPezzi
						End If



				Case 6100	'FineRobot
					StatoCicloCarico_txt = "6100	'FineRobot"
					LogMsg "StatoCicloCarico = 6100	'FineRobot"
					'inserisco dati quartina e pezzo nel DB
					ret = FineRobot(MySqlConnectionString)

					[R1_STATUS:FINE_MISSIONE_ACK] = True 'invio ack
					If ret &lt;&gt; 0 Then
						'Alzo allarme
						alm_FineRobotR1 = True
						MsgBox("Errore inserimento Pezzo, dati non caricati su DB",vbExclamation, "Errore inserimento dati in DB")
					End If
					stepTout = Timer()
					StatoCicloCarico = 6150	'AttesaFineMissioneAck_reset


				Case 6150	'AttesaFineMissioneAck_reset
					StatoCicloCarico_txt = "6150	'AttesaFineMissioneAck_reset"
					'ATTENZIONE valore 6150 usato in AnomaliaDeposito()
					LogMsg "StatoCicloCarico = 6150	'AttesaFineMissioneAck_reset"
					'If SuperatoTimeout(stepTout, TOUT_STEP) Then
					'	alm_Step_ToutR1_6150 = True
					'	'dopo aver alzato allarme vado comunque avanti per finire il ciclo, tanto gli step rimanenti non riguardano il robot
					'	[R1_STATUS:FINE_MISSIONE_ACK] =False
					'	'segnalo all'estrattore che ho depositato il pezzo
					'	varname_estrattore = IIf([R1_DATI_PEZZO:MAGAZZINO_ASSEGNATO] = 1, "MAG1_ES1_ACT", "MAG2_ES1_ACT")
					'	SetVariableValue(varname_estrattore &amp; ":DEPO",  True)	'pezzo depositato
					'	SetVariableValue(varname_estrattore &amp; ":BUSY",  False)	'reset bit BUSY dell'estrattore
					'	StatoCicloCarico = 6200	'VerificaUltimoPezzo
					'End If
					If [R1_STATUS:FINE_MISSIONE] = False Then
						[R1_STATUS:FINE_MISSIONE_ACK] =False
						alm_Step_ToutR1_6150 = False
						'segnalo all'estrattore che ho depositato il pezzo
						varname_estrattore = IIf([R1_DATI_PEZZO:MAGAZZINO_ASSEGNATO] = 1, "MAG1_ES1_ACT", "MAG2_ES1_ACT")
						SetVariableValue(varname_estrattore &amp; ":DEPO",  True)	'pezzo depositato
						SetVariableValue(varname_estrattore &amp; ":BUSY",  False)	'reset bit BUSY dell'estrattore
						StatoCicloCarico = 6200	'VerificaUltimoPezzo
					End If

				Case 6200	'VerificaUltimoPezzo
					StatoCicloCarico_txt = "6200	'VerificaUltimoPezzo"
					LogMsg "StatoCicloCarico = 6200	'VerificaUltimoPezzo"
						'se ultimo pezzo della quartina faccio rientrare l'estrattore
						'TODO potrei contare quanti pezzo ho nella quartina
						Dim countpezzi As Integer
						ret = PezziNellaQuartina(MySqlConnectionString, [R1_DATI_PEZZO:ID_QUARTINA], countpezzi)
						'SELECT count(*) FROM gualini.pezzo WHERE quartina_ID_QUARTINA = "010071050005.BATH058";
						'If ret &lt;&gt; 0 Then

						'End If

						If countpezzi = 4 Then
							'forzo il valore di ultimo pezzo
							[R1_DATI_PEZZO:ULTIMO_PEZZO] = True
						End If
						If Not [R1_DATI_PEZZO:ULTIMO_PEZZO]  Then
							StatoCicloCarico = 6300	'GestisciQuartinaSuccessiva
						Else
							'è ultimo pezzo allora rilevo a quale estrattore è relativo
							rikEstrattore.ID_CASSETTO				= 0 'faccio rientrare il cassetto
							rikEstrattore.ID_QUARTINA 				= ""
							rikEstrattore.NOME_PEZZO_UNICO 			= ""
							rikEstrattore.POSIZIONE 				= 0
							rikEstrattore.DEPO						= False
							rikEstrattore.PRONTO					= False
							rikEstrattore.STROBE 					= True
							If [R1_DATI_PEZZO:MAGAZZINO_ASSEGNATO] = 1  Then

								strEstrattore =Serializza_stEstrattore(rikEstrattore)
								DebugMsg("Case 6200	'VerificaUltimoPezzo - codaMAG1_ES1.Enqueue(" &amp; strEstrattore &amp; ")")
								codaMAG1_ES1.Enqueue(strEstrattore)
								'codaMAG1_ES1.Enqueue(Serializza_stEstrattore(rikEstrattore))
							ElseIf [R1_DATI_PEZZO:MAGAZZINO_ASSEGNATO] = 2 Then
								strEstrattore =Serializza_stEstrattore(rikEstrattore)
								DebugMsg("Case 6200	'VerificaUltimoPezzo - codaMAG2_ES1.Enqueue(" &amp; strEstrattore &amp; ")")
								codaMAG2_ES1.Enqueue(strEstrattore)
								'codaMAG2_ES1.Enqueue(Serializza_stEstrattore(rikEstrattore))
							End If
							StatoCicloCarico = 6300	'GestisciQuartinaSuccessiva

						End If

				Case 6300	'GestisciQuartinaSuccessiva
					StatoCicloCarico_txt = "6300	'GestisciQuartinaSuccessiva"
					LogMsg "StatoCicloCarico = 6300	'GestisciQuartinaSuccessiva"
					'reset dei dati di missione
					If [loc_ImpostazioniImpianto:TipoCarico] = 0 _
							And [loc_ImpostazioniImpianto:AbillRicercaQrtSuccessiva] _
							And [R1_DATI_PEZZO:ID_QUARTINA_SUCCESSIVA] &lt;&gt; "" _
							And [R1_DATI_PEZZO:ID_QUARTINA_SUCCESSIVA] &lt;&gt; "0" _
						Then
						StatoCicloCarico = 7100	'RilevaCassettoQuartinaSuccessiva
					Else
						'non posso fare l'anticipo delle richieste di cassetto
						StatoCicloCarico = 8100	'ResetDatiPezzoMissione
					End If

				Case 7100	'RilevaCassettoQuartinaSuccessiva
					StatoCicloCarico_txt = "7100	'RilevaCassettoQuartinaSuccessiva"
					LogMsg "StatoCicloCarico = 7100	'RilevaCassettoQuartinaSuccessiva"
					POSIZIONE = RilevaCassettoQuartinaSuccessiva(MySqlConnectionString)
					If (POSIZIONE.mag &gt; 0 And POSIZIONE.cass &gt; 0) Then
						[R1_DATI_PEZZO:MAGAZZINO_ASSEGNATO_QRT_SUCCESSIVA] = POSIZIONE.mag
						[R1_DATI_PEZZO:CASSETTO_ASSEGNATO_QRT_SUCCESSIVA]  = POSIZIONE.cass
						StatoCicloCarico = 7200	'AggiungiMissioneQuartinaSuccessivaCodaPlc
					Else
						'non ho cassetti disponibili perchè magazzino pieno
						StatoCicloCarico = 8100	'ResetDatiPezzoMissione
					End If


				Case 7200	'AggiungiMissioneQuartinaSuccessivaCodaPlc
					StatoCicloCarico_txt = "7200	'AggiungiMissioneQuartinaSuccessivaCodaPlc"
					LogMsg "StatoCicloCarico = 7200	'AggiungiMissioneQuartinaSuccessivaCodaPlc"

					rikEstrattore.ID_CASSETTO				= [R1_DATI_PEZZO:CASSETTO_ASSEGNATO_QRT_SUCCESSIVA]
					rikEstrattore.ID_QUARTINA 				= [R1_DATI_PEZZO:ID_QUARTINA_SUCCESSIVA]
					rikEstrattore.NOME_PEZZO_UNICO 			= "qrt_succ"
					rikEstrattore.POSIZIONE 				= 0
					rikEstrattore.DEPO						= True	'visto che è quartina successiva e non ho ancora il pezzo non rendo la cosa bloccante
					rikEstrattore.PRONTO					= False
					rikEstrattore.STROBE 					= True
					If [R1_DATI_PEZZO:MAGAZZINO_ASSEGNATO_QRT_SUCCESSIVA] = 1  Then

						strEstrattore =Serializza_stEstrattore(rikEstrattore)
						DebugMsg("Case 7200	'AggiungiMissioneQuartinaSuccessivaCodaPlc - codaMAG1_ES1.Enqueue(" &amp; strEstrattore &amp; ")")
						codaMAG1_ES1.Enqueue(strEstrattore)

						'codaMAG1_ES1.Enqueue(Serializza_stEstrattore(rikEstrattore))
					ElseIf [R1_DATI_PEZZO:MAGAZZINO_ASSEGNATO_QRT_SUCCESSIVA] = 2 Then

						strEstrattore =Serializza_stEstrattore(rikEstrattore)
						DebugMsg("Case 7200	'AggiungiMissioneQuartinaSuccessivaCodaPlc - codaMAG2_ES1.Enqueue(" &amp; strEstrattore &amp; ")")
						codaMAG2_ES1.Enqueue(strEstrattore)

						'codaMAG2_ES1.Enqueue(Serializza_stEstrattore(rikEstrattore))
					End If

					StatoCicloCarico = 8100	'ResetDatiPezzoMissione

				Case 8100	'ResetDatiPezzoMissione
					StatoCicloCarico_txt = "8100	'ResetDatiPezzoMissione"
					LogMsg "StatoCicloCarico = 8100	'ResetDatiPezzoMissione"

					'###TODO	SIMULAZIONE
					'###CANCELLA DOPO TEST
					'#################################################################################
					'If [R1_STATUS:PZ_DA_QUADRA] = 1 Then
					'	[Q1_Out:PezzoPronto] = False
					'	EliminaFileSimulazione(1)
					'ElseIf [R1_STATUS:PZ_DA_QUADRA] = 2 Then
					'	[Q2_Out:PezzoPronto] = False
					'	EliminaFileSimulazione(2)
					'End If

					'################################################################################



					'ATTENZIONE ELIMINA SPOSTATO IN  StatoCicloCarico = 1000 su condizione If [PLC_TRANSF_Q1_IN:PEZZO_SCARICATO] Or [PLC_TRANSF_Q2_IN:PEZZO_SCARICATO]   Then
					'occorre eliminare il file dalla quadra
					'EliminaFileDaQuadra([R1_STATUS:PZ_DA_QUADRA], [R1_DATI_PEZZO:NOME_PEZZO_UNICO])
					'EliminaFileDaQuadra([R1_STATUS:PZ_DA_QUADRA])


					'ResetDatiPezzoMissione([R1_STATUS:PZ_DA_QUADRA]) non uso più questa perchè i dati da Qx_PEZZO_DISP li ho già resettati
					'If [R1_STATUS:PZ_DA_QUADRA] = 1 Then
					'	ResetDatiMembriStruttura("Q1_PEZZO_DISP")
					'ElseIf [R1_STATUS:PZ_DA_QUADRA] = 2 Then
					'	ResetDatiMembriStruttura("Q2_PEZZO_DISP")
					'End If
					'reset dei valori dei membri che identificano missione e pezzo in pinza
					ResetDatiMembriStruttura("R1_STATUS")
					ResetDatiMembriStruttura("R1_DATI_PEZZO")

					'aggiorno cassetti pieni e disponibili
				    AggiornaCassettiPieni(MySqlConnectionString, 1)
					AggiornaCassettiPieni(MySqlConnectionString, 2)
				    AggiornaCassettiDisponibili(MySqlConnectionString, 1)
					AggiornaCassettiDisponibili(MySqlConnectionString, 2)
					AggiornaCassettiInRiempimento(MySqlConnectionString, 1)
					AggiornaCassettiInRiempimento(MySqlConnectionString, 2)

					StatoCicloCarico = 1000	'AttesaPezzi

				Case 9100	'ErroreMissioneRobot
					StatoCicloCarico_txt = "9100	'ErroreMissioneRobot"
					LogMsg "StatoCicloCarico = 9100	'ErroreMissioneRobot"
					[R1_STATUS:ERR_MISSIONE_ACK] = True 'invio ack

					stepTout = Timer()
					StatoCicloCarico = 9150	'AttesaErroreMissioneRobotAck_reset


				Case 9150	'AttesaErroreMissioneRobotAck_reset
					StatoCicloCarico_txt = "9150	'AttesaErroreMissioneRobotAck_reset"
					LogMsg "StatoCicloCarico =9150	'AttesaErroreMissioneRobotAck_reset"
					If SuperatoTimeout(stepTout, TOUT_STEP) Then
						alm_Step_ToutR1_9150 = True
						'dopo aver alzato allarme vado comunque avanti per finire il ciclo, tanto gli step rimanenti non riguardano il robot
						[R1_STATUS:ERR_MISSIONE_ACK] =False
						'segnalo all'estrattore che ho depositato il pezzo
						varname_estrattore = IIf([R1_DATI_PEZZO:MAGAZZINO_ASSEGNATO] = 1, "MAG1_ES1_ACT", "MAG2_ES1_ACT")
						SetVariableValue(varname_estrattore &amp; ":DEPO",  True)	'pezzo depositato
						SetVariableValue(varname_estrattore &amp; ":BUSY",  False)	'reset bit BUSY dell'estrattore

						'faccio reset di NOME_PEZZO_UNICO nel caso in cui la prossima richiesta sia relativa
						'allo stezzo pezzo che ha dato errore
						SetVariableValue(varname_estrattore &amp; ":NOME_PEZZO_UNICO",  "")	'reset di NOME_PEZZO_UNICO

						StatoCicloCarico = 8100	'ResetDatiPezzoMissione
					End If
					If [R1_STATUS:ERR_MISSIONE] = False Then
						[R1_STATUS:ERR_MISSIONE_ACK] =False
						alm_Step_ToutR1_9150 = False
						'segnalo all'estrattore che ho depositato il pezzo
						varname_estrattore = IIf([R1_DATI_PEZZO:MAGAZZINO_ASSEGNATO] = 1, "MAG1_ES1_ACT", "MAG2_ES1_ACT")
						SetVariableValue(varname_estrattore &amp; ":DEPO",  True)	'pezzo depositato
						SetVariableValue(varname_estrattore &amp; ":BUSY",  False)	'reset bit BUSY dell'estrattore

						'faccio reset di NOME_PEZZO_UNICO nel caso in cui la prossima richiesta sia relativa
						'allo stezzo pezzo che ha dato errore
						SetVariableValue(varname_estrattore &amp; ":NOME_PEZZO_UNICO",  "")	'reset di NOME_PEZZO_UNICO

						StatoCicloCarico = 8100	'ResetDatiPezzoMissione
					End If

					'

				Case Else
					LogMsg("Main() -&gt; Case StatoCicloCarico Else; StatoCicloCarico = " &amp; CStr(StatoCicloCarico))
					Throw New System.Exception("GestioneZonaR1.movbas -&gt; Main() ECCEZZIONE: StatoCicloCarico valore non ammesso: " &amp; CStr(StatoCicloCarico) &amp; ".")

			End Select
		End If

	DoEvents

	'Esegui LogMessage solo se arrivo su un nuovo step ciclo
	If StatoCicloCarico_Old &lt;&gt; StatoCicloCarico Then
		enableLogMsg = True
		StatoCicloCarico_Old = StatoCicloCarico
	Else
		enableLogMsg = False
	End If

	Loop Until IsInStoppingMode

End Sub

Function AnomaliaDeposito(connectionString As String) 'As Boolean
	'AnomaliaDeposito = False

	Dim anomaliaES1 As Boolean
	Dim anomaliaES2 As Boolean
	Dim retMsg As VbMsgBoxResult
	Dim strMsg As String

	'abilito LogMsg
	enableLogMsg = True

	If [R1_DATI_PEZZO:MAGAZZINO_ASSEGNATO] = 1  _
			And [R1_STATUS:DISPONIBILE] _
			And (Not [R1_STATUS:IN_MISSIONE] And Not ([R1_STATUS:FINE_MISSIONE] Or [R1_STATUS:ERR_MISSIONE])) _
			And ([MAG1_ES1_ACT:BUSY] And Not [MAG1_ES1_ACT:DEPO]) _
			And StatoCicloCarico &lt;&gt; 6150 _
		Then
		'			And (Not [R1_STATUS:FINE_MISSIONE] Or Not [R1_STATUS:ERR_MISSIONE]) _

		DebugMsg("AnomaliaDeposito() -&gt; [R1_DATI_PEZZO:MAGAZZINO_ASSEGNATO] = " &amp; CStr([R1_DATI_PEZZO:MAGAZZINO_ASSEGNATO]) &amp; "; [R1_STATUS:IN_MISSIONE] = " &amp; CStr([R1_STATUS:IN_MISSIONE]) _
							&amp; "; [R1_STATUS:FINE_MISSIONE] = " &amp; CStr([R1_STATUS:FINE_MISSIONE]) &amp; "; [R1_STATUS:ERR_MISSIONE] = " &amp; CStr([R1_STATUS:ERR_MISSIONE]) _
							&amp; "; [MAG1_ES1_ACT:BUSY] = " &amp;CStr([MAG1_ES1_ACT:BUSY] ) &amp; "; [MAG1_ES1_ACT:DEPO] = " &amp; CStr([MAG1_ES1_ACT:DEPO]) &amp; "; StatoCicloCarico = " &amp; CStr(StatoCicloCarico))
			anomaliaES1 = True
			alm_AnomaliaDeposito_R1 = True
			LogMsg("AnomaliaDeposito() -&gt; Anomalia  MAG1_ES1.")
	End If

	If [R1_DATI_PEZZO:MAGAZZINO_ASSEGNATO] = 2  _
			And [R1_STATUS:DISPONIBILE] _
			And (Not [R1_STATUS:IN_MISSIONE] And Not ([R1_STATUS:FINE_MISSIONE] Or [R1_STATUS:ERR_MISSIONE])) _
			And ([MAG2_ES1_ACT:BUSY] And Not [MAG2_ES1_ACT:DEPO])  _
			And StatoCicloCarico &lt;&gt; 6150 _
		Then
		'			And (Not [R1_STATUS:FINE_MISSIONE] Or Not [R1_STATUS:ERR_MISSIONE]) _
		DebugMsg("AnomaliaDeposito() -&gt; [R1_DATI_PEZZO:MAGAZZINO_ASSEGNATO] = " &amp; CStr([R1_DATI_PEZZO:MAGAZZINO_ASSEGNATO]) &amp; "; [R1_STATUS:IN_MISSIONE] = " &amp; CStr([R1_STATUS:IN_MISSIONE]) _
							&amp; "; [R1_STATUS:FINE_MISSIONE] = " &amp; CStr([R1_STATUS:FINE_MISSIONE]) &amp; "; [R1_STATUS:ERR_MISSIONE] = " &amp; CStr([R1_STATUS:ERR_MISSIONE]) _
							&amp; "; [MAG2_ES1_ACT:BUSY] = " &amp;CStr([MAG2_ES1_ACT:BUSY] ) &amp; "; [MAG2_ES1_ACT:DEPO] = " &amp; CStr([MAG2_ES1_ACT:DEPO]) &amp; "; StatoCicloCarico = " &amp; CStr(StatoCicloCarico))
			anomaliaES2 = True
			alm_AnomaliaDeposito_R2 = True
			LogMsg("AnomaliaDeposito() -&gt; Anomalia  MAG2_ES1.")
	End If

	'chiedo all'operatore cosa vuole fare
	If anomaliaES1 Or anomaliaES2 Then
		'se ho anomalia significa che ho finito di depositare un pezzo, ma non ho eseguito le azioni di inserimento nel DB
		strMsg = "R1 - Anomalia deposito pezzo!" &amp; vbCrLf _
					&amp; "Rispondere SI se il pezzo è stato messo su: " &amp; vbCrLf _
					&amp; "Estrattore: 1 " &amp; vbCrLf &amp; "Magazzino: " &amp; [R1_DATI_PEZZO:MAGAZZINO_ASSEGNATO] &amp; vbCrLf _
					&amp; vbCrLf &amp; "Rispondere No negli altri casi."
		retMsg = MsgBox(strMsg, vbYesNo + vbCritical, "Anomalia Deposito R1")
		If retMsg = vbYes Then
			'inserisco il pezzo nel DB
			FineRobot(connectionString)
		End If

		'reset dati estrattore
		If [R1_DATI_PEZZO:MAGAZZINO_ASSEGNATO] = 1 Then
			[MAG1_ES1_ACT:DEPO] = True
			[MAG1_ES1_ACT:BUSY] = False
		End If
		If [R1_DATI_PEZZO:MAGAZZINO_ASSEGNATO] = 2 Then
			[MAG2_ES1_ACT:DEPO] = True
			[MAG2_ES1_ACT:BUSY] = False
		End If

	End If

	'disabilito LogMsg
	enableLogMsg = False

End Function

Function FileEsiste(quadra As Integer) As Boolean
	Dim path As String
	Dim filepath As String
	Dim varname As String

	Dim fullNameDataFile As String

	'Dim quartinaCorrente As String
    'Dim quartinaSuccessiva As String

	Select Case quadra
		Case 1:
			path = loc_Q1_path
			varname = "Q1_PEZZO_DISP"
			If loc_QuadraDataFile &lt;&gt; "" And loc_Q1_path &lt;&gt; "" Then
				fullNameDataFile = path + loc_QuadraDataFile
			Else
				fullNameDataFile = "\\10.200.200.31\l46\COMAR\DATA.TXT"
			End If
			'path ="C:\SupervisioneGualini2_C02515_Varie\NoteScamibioDati\R_ note su scambio dati\test\Q1\"
		Case 2:
			path = loc_Q2_path
			varname = "Q2_PEZZO_DISP"
			If loc_QuadraDataFile &lt;&gt; "" And loc_Q2_path &lt;&gt; "" Then
				fullNameDataFile = path + loc_QuadraDataFile
			Else
				fullNameDataFile = "\\10.200.200.32\l46\COMAR\DATA.TXT"
			End If
			'path ="C:\SupervisioneGualini2_C02515_Varie\NoteScamibioDati\R_ note su scambio dati\test\Q2\"
		Case Else
			Throw New System.Exception("GestioneZonaR1.movbas -&gt; FileEsiste() ECCEZZIONE: parametro quadra non ammesso: " &amp; CStr(quadra) &amp; ".")
	End Select

	'guardo se sono presenti file

	filepath = fullNameDataFile
	filepathMemo = filepath

	If File.Exists(filepath) Then
		FileEsiste = True
	Else
		FileEsiste = False
	End If
End Function



Function FileEsiste_OLD(quadra As Integer) As Boolean
	Dim path As String
	Dim filepath As String
	Dim varname As String

	FileEsiste_OLD = False

	If quadra = 0 Then
		FileEsiste_OLD = False
		Exit Function
	End If
	Select Case quadra
		Case 1:
			path = loc_Q1_path
			varname = "Q1_PEZZO_DISP"
			path = loc_Q1_path
			'path ="C:\SupervisioneGualini2_C02515_Varie\NoteScamibioDati\R_ note su scambio dati\test\Q1\"
		Case 2:
			path = loc_Q2_path
			varname = "Q2_PEZZO_DISP"
			path = loc_Q2_path
			'path ="C:\SupervisioneGualini2_C02515_Varie\NoteScamibioDati\R_ note su scambio dati\test\Q2\"
		Case Else
			Throw New System.Exception("GestioneZonaR1.movbas -&gt; FileEsiste() ECCEZZIONE: parametro quadra non ammesso: " &amp; CStr(quadra) &amp; ".")
	End Select

	'guardo se sono presenti file
	Dim di As New IO.DirectoryInfo(path)
	Dim files As Object
	Dim lowBoundFiles As Integer
	Dim upBoundFiles As Integer

	files = di.GetFiles()

'	If files.GetType.IsArray Then
'		Dim ii As Integer
'		For ii = files.GetLowerBound(0) To files.GetUpperBound(0) Step 1
'			Dim fi As System.IO.FileSystemInfo
'			fi = files(ii)
'			'DebugMsg "GestioneZonaR1.movbas -&gt; LeggiFileDaQuadra(); trovato file:  " &amp; fi.FullName
'		Next
'	End If

	lowBoundFiles = files.GetLowerBound(0)
	'DebugMsg "FileEsiste(quadra As Integer); lowBoundFiles = files.GetLowerBound(0) = " &amp; CStr(lowBoundFiles)
	upBoundFiles = files.GetUpperBound(0)
	'DebugMsg "FileEsiste(quadra As Integer); upBoundFiles = files.GetUpperBound(0) = " &amp;  CStr(upBoundFiles)

	If upBoundFiles &lt; 0 Then
		FileEsiste_OLD = False
	Else
		FileEsiste_OLD = True
	End If
End  Function


Function LeggiFileDaQuadra(quadra As Integer) As String
	Dim path As String
	Dim filepath As String
	Dim varname As String

	Dim fullNameDataFile As String

	'Dim quartinaCorrente As String
    'Dim quartinaSuccessiva As String

	Select Case quadra
		Case 1:
			path = loc_Q1_path
			varname = "Q1_PEZZO_DISP"
			LeggiFileDaQuadra = "Q1_PEZZO_DISP"
			If loc_QuadraDataFile &lt;&gt; "" And loc_Q1_path &lt;&gt; "" Then
				fullNameDataFile = path + loc_QuadraDataFile
			Else
				fullNameDataFile = "\\10.200.200.31\l46\COMAR\DATA.TXT"
			End If
			'path ="C:\SupervisioneGualini2_C02515_Varie\NoteScamibioDati\R_ note su scambio dati\test\Q1\"
		Case 2:
			path = loc_Q2_path
			varname = "Q2_PEZZO_DISP"
			LeggiFileDaQuadra = "Q2_PEZZO_DISP"
			If loc_QuadraDataFile &lt;&gt; "" And loc_Q2_path &lt;&gt; "" Then
				fullNameDataFile = path + loc_QuadraDataFile
			Else
				fullNameDataFile = "\\10.200.200.32\l46\COMAR\DATA.TXT"
			End If
			'path ="C:\SupervisioneGualini2_C02515_Varie\NoteScamibioDati\R_ note su scambio dati\test\Q2\"
		Case Else
			Throw New System.Exception("GestioneZonaR1.movbas -&gt; LeggiFileDaQuadra() ECCEZZIONE: parametro quadra non ammesso: " &amp; CStr(quadra) &amp; ".")
	End Select

	'guardo se sono presenti file

	filepath = fullNameDataFile
	filepathMemo = filepath

	If File.Exists(filepath) Then

		Try
	        ' Open the file using a stream reader.
	        Using sr As New StreamReader(filepath)
	            Dim line As String
	            Dim i As Integer

	            'Debug.Print "### lettura a righe"
	            'Debug.Print

				i=0
	            Do While sr.Peek() &gt;= 0
	            	line = sr.ReadLine()
	                'Debug.Print(line)
	                Select Case i
		                Case 0:
							SetVariableValue(varname &amp; ":NUOVO", CInt(line))
						Case 1:
							SetVariableValue(varname &amp; ":ID_QUARTINA", line)
							'quartinaCorrente = line
						Case 2:
							SetVariableValue(varname &amp; ":POSIZIONE", line)
						Case 3:
							SetVariableValue(varname &amp; ":NOME_PEZZO_UNICO", line)
						Case 4:
							SetVariableValue(varname &amp; ":NOME_PEZZO_ESTERNO", line)
						Case 5:
							SetVariableValue(varname &amp; ":ULTIMO_PEZZO", CBool(line))
						Case 6:
							SetVariableValue(varname &amp; ":CODICE_PROFILO", line)
						Case 7:
							SetVariableValue(varname &amp; ":SERIE_PROFILO", line)
						Case 8:
							SetVariableValue(varname &amp; ":MAX_LUNGHEZZA", CInt(line))
						Case 9:
							SetVariableValue(varname &amp; ":TOTALE_PEZZI_QUARTINA", CInt(line))
						Case 10:
							SetVariableValue(varname &amp; ":NUM_SQUADRETTE1", CInt(line))
						Case 11:
							SetVariableValue(varname &amp; ":COD_SQUADRETTA1", line)
						Case 12:
							SetVariableValue(varname &amp; ":NUM_SQUADRETTE2", CInt(line))
						Case 13:
							SetVariableValue(varname &amp; ":COD_SQUADRETTA2", line)
						Case 14:
							SetVariableValue(varname &amp; ":ALTEZZA_PROFILO", CInt(line))
						Case 15:
							SetVariableValue(varname &amp; ":LARGHEZZA_PROFILO", CInt(line))
						Case 16:
							SetVariableValue(varname &amp; ":MISURA_CAMERA_ESTERNA", CInt(line))
						Case 17:
							SetVariableValue(varname &amp; ":ID_QUARTINA_SUCCESSIVA", line)
							'quartinaSuccessiva = line
						Case 18:
							SetVariableValue(varname &amp; ":NOME_COMMESSA", line)
						Case 19:
							SetVariableValue(varname &amp; ":APPOGGIO_PEZZO", CInt(line))
						Case 20:
							SetVariableValue(varname &amp; ":POSIZIONE_PEZZO_ESTERNO", CInt(line))
						Case 21:
							SetVariableValue(varname &amp; ":ID_PEZZO_ESTERNO", line)
						Case 22:
							SetVariableValue(varname &amp; ":LUNGHEZZA_PEZZO_ESTERNO", CInt(line))
						Case 23:
							SetVariableValue(varname &amp; ":FILE_XML", line)
						Case 24:
							SetVariableValue(varname &amp; ":DATA", line)
						Case 25:
							SetVariableValue(varname &amp; ":ORA", line)

		            End Select
		            i = i + 1
	            Loop
	            'faccio Reset dei valori di cassetto e magazzino assegnati, sarà la procedura di GestionePezzo a rilevare i valori corretto
	            SetVariableValue(varname &amp; ":MAGAZZINO_ASSEGNATO", 0)
				SetVariableValue(varname &amp; ":CASSETTO_ASSEGNATO", 0)
				SetVariableValue(varname &amp; ":MAGAZZINO_ASSEGNATO_QRT_SUCCESSIVA", 0)
				SetVariableValue(varname &amp; ":CASSETTO_ASSEGNATO_QRT_SUCCESSIVA", 0)
	        End Using
	    Catch e As Exception
	        LogMsg("The file could Not be Read:")
	        LogMsg("LeggiFileDaQuadra() -&gt; " &amp;e.Message)
	    End Try
	End If
End Function


Function FileDaLeggere() As Integer
	FileDaLeggere = 0	'metto a zero, significa che non ho pezzi pronti

	Dim leggiQ1 As Boolean
	Dim leggiQ2 As Boolean

	'leggiQ1 = [Q1_Out:PezzoPronto] And [Q1_PEZZO_DISP:NOME_PEZZO_UNICO] =""
	'leggiQ2 = [Q2_Out:PezzoPronto] And [Q2_PEZZO_DISP:NOME_PEZZO_UNICO] =""
	leggiQ1 = [loc_ImpostazioniImpianto:Q1_ABIL] And [Q1_Out:PezzoPronto] And [Q1_PEZZO_DISP:NOME_PEZZO_UNICO] =""
	leggiQ2 = [loc_ImpostazioniImpianto:Q2_ABIL] And [Q2_Out:PezzoPronto] And [Q2_PEZZO_DISP:NOME_PEZZO_UNICO] =""
	If leggiQ1 And leggiQ2 Then
		'ho due pezzi pronti allora prendo quello che ha il timestamp più vecchio
		Dim objRet1 As DBVarObjCmdTarget
		Dim dTimeStamp1 As Date
		Dim nMS1 As Integer
		Dim dt1 As Double

		Dim objRet2 As DBVarObjCmdTarget
		Dim dTimeStamp2 As Date
		Dim nMS2 As Integer
		Dim dt2 As Double

		Dim differenza As Double

		objRet1 = GetVariableObject("Q1_Out:PezzoPronto")
		dTimeStamp1 = objRet1.GetTimeStamp()
		nMS1 = objRet1.GetTimeStampMs()
		dt1 = CLng(dTimeStamp1) * 1000
		dt1 = dt1 + nMS1

		objRet2 = GetVariableObject("Q2_Out:PezzoPronto")
		dTimeStamp2 = objRet2.GetTimeStamp()
		nMS2 = objRet2.GetTimeStampMs()
		dt2 = CLng(dTimeStamp2) * 1000
		dt2 = dt2 + nMS2

		differenza = dt1 - dt2
		'Debug.Print CStr(dt1 -dt2)

		If differenza &gt; 0 Then
			'pezzo da Q1 più recente
			FileDaLeggere = 2	'prendo da Q2 perchè più vecchio
		Else
			FileDaLeggere = 1	'prendo da Q1 perchè più vecchio
		End If

		objRet1 = Nothing
		objRet2 = Nothing
	Else
		'ho solo un pezzo pronto o nessuno
		If leggiQ1 Then
			FileDaLeggere = 1
		End If
		If leggiQ2 Then
			FileDaLeggere = 2
		End If
		'se nessun pezzo pronto leggiDaQuadra = 0
	End If

End Function

Function PezziNellaQuartina(connectionString As String, qrt As String, ByRef count As Integer ) As Integer

    Const ERR_GENERICO As Integer = -1 					'ERRORE GENERICO
    Const ERR_GENERIC_EXCEPION As Integer = -101	 	'ERRORE eccezzione generica
    Const ERR_ODBC_EXCEPTION As Integer = -102	 		'ERRORE ecezzione ODBC
	Const OK As Integer = 0

	PezziNellaQuartina = OK 	'inizializzzo

    Dim commandText As String

	'cerco nel db quanti pezzi ci sono nel cassetto della quartina
	'SELECT count(*) FROM gualini.pezzo WHERE quartina_ID_QUARTINA = "010071050005.BATH058";
	Try
        Using MyConnection As New System.Data.Odbc.OdbcConnection(connectionString)
            MyConnection.Open()
            commandText = "SELECT COUNT(*) AS PEZZI " &amp; _
                      	" FROM  `gualini`.`pezzo` " &amp; _
            			" WHERE quartina_ID_QUARTINA = "   &amp; """" &amp; CStr(qrt)  &amp; """" &amp; _
            			";"

            Using MyCommand As New OdbcCommand()

				MyCommand.Connection = MyConnection
	            MyCommand.CommandText = commandText

				Using MyDataReader As OdbcDataReader
					MyDataReader = MyCommand.ExecuteReader

					'DebugMsg "PezziNellaQuartina(); MyDataReader.HasRows = " 			&amp;  CStr(MyDataReader.HasRows)
					'DebugMsg "PezziNellaQuartina(); MyDataReader.RecordsAffected = " 	&amp;  CStr(MyDataReader.RecordsAffected)

					'se la quartina esiste nel DB leggo i dati di magazzino e cassetto
					If MyDataReader.HasRows Then
						MyDataReader.Read

						count = MyDataReader("PEZZI")
					Else
						count = 0
					End If
				End Using	'MyDataReader.Close
			End Using	'MyCommand.Dispose
        End Using	'MyConnection.Close

        DebugMsg "GestioneZonaR1.movbas -&gt; PezziNellaQuartina(); commandText = " &amp; commandText &amp; "; count = " &amp; CStr(count) &amp; "; StatoCicloCarico = " &amp; CStr(StatoCicloCarico)  &amp; "."

	  'Catch program exception
	Catch MyException As Exception
		DebugMsg(MyException.ToString)
		MsgBox("GestioneZonaR1.movbas -&gt; PezziNellaQuartina() - ERRORE: Exception." &amp; vbCrLf &amp; _
					 MyException.ToString &amp; ".")
		LogMsg(" PezziNellaQuartina() - ERRORE: Exception."  &amp; _
					 MyException.ToString &amp; ".")

		'alzare alarme
		alm_ZonaR1_ODBC_txt = "ERR_GENERIC_EXCEPION" &amp; " -- GestioneZonaR1.movbas -&gt; PezziNellaQuartina() - ERRORE: Exception."  &amp; _
					 MyException.ToString &amp; "." 'ERR_GENERIC_EXCEPION 'ERRORE eccezzione generic
		alm_ZonaR1_ODBC = True
		Exit Function

	  'Catch ODBC Exception
	Catch MyOdbcException As OdbcException
		DebugMsg(MyOdbcException.ToString)
		MsgBox("GestioneZonaR1.movbas -&gt; PezziNellaQuartina() - ERRORE ODBC: OdbcException." &amp; vbCrLf &amp; _
					MyOdbcException.ToString  &amp; ".")
		LogMsg("PezziNellaQuartina() - ERRORE ODBC: OdbcException."  &amp; _
					MyOdbcException.ToString  &amp; ".")
		'TODO
		'alzare alarme
		alm_ZonaR1_ODBC_txt = "ERR_ODBC_EXCEPTION" &amp; " -- GestioneZonaR1.movbas -&gt; PezziNellaQuartina() - ERRORE: Exception."  &amp; _
					 MyException.ToString &amp; "." 'ERR_ODBC_EXCEPTION 'ERRORE ecezzione ODBC
		alm_ZonaR1_ODBC = True
		Exit Function

    End Try

End Function

Function QuartinaEsiste(qrt As String, connectionString As String) As Boolean

	Dim vResult As Object
    Dim commandText As String

    Const ERR_GENERICO As Integer = -1 					'ERRORE GENERICO
    Const ERR_GENERIC_EXCEPION As Integer = -101	 	'ERRORE eccezzione generica
    Const ERR_ODBC_EXCEPTION As Integer = -102	 		'ERRORE ecezzione ODBC

	QuartinaEsiste = False

	'cerco nel db a quale cassetto è assegnata la quartina
	Try
        Using MyConnection As New System.Data.Odbc.OdbcConnection(connectionString)
            MyConnection.Open()
            commandText = "SELECT " &amp; _
                            "  `quartina`.`ID_QUARTINA` " &amp; _
                            ", `quartina`.`TOTALE_PEZZI_QUARTINA` " &amp; _
                            ", `quartina`.`NOME_COMMESSA` " &amp; _
                            ", `quartina`.`NUM_SQUADRETTE1` " &amp; _
                            ", `quartina`.`COD_SQUADRETTA1` " &amp; _
                            ", `quartina`.`NUM_SQUADRETTE2` " &amp; _
                            ", `quartina`.`COD_SQUADRETTA2` " &amp; _
			        		", `quartina`.`cassetto_ID_CASSETTO` " &amp; _
                            ", `quartina`.`cassetto_magazzino_ID_MAGAZZINO` " &amp; _
                      	"FROM  `gualini`.`quartina` " &amp; _
            			"WHERE `quartina`.`ID_QUARTINA` = '" &amp; qrt &amp;"';"
            'DebugMsg "GestioneZonaR1.movbas -&gt; QuartinaEsiste; commandText = " &amp; commandText

            Using MyCommand As New OdbcCommand()

				MyCommand.Connection = MyConnection
	            MyCommand.CommandText = commandText

				Using MyDataReader As OdbcDataReader
					MyDataReader = MyCommand.ExecuteReader

					'Debug.Print CStr(MyDataReader.HasRows)
					'Debug.Print CStr(MyDataReader.RecordsAffected)

					'se la quartina esiste nel DB leggo i dati di magazzino e cassetto
					If MyDataReader.HasRows Then
						MyDataReader.Read
						QuartinaEsiste = True
					Else
						'la quartina non esiste
						QuartinaEsiste = False
					End If
				End Using	'MyDataReader.Close
			End Using	'MyCommand.Dispose
        End Using	'MyConnection.Close

        'per non riempire il log quando ho magazzini pieni filtro la scrittura
        If [loc_ImpostazioniImpianto:M1_CASS_DISPONIBILI] &gt; 0 And [loc_ImpostazioniImpianto:M2_CASS_DISPONIBILI] &gt; 0 Then
			DebugMsg "GestioneZonaR1.movbas -&gt; QuartinaEsiste; qrt = " &amp; CStr(qrt) &amp; ", Esiste = " &amp; CStr(QuartinaEsiste) &amp; "; commandText = " &amp; commandText
        End If


	  'Catch program exception
	Catch MyException As Exception
		DebugMsg(MyException.ToString)
		MsgBox("GestioneZonaR1.movbas -&gt; QuartinaEsiste() - ERRORE: Exception." &amp; vbCrLf &amp; _
					 MyException.ToString &amp; ".")
		LogMsg(" QuartinaEsiste() - ERRORE: Exception."  &amp; _
					 MyException.ToString &amp; ".")

		'alzare alarme
		alm_ZonaR1_ODBC_txt = "ERR_GENERIC_EXCEPION" &amp; " -- GestioneZonaR1.movbas -&gt; QuartinaEsiste() - ERRORE: Exception."  &amp; _
					 MyException.ToString &amp; "." 'ERR_GENERIC_EXCEPION 'ERRORE eccezzione generic
		alm_ZonaR1_ODBC = True
		Exit Function

	  'Catch ODBC Exception
	Catch MyOdbcException As OdbcException
		DebugMsg(MyOdbcException.ToString)
		MsgBox("GestioneZonaR1.movbas -&gt; QuartinaEsiste() - ERRORE ODBC: OdbcException." &amp; vbCrLf &amp; _
					MyOdbcException.ToString  &amp; ".")
		LogMsg("QuartinaEsiste() - ERRORE ODBC: OdbcException."  &amp; _
					MyOdbcException.ToString  &amp; ".")
		'TODO
		'alzare alarme
		alm_ZonaR1_ODBC_txt = "ERR_ODBC_EXCEPTION" &amp; " -- GestioneZonaR1.movbas -&gt; QuartinaEsiste() - ERRORE: Exception."  &amp; _
					 MyException.ToString &amp; "." 'ERR_ODBC_EXCEPTION 'ERRORE ecezzione ODBC
		alm_ZonaR1_ODBC = True
		Exit Function

    End Try
End Function


Function VerificaSeQuartinaEsisteInMagazzino(quadra As Integer, qrt As String, connectionString As String) As PosQuartina
	Dim pos As PosQuartina
	pos.mag  = 0		'0 = NON ESISTE, 1 = MAG_1, 2 = MAG_2
	pos.cass = 0

	VerificaSeQuartinaEsisteInMagazzino = pos 	'inizializzzo a NON ESISTE


	'Dim varname As String
	Dim vResult As Object
    Dim commandText As String
    'Dim quartina As String
    'Dim magazzino As Integer
    'Dim cassetto As Integer

    Const ERR_GENERICO As Integer = -1 					'ERRORE GENERICO
    Const ERR_GENERIC_EXCEPION As Integer = -101	 	'ERRORE eccezzione generica
    Const ERR_ODBC_EXCEPTION As Integer = -102	 		'ERRORE ecezzione ODBC


	'cerco nel db a quale cassetto è assegnata la quartina
	Try
        Using MyConnection As New System.Data.Odbc.OdbcConnection(connectionString)
            MyConnection.Open()
            commandText = "SELECT " &amp; _
                            "  `quartina`.`ID_QUARTINA` " &amp; _
                            ", `quartina`.`TOTALE_PEZZI_QUARTINA` " &amp; _
                            ", `quartina`.`NOME_COMMESSA` " &amp; _
                            ", `quartina`.`NUM_SQUADRETTE1` " &amp; _
                            ", `quartina`.`COD_SQUADRETTA1` " &amp; _
                            ", `quartina`.`NUM_SQUADRETTE2` " &amp; _
                            ", `quartina`.`COD_SQUADRETTA2` " &amp; _
			        		", `quartina`.`cassetto_ID_CASSETTO` " &amp; _
                            ", `quartina`.`cassetto_magazzino_ID_MAGAZZINO` " &amp; _
                      	"FROM  `gualini`.`quartina` " &amp; _
            			"WHERE `quartina`.`ID_QUARTINA` = '" &amp; qrt &amp;"';"
            DebugMsg "GestioneZonaR1.movbas -&gt; VerificaSeQuartinaEsisteInMagazzino; commandText = " &amp; commandText

            Using MyCommand As New OdbcCommand()

				MyCommand.Connection = MyConnection
	            MyCommand.CommandText = commandText

				Using MyDataReader As OdbcDataReader
					MyDataReader = MyCommand.ExecuteReader

					'Debug.Print CStr(MyDataReader.HasRows)
					'Debug.Print CStr(MyDataReader.RecordsAffected)

					'se la quartina esiste nel DB leggo i dati di magazzino e cassetto
					If MyDataReader.HasRows Then
						MyDataReader.Read
						pos.mag 	= MyDataReader("cassetto_magazzino_ID_MAGAZZINO")
						pos.cass	= MyDataReader("cassetto_ID_CASSETTO")
					Else
						'la quartina non esiste allora forzo i valori di posizione
						pos.mag = 0
						pos.cass = 0

					End If
				End Using	'MyDataReader.Close
			End Using	'MyCommand.Dispose
        End Using	'MyConnection.Close

        'memorizzo il cassetto assegnato in base alla quadra di provenienza
        If quadra = 1 Then
			[Q1_PEZZO_DISP:CASSETTO_ASSEGNATO] 		= pos.cass 'memorizzo il cassetto assegnato al pezzo
			[Q1_PEZZO_DISP:MAGAZZINO_ASSEGNATO] 	= pos.mag 'memorizzo il magazzino assegnato al pezzo
		ElseIf quadra = 2 Then
			[Q2_PEZZO_DISP:CASSETTO_ASSEGNATO] 		= pos.cass 'memorizzo il cassetto assegnato al pezzo
			[Q2_PEZZO_DISP:MAGAZZINO_ASSEGNATO] 	= pos.mag 'memorizzo il magazzino assegnato al pezzo
		End If

		DebugMsg "GestioneZonaR1.movbas -&gt; VerificaSeQuartinaEsisteInMagazzino; posizione.mag = " &amp; CStr(pos.mag)
		DebugMsg "GestioneZonaR1.movbas -&gt; VerificaSeQuartinaEsisteInMagazzino; posizione.cass = " &amp; CStr(pos.cass)
        VerificaSeQuartinaEsisteInMagazzino = pos 'torno valore trovato

	  'Catch program exception
	Catch MyException As Exception
		DebugMsg(MyException.ToString)
		MsgBox("GestioneZonaR1.movbas -&gt; VerificaSeQuartinaEsisteInMagazzino() - ERRORE: Exception." &amp; vbCrLf &amp; _
					 MyException.ToString &amp; ".")
		LogMsg(" VerificaSeQuartinaEsisteInMagazzino() - ERRORE: Exception."  &amp; _
					 MyException.ToString &amp; ".")

		'alzare alarme
		alm_ZonaR1_ODBC_txt = "ERR_GENERIC_EXCEPION" &amp; " -- GestioneZonaR1.movbas -&gt; VerificaSeQuartinaEsisteInMagazzino() - ERRORE: Exception."  &amp; _
					 MyException.ToString &amp; "." 'ERR_GENERIC_EXCEPION 'ERRORE eccezzione generic
		alm_ZonaR1_ODBC = True
		Exit Function

	  'Catch ODBC Exception
	Catch MyOdbcException As OdbcException
		DebugMsg(MyOdbcException.ToString)
		MsgBox("GestioneZonaR1.movbas -&gt; VerificaSeQuartinaEsisteInMagazzino() - ERRORE ODBC: OdbcException." &amp; vbCrLf &amp; _
					MyOdbcException.ToString  &amp; ".")
		LogMsg("VerificaSeQuartinaEsisteInMagazzino() - ERRORE ODBC: OdbcException."  &amp; _
					MyOdbcException.ToString  &amp; ".")
		'TODO
		'alzare alarme
		alm_ZonaR1_ODBC_txt = "ERR_ODBC_EXCEPTION" &amp; " -- GestioneZonaR1.movbas -&gt; VerificaSeQuartinaEsisteInMagazzino() - ERRORE: Exception."  &amp; _
					 MyException.ToString &amp; "." 'ERR_ODBC_EXCEPTION 'ERRORE ecezzione ODBC
		alm_ZonaR1_ODBC = True
		Exit Function

    End Try

End Function

Function CassettiDisponibili(mag As Integer, connectionString As String) As Integer
	CassettiDisponibili = 0 	'inizializzzo a NON DIDPONIBILE

    Dim commandText As String
    Dim whereString As String
    Dim cassetti As Integer

    Select Case mag
    Case 0
    	whereString = "(ID_MAGAZZINO = 1 Or ID_MAGAZZINO = 2)"
	Case 1
		whereString = "ID_MAGAZZINO = 1"
	Case 2
		whereString = "ID_MAGAZZINO = 2"
	Case Else
		Throw New System.Exception("GestioneZonaR1.movbas -&gt; CassettiDisponibili() ECCEZZIONE: valore parametro mag non ammesso: " &amp; CStr(mag) &amp; ".")
    End Select

    Const ERR_GENERICO As Integer = -1 					'ERRORE GENERICO
    Const ERR_GENERIC_EXCEPION As Integer = -101	 	'ERRORE eccezzione generica
    Const ERR_ODBC_EXCEPTION As Integer = -102	 		'ERRORE ecezzione ODBC


	'cerco nel db a quale cassetto è assegnata la quartina
	Try
        Using MyConnection As New System.Data.Odbc.OdbcConnection(connectionString)
            MyConnection.Open()
            commandText = "SELECT COUNT(*) AS DISPONIBILI " &amp; _
                      	" FROM  `gualini`.`cassetti_disponibili` " &amp; _
            			" WHERE " &amp; whereString &amp; _
            			" AND POSIZIONE = 0 " &amp; ";"

            'Select COUNT(*) FROM gualini.cassetti_disponibili WHERE ID_MAGAZZINO = 1 Or ID_MAGAZZINO = 2;


            Using MyCommand As New OdbcCommand()

				MyCommand.Connection = MyConnection
	            MyCommand.CommandText = commandText

				Using MyDataReader As OdbcDataReader
					MyDataReader = MyCommand.ExecuteReader

					'DebugMsg "CassettiDisponibili(); MyDataReader.HasRows = " 			&amp;  CStr(MyDataReader.HasRows)
					'DebugMsg "CassettiDisponibili(); MyDataReader.RecordsAffected = " 	&amp;  CStr(MyDataReader.RecordsAffected)

					'se la quartina esiste nel DB leggo i dati di magazzino e cassetto
					If MyDataReader.HasRows Then
						MyDataReader.Read

						cassetti = MyDataReader("DISPONIBILI")
					Else
						cassetti = 0
					End If
				End Using	'MyDataReader.Close
			End Using	'MyCommand.Dispose
        End Using	'MyConnection.Close

        'DebugMsg "GestioneZonaR1.movbas -&gt; CassettiDisponibili(); commandText = " &amp; commandText &amp; "; cassetti = " &amp; CStr(cassetti) &amp; "; StatoCicloCarico = " &amp; CStr(StatoCicloCarico)  &amp; "."
        CassettiDisponibili = cassetti 'torno valore trovato

	  'Catch program exception
	Catch MyException As Exception
		DebugMsg(MyException.ToString)
		MsgBox("GestioneZonaR1.movbas -&gt; CassettiDisponibili() - ERRORE: Exception." &amp; vbCrLf &amp; _
					 MyException.ToString &amp; ".")
		LogMsg(" CassettiDisponibili() - ERRORE: Exception."  &amp; _
					 MyException.ToString &amp; ".")

		'alzare alarme
		alm_ZonaR1_ODBC_txt = "ERR_GENERIC_EXCEPION" &amp; " -- GestioneZonaR1.movbas -&gt; CassettiDisponibili() - ERRORE: Exception."  &amp; _
					 MyException.ToString &amp; "." 'ERR_GENERIC_EXCEPION 'ERRORE eccezzione generic
		alm_ZonaR1_ODBC = True
		Exit Function

	  'Catch ODBC Exception
	Catch MyOdbcException As OdbcException
		DebugMsg(MyOdbcException.ToString)
		MsgBox("GestioneZonaR1.movbas -&gt; CassettiDisponibili() - ERRORE ODBC: OdbcException." &amp; vbCrLf &amp; _
					MyOdbcException.ToString  &amp; ".")
		LogMsg("CassettiDisponibili() - ERRORE ODBC: OdbcException."  &amp; _
					MyOdbcException.ToString  &amp; ".")
		'TODO
		'alzare alarme
		alm_ZonaR1_ODBC_txt = "ERR_ODBC_EXCEPTION" &amp; " -- GestioneZonaR1.movbas -&gt; CassettiDisponibili() - ERRORE: Exception."  &amp; _
					 MyException.ToString &amp; "." 'ERR_ODBC_EXCEPTION 'ERRORE ecezzione ODBC
		alm_ZonaR1_ODBC = True
		Exit Function

    End Try

End Function

Function AggiornaCassettiPieni( connectionString As String, mag As Integer) As Integer
	AggiornaCassettiPieni = 0 	'inizializzzo

    Dim commandText As String
    Dim varname As String
    'Dim cassetti As Integer

    Select Case mag
		Case 1
			varname = "loc_ImpostazioniImpianto:M1_CASS_PIENI"
		Case 2
			varname = "loc_ImpostazioniImpianto:M2_CASS_PIENI"
		Case Else
			Throw New System.Exception("GestioneZonaR1.movbas -&gt; AggiornaCassettiPieni() ECCEZZIONE: valore parametro mag non ammesso: " &amp; CStr(mag) &amp; ".")
    End Select

    Const ERR_GENERICO As Integer = -1 					'ERRORE GENERICO
    Const ERR_GENERIC_EXCEPION As Integer = -101	 	'ERRORE eccezzione generica
    Const ERR_ODBC_EXCEPTION As Integer = -102	 		'ERRORE ecezzione ODBC


	'cerco nel db a quale cassetto è assegnata la quartina
	Try
        Using MyConnection As New System.Data.Odbc.OdbcConnection(connectionString)
            MyConnection.Open()
            commandText = "SELECT COUNT(*) AS PIENI " &amp; _
                      	" FROM  `gualini`.`cassetti_pieni` " &amp; _
            			" WHERE ID_MAGAZZINO = " &amp; CStr(mag) &amp; _
            			" AND POSIZIONE = 0;"

            DebugMsg "GestioneZonaR1.movbas -&gt; AggiornaCassettiPieni(); commandText = " &amp; commandText

            Using MyCommand As New OdbcCommand()

				MyCommand.Connection = MyConnection
	            MyCommand.CommandText = commandText

				Using MyDataReader As OdbcDataReader
					MyDataReader = MyCommand.ExecuteReader

					If MyDataReader.HasRows Then
						MyDataReader.Read
						SetVariableValue(varname, MyDataReader("PIENI"))
					Else
						SetVariableValue(varname, 0)
					End If
				End Using	'MyDataReader.Close
			End Using	'MyCommand.Dispose
        End Using	'MyConnection.Close

	  'Catch program exception
	Catch MyException As Exception
		DebugMsg(MyException.ToString)
		MsgBox("GestioneZonaR1.movbas -&gt; AggiornaCassettiPieni() - ERRORE: Exception." &amp; vbCrLf &amp; _
					 MyException.ToString &amp; ".")
		LogMsg(" AggiornaCassettiPieni() - ERRORE: Exception."  &amp; _
					 MyException.ToString &amp; ".")

		'alzare alarme
		alm_ZonaR1_ODBC_txt = "ERR_GENERIC_EXCEPION" &amp; " -- GestioneZonaR1.movbas -&gt; AggiornaCassettiPieni() - ERRORE: Exception."  &amp; _
					 MyException.ToString &amp; "." 'ERR_GENERIC_EXCEPION 'ERRORE eccezzione generic
		alm_ZonaR1_ODBC = True
		AggiornaCassettiPieni = 100 'torno errore
		Exit Function

	  'Catch ODBC Exception
	Catch MyOdbcException As OdbcException
		DebugMsg(MyOdbcException.ToString)
		MsgBox("GestioneZonaR1.movbas -&gt; AggiornaCassettiPieni() - ERRORE ODBC: OdbcException." &amp; vbCrLf &amp; _
					MyOdbcException.ToString  &amp; ".")
		LogMsg("AggiornaCassettiPieni() - ERRORE ODBC: OdbcException."  &amp; _
					MyOdbcException.ToString  &amp; ".")
		'TODO
		'alzare alarme
		alm_ZonaR1_ODBC_txt = "ERR_ODBC_EXCEPTION" &amp; " -- GestioneZonaR1.movbas -&gt; AggiornaCassettiPieni() - ERRORE: Exception."  &amp; _
					 MyException.ToString &amp; "." 'ERR_ODBC_EXCEPTION 'ERRORE ecezzione ODBC
		alm_ZonaR1_ODBC = True
		AggiornaCassettiPieni = 101 'torno errore
		Exit Function
    End Try
End Function

Function AggiornaCassettiDisponibili( connectionString As String, mag As Integer) As Integer
	AggiornaCassettiDisponibili = 0 	'inizializzzo

    Dim commandText As String
    Dim varname As String
    'Dim cassetti As Integer

    Select Case mag
		Case 1
			varname = "loc_ImpostazioniImpianto:M1_CASS_DISPONIBILI"
		Case 2
			varname = "loc_ImpostazioniImpianto:M2_CASS_DISPONIBILI"
		Case Else
			Throw New System.Exception("GestioneZonaR1.movbas -&gt; AggiornaCassettiDisponibili() ECCEZZIONE: valore parametro mag non ammesso: " &amp; CStr(mag) &amp; ".")
    End Select

    Const ERR_GENERICO As Integer = -1 					'ERRORE GENERICO
    Const ERR_GENERIC_EXCEPION As Integer = -101	 	'ERRORE eccezzione generica
    Const ERR_ODBC_EXCEPTION As Integer = -102	 		'ERRORE ecezzione ODBC


	'cerco nel db a quale cassetto è assegnata la quartina
	Try
        Using MyConnection As New System.Data.Odbc.OdbcConnection(connectionString)
            MyConnection.Open()
            commandText = "SELECT COUNT(*) AS DISP " &amp; _
                      	" FROM  `gualini`.`cassetti_disponibili` " &amp; _
            			" WHERE ID_MAGAZZINO = " &amp; CStr(mag) &amp; _
            			" AND POSIZIONE = 0 " &amp; ";"

            DebugMsg "GestioneZonaR1.movbas -&gt; AggiornaCassettiDisponibili(); commandText = " &amp; commandText

            Using MyCommand As New OdbcCommand()

				MyCommand.Connection = MyConnection
	            MyCommand.CommandText = commandText

				Using MyDataReader As OdbcDataReader
					MyDataReader = MyCommand.ExecuteReader

					If MyDataReader.HasRows Then
						MyDataReader.Read
						SetVariableValue(varname, MyDataReader("DISP"))
					Else
						SetVariableValue(varname, 0)
					End If
				End Using	'MyDataReader.Close
			End Using	'MyCommand.Dispose
        End Using	'MyConnection.Close

	  'Catch program exception
	Catch MyException As Exception
		DebugMsg(MyException.ToString)
		MsgBox("GestioneZonaR1.movbas -&gt; AggiornaCassettiDisponibili() - ERRORE: Exception." &amp; vbCrLf &amp; _
					 MyException.ToString &amp; ".")
		LogMsg(" AggiornaCassettiDisponibili() - ERRORE: Exception."  &amp; _
					 MyException.ToString &amp; ".")

		'alzare alarme
		alm_ZonaR1_ODBC_txt = "ERR_GENERIC_EXCEPION" &amp; " -- GestioneZonaR1.movbas -&gt; AggiornaCassettiDisponibili() - ERRORE: Exception."  &amp; _
					 MyException.ToString &amp; "." 'ERR_GENERIC_EXCEPION 'ERRORE eccezzione generic
		alm_ZonaR1_ODBC = True
		AggiornaCassettiDisponibili = 100 'torno errore
		Exit Function

	  'Catch ODBC Exception
	Catch MyOdbcException As OdbcException
		DebugMsg(MyOdbcException.ToString)
		MsgBox("GestioneZonaR1.movbas -&gt; AggiornaCassettiDisponibili() - ERRORE ODBC: OdbcException." &amp; vbCrLf &amp; _
					MyOdbcException.ToString  &amp; ".")
		LogMsg("AggiornaCassettiDisponibili() - ERRORE ODBC: OdbcException."  &amp; _
					MyOdbcException.ToString  &amp; ".")
		'TODO
		'alzare alarme
		alm_ZonaR1_ODBC_txt = "ERR_ODBC_EXCEPTION" &amp; " -- GestioneZonaR1.movbas -&gt; AggiornaCassettiDisponibili() - ERRORE: Exception."  &amp; _
					 MyException.ToString &amp; "." 'ERR_ODBC_EXCEPTION 'ERRORE ecezzione ODBC
		alm_ZonaR1_ODBC = True
		AggiornaCassettiDisponibili = 101 'torno errore
		Exit Function
    End Try
End Function

Function AggiornaCassettiInRiempimento( connectionString As String, mag As Integer) As Integer
	AggiornaCassettiInRiempimento = 0 	'inizializzzo

    Dim commandText As String
    Dim varname As String
    'Dim cassetti As Integer

    Select Case mag
		Case 1
			varname = "loc_ImpostazioniImpianto:M1_CASS_IN_RIEMPIMENTO"
		Case 2
			varname = "loc_ImpostazioniImpianto:M2_CASS_IN_RIEMPIMENTO"
		Case Else
			Throw New System.Exception("GestioneZonaR1.movbas -&gt; AggiornaCassettiInRiempimento() ECCEZZIONE: valore parametro mag non ammesso: " &amp; CStr(mag) &amp; ".")
    End Select

    Const ERR_GENERICO As Integer = -1 					'ERRORE GENERICO
    Const ERR_GENERIC_EXCEPION As Integer = -101	 	'ERRORE eccezzione generica
    Const ERR_ODBC_EXCEPTION As Integer = -102	 		'ERRORE ecezzione ODBC


	'cerco nel db a quale cassetto è assegnata la quartina
	Try
        Using MyConnection As New System.Data.Odbc.OdbcConnection(connectionString)
            MyConnection.Open()
            commandText = "SELECT COUNT(*) AS INRIEMP " &amp; _
                      	" FROM  `gualini`.`cassetti_in_riempimento` " &amp; _
            			" WHERE ID_MAGAZZINO = " &amp; CStr(mag) &amp; ";"

            DebugMsg "GestioneZonaR1.movbas -&gt; AggiornaCassettiInRiempimento(); commandText = " &amp; commandText

            Using MyCommand As New OdbcCommand()

				MyCommand.Connection = MyConnection
	            MyCommand.CommandText = commandText

				Using MyDataReader As OdbcDataReader
					MyDataReader = MyCommand.ExecuteReader

					If MyDataReader.HasRows Then
						MyDataReader.Read
						SetVariableValue(varname, MyDataReader("INRIEMP"))
					Else
						SetVariableValue(varname, 0)
					End If
				End Using	'MyDataReader.Close
			End Using	'MyCommand.Dispose
        End Using	'MyConnection.Close

	  'Catch program exception
	Catch MyException As Exception
		DebugMsg(MyException.ToString)
		MsgBox("GestioneZonaR1.movbas -&gt; AggiornaCassettiInRiempimento() - ERRORE: Exception." &amp; vbCrLf &amp; _
					 MyException.ToString &amp; ".")
		LogMsg(" AggiornaCassettiInRiempimento() - ERRORE: Exception."  &amp; _
					 MyException.ToString &amp; ".")

		'alzare alarme
		alm_ZonaR1_ODBC_txt = "ERR_GENERIC_EXCEPION" &amp; " -- GestioneZonaR1.movbas -&gt; AggiornaCassettiInRiempimento() - ERRORE: Exception."  &amp; _
					 MyException.ToString &amp; "." 'ERR_GENERIC_EXCEPION 'ERRORE eccezzione generic
		alm_ZonaR1_ODBC = True
		AggiornaCassettiInRiempimento = 100 'torno errore
		Exit Function

	  'Catch ODBC Exception
	Catch MyOdbcException As OdbcException
		DebugMsg(MyOdbcException.ToString)
		MsgBox("GestioneZonaR1.movbas -&gt; AggiornaCassettiInRiempimento() - ERRORE ODBC: OdbcException." &amp; vbCrLf &amp; _
					MyOdbcException.ToString  &amp; ".")
		LogMsg("AggiornaCassettiInRiempimento() - ERRORE ODBC: OdbcException."  &amp; _
					MyOdbcException.ToString  &amp; ".")
		'TODO
		'alzare alarme
		alm_ZonaR1_ODBC_txt = "ERR_ODBC_EXCEPTION" &amp; " -- GestioneZonaR1.movbas -&gt; AggiornaCassettiInRiempimento() - ERRORE: Exception."  &amp; _
					 MyException.ToString &amp; "." 'ERR_ODBC_EXCEPTION 'ERRORE ecezzione ODBC
		alm_ZonaR1_ODBC = True
		AggiornaCassettiInRiempimento = 101 'torno errore
		Exit Function
    End Try
End Function

Function VerificaEsistePezzo(connectionString As String, nomePzUnico As String, ByRef esiste As Boolean) As Boolean
	VerificaEsistePezzo = 0 	'inizializzzo

    Dim commandText As String
    Dim countPz As Integer

    Const ERR_GENERICO As Integer = -1 					'ERRORE GENERICO
    Const ERR_GENERIC_EXCEPION As Integer = -101	 	'ERRORE eccezzione generica
    Const ERR_ODBC_EXCEPTION As Integer = -102	 		'ERRORE ecezzione ODBC


	'cerco nel db a quale cassetto è assegnata la quartina
	Try
        Using MyConnection As New System.Data.Odbc.OdbcConnection(connectionString)
            MyConnection.Open()
            commandText = "SELECT COUNT(*) AS COUNT_PZ " &amp; _
                      	" FROM  `gualini`.`pezzo` " &amp; _
            			" WHERE ID_PEZZO = """ &amp; nomePzUnico &amp; """;"

            DebugMsg "GestioneZonaR1.movbas -&gt; VerificaEsistePezzo(); commandText = " &amp; commandText

            Using MyCommand As New OdbcCommand()

				MyCommand.Connection = MyConnection
	            MyCommand.CommandText = commandText

				Using MyDataReader As OdbcDataReader
					MyDataReader = MyCommand.ExecuteReader

					If MyDataReader.HasRows Then
						MyDataReader.Read
						countPz =  MyDataReader("COUNT_PZ")
					Else
						countPz = 0
					End If
				End Using	'MyDataReader.Close
			End Using	'MyCommand.Dispose
        End Using	'MyConnection.Close

       	esiste = IIf(countPz &gt; 0, True, False)

	  'Catch program exception
	Catch MyException As Exception
		DebugMsg(MyException.ToString)
		MsgBox("GestioneZonaR1.movbas -&gt; VerificaEsistePezzo() - ERRORE: Exception." &amp; vbCrLf &amp; _
					 MyException.ToString &amp; ".")
		LogMsg(" VerificaEsistePezzo() - ERRORE: Exception."  &amp; _
					 MyException.ToString &amp; ".")

		'alzare alarme
		alm_ZonaR1_ODBC_txt = "ERR_GENERIC_EXCEPION" &amp; " -- GestioneZonaR1.movbas -&gt; VerificaEsistePezzo() - ERRORE: Exception."  &amp; _
					 MyException.ToString &amp; "." 'ERR_GENERIC_EXCEPION 'ERRORE eccezzione generic
		alm_ZonaR1_ODBC = True
		VerificaEsistePezzo = 100 'torno errore
		Exit Function

	  'Catch ODBC Exception
	Catch MyOdbcException As OdbcException
		DebugMsg(MyOdbcException.ToString)
		MsgBox("GestioneZonaR1.movbas -&gt; VerificaEsistePezzo() - ERRORE ODBC: OdbcException." &amp; vbCrLf &amp; _
					MyOdbcException.ToString  &amp; ".")
		LogMsg("VerificaEsistePezzo() - ERRORE ODBC: OdbcException."  &amp; _
					MyOdbcException.ToString  &amp; ".")
		'alzare alarme
		alm_ZonaR1_ODBC_txt = "ERR_ODBC_EXCEPTION" &amp; " -- GestioneZonaR1.movbas -&gt; VerificaEsistePezzo() - ERRORE: Exception."  &amp; _
					 MyException.ToString &amp; "." 'ERR_ODBC_EXCEPTION 'ERRORE ecezzione ODBC
		alm_ZonaR1_ODBC = True
		VerificaEsistePezzo = 101 'torno errore
		Exit Function
    End Try

End Function

Function VerificaCogruenzaDati(connectionString As String, serieprofilo As String, codprofilo As String, codsq1 As String, codsq2 As String, numsq1 As Integer, numsq2 As Integer, ByRef configOk As Boolean) As Integer
	VerificaCogruenzaDati = 0 	'inizializzo

    Dim commandText As String
    Dim countCodRbt As Integer
	Dim countCodSq1 As Integer
	Dim countCodSq2 As Integer

	Dim okCodRbt As Boolean
	Dim okCodSq1 As Boolean
	Dim okCodSq2 As Boolean

    Const ERR_GENERICO As Integer = -1 					'ERRORE GENERICO
    Const ERR_GENERIC_EXCEPION As Integer = -101	 	'ERRORE eccezzione generica
    Const ERR_ODBC_EXCEPTION As Integer = -102	 		'ERRORE ecezzione ODBC


	'cerco nel db a quale cassetto è assegnata la quartina
	Try

        Dim MyConnection As New System.Data.Odbc.OdbcConnection(connectionString)
            MyConnection.Open()

			'SELECT count(*) FROM gualini.r2_codiciprofili where SerieProfilo ="AWS65" AND CodiceProfilo = "363890"
            commandText = "SELECT COUNT(*) AS COUNT_PROFILO " &amp; _
                      	" FROM  `gualini`.`r2_codiciprofili` " &amp; _
            			" WHERE SerieProfilo = """ &amp; serieprofilo &amp; """" &amp; _
						" AND CodiceProfilo = """ &amp; codprofilo &amp; """" &amp; _
						";"

            DebugMsg "GestioneZonaR1.movbas -&gt; VerificaCogruenzaDati(); Verifica CodRbt commandText = " &amp; commandText

            'Using MyCommand As New OdbcCommand()
			'Dim MyCommand As OdbcCommand() = New MyConnection.CreateCommand()
			Dim MyCommand As New OdbcCommand(commandText, MyConnection)

			'Dim MyCommand As New OdbcCommand()
			'	MyCommand.Connection = MyConnection
	        '   MyCommand.CommandText = commandText

				'Using MyDataReader As OdbcDataReader
					'MyDataReader = MyCommand.ExecuteReader
					Dim MyDataReader As OdbcDataReader = MyCommand.ExecuteReader

					If MyDataReader.HasRows Then
						MyDataReader.Read
						countCodRbt =  MyDataReader("COUNT_PROFILO")
					Else
						countCodRbt = 0
					End If

					MyDataReader.Close

					If numsq1 &gt; 0 Then
						'####SQ1
						'SELECT count(*) FROM `gualini`.`r2_banchi_squadrette` where CodiceSquadretta = "230A";
			            commandText = "SELECT COUNT(*) AS COUNT_SQ1 " &amp; _
			                      	" FROM  `gualini`.`r2_banchi_squadrette` " &amp; _
			            			" WHERE CodiceSquadretta = """ &amp; codsq1 &amp; """" &amp; _
									";"

			            DebugMsg "GestioneZonaR1.movbas -&gt; VerificaCogruenzaDati(); Verifica CodSq1 commandText = " &amp; commandText


						MyCommand.Connection = MyConnection
			            MyCommand.CommandText = commandText
						MyDataReader = MyCommand.ExecuteReader

						If MyDataReader.HasRows Then
							MyDataReader.Read
							countCodSq1 =  MyDataReader("COUNT_SQ1")
						Else
							countCodSq1 = 0
						End If

						MyDataReader.Close
					End If

					If numsq2 &gt; 0 Then
						'####SQ2
						'SELECT count(*) FROM `gualini`.`r2_banchi_squadrette` where CodiceSquadretta = "230A";
			            commandText = "SELECT COUNT(*) AS COUNT_SQ2 " &amp; _
			                      	" FROM  `gualini`.`r2_banchi_squadrette` " &amp; _
			            			" WHERE CodiceSquadretta = """ &amp; codsq2 &amp; """" &amp; _
									";"

			            DebugMsg "GestioneZonaR1.movbas -&gt; VerificaCogruenzaDati(); Verifica CodSq2 commandText = " &amp; commandText

						MyCommand.Connection = MyConnection
			            MyCommand.CommandText = commandText

						MyDataReader = MyCommand.ExecuteReader

						If MyDataReader.HasRows Then
							MyDataReader.Read
							countCodSq2 =  MyDataReader("COUNT_SQ2")
						Else
							countCodSq2 = 0
						End If
						MyDataReader.Close()
					End If


				'End Using	'MyDataReader.Close
			'End Using	'MyCommand.Dispose
        'End Using	'MyConnection.Close

       	okCodRbt = IIf(countCodRbt &gt; 0, True, False)

		If codsq1 = "" Or codsq1 = "0" Or codsq1 = " " Or numsq1 = 0 Then
			okCodSq1 = True
		Else
			okCodSq1 = IIf(countCodSq1 &gt; 0, True, False)
		End If
		If codsq2 = "" Or codsq2 = "0" Or codsq2 = " " Or numsq2 = 0 Then
			okCodSq2 = True
		Else
			okCodSq2 = IIf(countCodSq2 &gt; 0, True, False)
		End If


		configOk = okCodRbt And okCodSq1 And okCodSq2



	  'Catch program exception
	Catch MyException As Exception
		DebugMsg(MyException.ToString)
		MsgBox("GestioneZonaR1.movbas -&gt; VerificaCogruenzaDati() - ERRORE: Exception." &amp; vbCrLf &amp; _
					 MyException.ToString &amp; ".")
		LogMsg(" VerificaCogruenzaDati() - ERRORE: Exception."  &amp; _
					 MyException.ToString &amp; ".")

		'alzare alarme
		alm_ZonaR1_ODBC_txt = "ERR_GENERIC_EXCEPION" &amp; " -- GestioneZonaR1.movbas -&gt; VerificaCogruenzaDati() - ERRORE: Exception."  &amp; _
					 MyException.ToString &amp; "." 'ERR_GENERIC_EXCEPION 'ERRORE eccezzione generic
		alm_ZonaR1_ODBC = True
		VerificaCogruenzaDati = ERR_GENERIC_EXCEPION 'torno errore
		Exit Function

	  'Catch ODBC Exception
	Catch MyOdbcException As OdbcException
		DebugMsg(MyOdbcException.ToString)
		MsgBox("GestioneZonaR1.movbas -&gt; VerificaCogruenzaDati() - ERRORE ODBC: OdbcException." &amp; vbCrLf &amp; _
					MyOdbcException.ToString  &amp; ".")
		LogMsg("VerificaCogruenzaDati() - ERRORE ODBC: OdbcException."  &amp; _
					MyOdbcException.ToString  &amp; ".")
		'alzare alarme
		alm_ZonaR1_ODBC_txt = "ERR_ODBC_EXCEPTION" &amp; " -- GestioneZonaR1.movbas -&gt; VerificaCogruenzaDati() - ERRORE: Exception."  &amp; _
					 MyException.ToString &amp; "." 'ERR_ODBC_EXCEPTION 'ERRORE ecezzione ODBC
		alm_ZonaR1_ODBC = True
		VerificaCogruenzaDati = ERR_ODBC_EXCEPTION 'torno errore
		Exit Function
	Finally

		MyCommand.Dispose()
		MyConnection.Close()
		MyConnection.Dispose()

    End Try

End Function

Sub EliminaFileDatiPezzoDuplicato(nomeFileFull As String)
	'guardo il file esiste
	Try
		'Using fi As New System.IO.FileInfo(nomeFileFull)
		Dim fi As New System.IO.FileInfo(nomeFileFull)
			If fi.Exists Then
				fi.Delete()
				LogMsg("EliminaFileDatiPezzoDuplicato() Eliminato file:" &amp; nomeFileFull)
			Else
				LogMsg("EliminaFileDatiPezzoDuplicato() File non più esistente:" &amp; nomeFileFull)
			End If
		'End Using

	Catch  e As Exception
        LogMsg("EliminaFileDatiPezzoDuplicato() ECCEZZIONE:" &amp; e.Message)
	Finally

	End Try

End Sub


Function MissioneAssegnabile() As Integer 'torna 1 se ho una missione assegnabile da Q1 o 2 se lo è da Q2
	MissioneAssegnabile = 0

	Dim assegnabileQ1 As Boolean
	Dim assegnabileQ2 As Boolean

	Dim cassettoInEstrattoreAssegnatoPronto As Boolean	'vero se il cassetto assegnato al pezzo ' pronto nell'estrattore corrispondente

	'verifico prima le condizioni per il pezzo su Q1
	If [Q1_PEZZO_DISP:MAGAZZINO_ASSEGNATO] = 1 Then
		'ho assegnato il magazzino 1
 'verifico anche che la rikiesta sia relativa alla posizione	And [MAG1_ES1_ACT:POSIZIONE] = [Q1_PEZZO_DISP:POSIZIONE] _
 'verifico anche che la rikiesta sia relativa al pezzo	And [MAG1_ES1_ACT:NOME_PEZZO_UNICO] = [Q1_PEZZO_DISP:NOME_PEZZO_UNICO] _
		If [MAG1_ES1_ACT:ID_CASSETTO]=[Q1_PEZZO_DISP:CASSETTO_ASSEGNATO] _
				And [MAG1_ES1_ACT:PRONTO] _
				And [MAG1_ES1_ACT:POSIZIONE] = [Q1_PEZZO_DISP:POSIZIONE] _
				And [MAG1_ES1_ACT:NOME_PEZZO_UNICO] = [Q1_PEZZO_DISP:NOME_PEZZO_UNICO] _
			Then
			cassettoInEstrattoreAssegnatoPronto = True
		Else
			cassettoInEstrattoreAssegnatoPronto = False
		End If
	ElseIf [Q1_PEZZO_DISP:MAGAZZINO_ASSEGNATO] = 2 Then
		'ho assegnato il magazzino 2
		If [MAG2_ES1_ACT:ID_CASSETTO]=[Q1_PEZZO_DISP:CASSETTO_ASSEGNATO] _
			And [MAG2_ES1_ACT:PRONTO] _
			And [MAG2_ES1_ACT:POSIZIONE] = [Q1_PEZZO_DISP:POSIZIONE] _
			And [MAG2_ES1_ACT:NOME_PEZZO_UNICO] = [Q1_PEZZO_DISP:NOME_PEZZO_UNICO] _
			Then
			cassettoInEstrattoreAssegnatoPronto = True
		Else
			cassettoInEstrattoreAssegnatoPronto = False
		End If
	Else
		' non pronto
		cassettoInEstrattoreAssegnatoPronto = False
		'CANCELLA 'eccezione perchè :MAGAZZINO_ASSEGNATO deve essere 1 o 2
		'CANCELLA 'Throw New System.Exception("GestioneZonaR1.movbas -&gt; MissioneAssegnabile() ECCEZZIONE: valore [Q1_PEZZO_DISP:MAGAZZINO_ASSEGNATO] non  ammesso: " &amp; CStr([Q1_PEZZO_DISP:MAGAZZINO_ASSEGNATO]) &amp; ".")
	End If

	assegnabileQ1 =	[Q1_Out:PezzoPronto] _
					And [Q1_PEZZO_DISP:NOME_PEZZO_UNICO] &lt;&gt;"" _
					And [R1_STATUS:DISPONIBILE] _
					And [R1_STATUS:RIK_MISSIONE] _
					And Not [R1_STATUS:IN_MISSIONE] _
					And cassettoInEstrattoreAssegnatoPronto _
					And Not [Q1_PEZZO_DISP:ROBOT_ASSEGNATO]

	'verifico le condizioni per il pezzo su Q2
	If [Q2_PEZZO_DISP:MAGAZZINO_ASSEGNATO] = 1 Then
		'ho assegnato il magazzino 1
		If [MAG1_ES1_ACT:ID_CASSETTO]=[Q2_PEZZO_DISP:CASSETTO_ASSEGNATO] _
			And [MAG1_ES1_ACT:PRONTO] _
			And [MAG1_ES1_ACT:POSIZIONE] = [Q2_PEZZO_DISP:POSIZIONE] _
			And [MAG1_ES1_ACT:NOME_PEZZO_UNICO] = [Q2_PEZZO_DISP:NOME_PEZZO_UNICO] _
			Then
			cassettoInEstrattoreAssegnatoPronto = True
		Else
			cassettoInEstrattoreAssegnatoPronto = False
		End If
	ElseIf [Q2_PEZZO_DISP:MAGAZZINO_ASSEGNATO] = 2 Then
		'ho assegnato il magazzino 2
		If [MAG2_ES1_ACT:ID_CASSETTO]=[Q2_PEZZO_DISP:CASSETTO_ASSEGNATO] _
			And [MAG2_ES1_ACT:PRONTO] _
			And [MAG2_ES1_ACT:POSIZIONE] = [Q2_PEZZO_DISP:POSIZIONE] _
			And [MAG2_ES1_ACT:NOME_PEZZO_UNICO] = [Q2_PEZZO_DISP:NOME_PEZZO_UNICO] _
			Then
			cassettoInEstrattoreAssegnatoPronto = True
		Else
			cassettoInEstrattoreAssegnatoPronto = False
		End If
	Else
		' non pronto
		cassettoInEstrattoreAssegnatoPronto = False
		'CANCELLA 'eccezione perchè :MAGAZZINO_ASSEGNATO deve essere 1 o 2
		'CANCELLA Throw New System.Exception("GestioneZonaR1.movbas -&gt; MissioneAssegnabile() ECCEZZIONE: valore [Q1_PEZZO_DISP:MAGAZZINO_ASSEGNATO] non  ammesso: " &amp; CStr([Q1_PEZZO_DISP:MAGAZZINO_ASSEGNATO]) &amp; ".")
	End If

	assegnabileQ2 = [Q2_Out:PezzoPronto] _
					And [Q2_PEZZO_DISP:NOME_PEZZO_UNICO] &lt;&gt;"" _
					And [R1_STATUS:DISPONIBILE] _
					And [R1_STATUS:RIK_MISSIONE] _
					And Not [R1_STATUS:IN_MISSIONE] _
					And cassettoInEstrattoreAssegnatoPronto _
					And Not [Q2_PEZZO_DISP:ROBOT_ASSEGNATO]

	If assegnabileQ1 And assegnabileQ2 Then
		MissioneAssegnabile = PezzoPiuVecchio()
	Else
		'ho solo un pezzo pronto o nessuno
		If assegnabileQ1 Then
			MissioneAssegnabile = 1
		End If
		If assegnabileQ2 Then
			MissioneAssegnabile = 2
		End If
		'se nessun pezzo pronto MissioneAssegnabile = 0, già impostato a inizio funzione
	End If
End Function

Function transizioneAttendiCassettoDisponibile() As Integer
	transizioneAttendiCassettoDisponibile = 0
	Dim dispQ1 As Boolean
	Dim dispQ2 As Boolean
	Dim tout As Boolean

	tout = SuperatoTimeout(disponibileLastCheck, TOUT_DISPONIBILE)
	If tout Then
		disponibileLastCheck = Timer
		'LogMsg("AttendiCassettoDisponibile() -&gt; tout at : " &amp; CStr(disponibileLastCheck))

		transizioneAttendiCassettoDisponibile = AttendiCassettoDisponibile()
	Else
		transizioneAttendiCassettoDisponibile = 0 'esco
		Exit Function
	End If

End Function

Function AttendiCassettoDisponibile() As Integer
	'questa funzione torna 0 se non posso assegnare nessun cassetto alla quartina perche magazziono di riferimento è pieno
	'torna 1 o 2 se posso assegnare un cassetto (il magazzionio di riferimento dipende da TipoCarico) al pezzo che proviente dalla quadra 1 o 2
	AttendiCassettoDisponibile = 0
	Dim dispQ1 As Boolean = False
	Dim dispQ2 As Boolean = False
	Dim assegnabileQ1 As Boolean = False	'dice se il pezzo su Q1 è assegnabile a un cassetto
	Dim assegnabileQ2 As Boolean = False	'dice se il pezzo su Q2 è assegnabile a un cassetto
	Dim qrtEsisteQ1 As Boolean = False	'dice se il pezzo su Q1 appartine ad una quartina già assegnata ad un magazzino
	Dim qrtEsisteQ2 As Boolean = False	'dice se il pezzo su Q2 appartine ad una quartina già assegnata ad un magazzino
	'Dim quadraPezzoDaAssegnare As Integer	'num quadra del pezzo da assegnare
	Dim numCassettiDispPzSuQ1 As Integer
	Dim numCassettiDispPzSuQ2 As Integer
	Dim numCassettiDisp As Integer

	'[Q1_In:PezzoPronto] And [Q1_PEZZO_DISP:NOME_PEZZO_UNICO] &lt;&gt;"" And [Q1_PEZZO_DISP:CASSETTO_ASSEGNATO]=0 And (Timer()-lastcheck &gt; TIMEOUT)
	'tout è già stato contato in transizioneAttendiCassettoDisponibile()

	dispQ1 = [Q1_Out:PezzoPronto] And [Q1_PEZZO_DISP:NOME_PEZZO_UNICO] &lt;&gt; "" And [Q1_PEZZO_DISP:CASSETTO_ASSEGNATO] = 0
	dispQ2 = [Q2_Out:PezzoPronto] And [Q2_PEZZO_DISP:NOME_PEZZO_UNICO] &lt;&gt; "" And [Q2_PEZZO_DISP:CASSETTO_ASSEGNATO] = 0

	If [loc_ImpostazioniImpianto:TipoCarico] = 0 Then 'pezzo su magazzino corrispondente
		If dispQ1 Then
			'caso in cui il pezzo da Q1 va su Mag1
			numCassettiDispPzSuQ1 = CassettiDisponibili(1, MySqlConnectionString)
			qrtEsisteQ1 = QuartinaEsiste([Q1_PEZZO_DISP:ID_QUARTINA], MySqlConnectionString)
			If numCassettiDispPzSuQ1 &gt; 0 Or qrtEsisteQ1 Then
				assegnabileQ1 = True
			End If
		End If
		If dispQ2 Then
			'caso in cui il pezzo da Q2 va su Mag2
			numCassettiDispPzSuQ2 = CassettiDisponibili(2, MySqlConnectionString)
			qrtEsisteQ2 = QuartinaEsiste([Q2_PEZZO_DISP:ID_QUARTINA], MySqlConnectionString)
			If numCassettiDispPzSuQ2 &gt; 0 Or qrtEsisteQ2 Then
				assegnabileQ2 = True
			End If
		End If

	ElseIf [loc_ImpostazioniImpianto:TipoCarico] = 1 Then 'pezzo su qualsiasi magazzino
		'QuadraSuTutto
		numCassettiDisp = CassettiDisponibili(0, MySqlConnectionString)
		If dispQ1 Then
			qrtEsisteQ1 = QuartinaEsiste([Q1_PEZZO_DISP:ID_QUARTINA], MySqlConnectionString)
			If numCassettiDisp &gt; 0 Or qrtEsisteQ1 Then
				assegnabileQ1 = True
			End If
		End If
		If dispQ2  Then
			qrtEsisteQ2 = QuartinaEsiste([Q2_PEZZO_DISP:ID_QUARTINA], MySqlConnectionString)
			If numCassettiDisp &gt; 0 Or qrtEsisteQ2 Then
				assegnabileQ2= True
			End If
		End If
	End If

	AttendiCassettoDisponibile = 0	'non posso assegnare il cassetto

	If assegnabileQ1 And assegnabileQ2 Then
		AttendiCassettoDisponibile = PezzoPiuVecchio()
	Else
		'ho solo un pezzo assegnabile o nessuno
		If assegnabileQ1 Then
			AttendiCassettoDisponibile = 1
		End If
		If assegnabileQ2 Then
			AttendiCassettoDisponibile = 2
		End If
	End If

End Function

Function AssegnaCassettoAllaQuartina(TipoCarico As Integer _
									, leggiDaQuadra As Integer _
									, connectionString As String _
									, ID_QUARTINA As String _
									, TOTALE_PEZZI_QUARTINA As Integer _
									, NOME_COMMESSA As String _
									, NUM_SQUADRETTE1 As Integer _
									, COD_SQUADRETTA1 As String _
									, NUM_SQUADRETTE2 As Integer _
									, COD_SQUADRETTA2 As String _
									) As PosQuartina
	Dim pos As PosQuartina

	Dim commandText As String
	Dim cassetti As Integer

	Const ERR_GENERICO As Integer = -1 					'ERRORE GENERICO
    Const ERR_GENERIC_EXCEPION As Integer = -101	 	'ERRORE eccezzione generica
    Const ERR_ODBC_EXCEPTION As Integer = -102	 		'ERRORE ecezzione ODBC

	pos.mag  = 0
	pos.cass = 0
	AssegnaCassettoAllaQuartina = pos 'inizializzo variabile di ritorno

	'cerco nel db a quale cassetto è assegnata la quartina
	Try
        Using MyConnection As New System.Data.Odbc.OdbcConnection(connectionString)
            MyConnection.Open()
            commandText = "CALL `gualini`.`CassettoPiuVicinoAndInsert`" &amp; _
            							"(" &amp; _
            							CStr(TipoCarico) &amp; _
            							", " &amp; CStr(leggiDaQuadra) &amp; _
            							", ""INS"" " &amp; _
            							", " &amp; """" &amp; CStr(ID_QUARTINA) &amp; """"  &amp; _
            							", " &amp; CStr(TOTALE_PEZZI_QUARTINA) &amp;  _
            							", " &amp; """" &amp; CStr(NOME_COMMESSA) &amp; """" &amp;  _
            							", " &amp; CStr(NUM_SQUADRETTE1) &amp;  _
            							", " &amp;  """" &amp;CStr(COD_SQUADRETTA1) &amp; """" &amp;  _
            							", " &amp; CStr(NUM_SQUADRETTE2) &amp;  _
            							", " &amp;  """" &amp;CStr(COD_SQUADRETTA2) &amp; """" &amp; _
            							");"

            'Select COUNT(*) FROM gualini.cassetti_disponibili WHERE ID_MAGAZZINO = 1 Or ID_MAGAZZINO = 2;
            'DebugMsg "GestioneZonaR1.movbas -&gt; AssegnaCassettoAllaQuartina(); commandText = " &amp; commandText

            Using MyCommand As New OdbcCommand()
				MyCommand.Connection = MyConnection
	            MyCommand.CommandText = commandText

				Using MyDataReader As OdbcDataReader
					MyDataReader = MyCommand.ExecuteReader

					'DebugMsg "AssegnaCassettoAllaQuartina(); MyDataReader.HasRows = " 			&amp;  CStr(MyDataReader.HasRows)
					'DebugMsg "AssegnaCassettoAllaQuartina(); MyDataReader.RecordsAffected = " 	&amp;  CStr(MyDataReader.RecordsAffected)

					'se la quartina esiste nel DB leggo i dati di magazzino e cassetto
					If MyDataReader.HasRows Then
						MyDataReader.Read

						pos.mag = MyDataReader("MAGAZZINO")
						pos.cass = MyDataReader("CASSETTO")
					End If
				End Using	'MyDataReader.Close
			End Using	'MyCommand.Dispose
        End Using	'MyConnection.Close

        If pos.mag = 0 Or pos.cass = 0 Then
        	DebugMsg("GestioneZonaR1.movbas -&gt; AssegnaCassettoAllaQuartina() - pos.mag = " &amp; CStr(pos.mag) &amp; "; pos.cass = " &amp; CStr(pos.cass) &amp; "; commandText = " &amp; commandText)
        End If

        'memorizzo il cassetto assegnato in base alla quadra di provenienza
        If leggiDaQuadra = 1 Then
			[Q1_PEZZO_DISP:CASSETTO_ASSEGNATO] 		= pos.cass 'memorizzo il cassetto assegnato al pezzo
			[Q1_PEZZO_DISP:MAGAZZINO_ASSEGNATO] 	= pos.mag 'memorizzo il magazzino assegnato al pezzo
		ElseIf leggiDaQuadra = 2 Then
			[Q2_PEZZO_DISP:CASSETTO_ASSEGNATO] 		= pos.cass 'memorizzo il cassetto assegnato al pezzo
			[Q2_PEZZO_DISP:MAGAZZINO_ASSEGNATO] 	= pos.mag 'memorizzo il magazzino assegnato al pezzo
		End If

        DebugMsg("AssegnaCassettoAllaQuartina() - cassettoPiuViciono pos.mag = " &amp; CStr(pos.mag) &amp; " pos.cass = " &amp; CStr(pos.cass) &amp; "; commandText = " &amp; commandText &amp; ".")
        AssegnaCassettoAllaQuartina = pos 'torno valore trovato

	  'Catch program exception
	Catch MyException As Exception
		DebugMsg(MyException.ToString)
		MsgBox("GestioneZonaR1.movbas -&gt; AssegnaCassettoAllaQuartina() - ERRORE: Exception." &amp; vbCrLf &amp; _
					 MyException.ToString &amp; ".")
		LogMsg(" AssegnaCassettoAllaQuartina() - ERRORE: Exception."  &amp; _
					 MyException.ToString &amp; ".")

		'alzare alarme
		alm_ZonaR1_ODBC_txt = "ERR_GENERIC_EXCEPION" &amp; " -- GestioneZonaR1.movbas -&gt; AssegnaCassettoAllaQuartina() - ERRORE: Exception."  &amp; _
					 MyException.ToString &amp; "." 'ERR_GENERIC_EXCEPION 'ERRORE eccezzione generic
		alm_ZonaR1_ODBC = True

	  'Catch ODBC Exception
	Catch MyOdbcException As OdbcException
		DebugMsg(MyOdbcException.ToString)
		MsgBox("GestioneZonaR1.movbas -&gt; AssegnaCassettoAllaQuartina() - ERRORE ODBC: OdbcException." &amp; vbCrLf &amp; _
					MyOdbcException.ToString  &amp; ".")
		LogMsg("AssegnaCassettoAllaQuartina() - ERRORE ODBC: OdbcException."  &amp; _
					MyOdbcException.ToString  &amp; ".")
		'TODO
		'alzare alarme
		alm_ZonaR1_ODBC_txt = "ERR_ODBC_EXCEPTION" &amp; " -- GestioneZonaR1.movbas -&gt; AssegnaCassettoAllaQuartina() - ERRORE: Exception."  &amp; _
					 MyException.ToString &amp; "." 'ERR_ODBC_EXCEPTION 'ERRORE ecezzione ODBC
		alm_ZonaR1_ODBC = True


	Finally
		'Dim objAlarm As AlarmCmdTarget
		'Dim objThreshold As AlarmThresholdCmdTarget
		'objAlarm = GetAlarm("alm_ZonaR1_ODBC")
		'objThreshold = objAlarm.GetAlarmThreshold("H")
		'objThreshold.Text = alm_ZonaR1_ODBC_txt
		'objThreshold = Nothing
		'objAlarm = Nothing

		'Exit Function
    End Try

End Function

Function FineRobot(connectionString As String) As Integer
	'operazioni da fare nella function
	'inserire o aggiornare i dati della quartina nel DB
	'inserire i dati del pezzo nel DB

    Dim commandText As String
    Dim commandText2 As String
    Dim excp As Boolean

    Const ERR_GENERICO As Integer = -1 					'ERRORE GENERICO
    Const ERR_GENERIC_EXCEPION As Integer = -101	 	'ERRORE eccezzione generica
    Const ERR_ODBC_EXCEPTION As Integer = -102	 		'ERRORE ecezzione ODBC

    FineRobot = ERR_GENERICO	'inizializzzo a ERR_GENERICO

	'devo inserire i dati del pezzo nel DB
	excp = False
	Try
        Using MyConnection As New System.Data.Odbc.OdbcConnection(connectionString)
            MyConnection.Open()

			'commandText = "UPDATE `gualini`.`quartina` " &amp; _
			'"Set " &amp; _
			'"`TOTALE_PEZZI_QUARTINA` =  " 			&amp; CStr(GetVariableValue("R1_DATI_PEZZO:TOTALE_PEZZI_QUARTINA") &amp; "," &amp; _
			'"`NUM_SQUADRETTE1` =  " 				&amp; CStr(GetVariableValue("R1_DATI_PEZZO:NUM_SQUADRETTE1") &amp; "," &amp; _
			'"`COD_SQUADRETTA1` =  " 				&amp; CStr(GetVariableValue("R1_DATI_PEZZO:COD_SQUADRETTA1") &amp; "," &amp; _
			'"`NUM_SQUADRETTE2` =  " 				&amp; CStr(GetVariableValue("R1_DATI_PEZZO:NUM_SQUADRETTE2") &amp; "," &amp; _
			'"`COD_SQUADRETTA2` =  " 				&amp; CStr(GetVariableValue("R1_DATI_PEZZO:COD_SQUADRETTA2") &amp; "," &amp; _
			'"`NOME_COMMESSA` =  " 					&amp; CStr(GetVariableValue("R1_DATI_PEZZO:NOME_COMMESSA") &amp; "," &amp; _
			'"`cassetto_ID_CASSETTO` =  " 			&amp; CStr(GetVariableValue("R1_DATI_PEZZO:CASSETTO_ASSEGNATO") &amp; "," &amp; _
			'"`cassetto_magazzino_ID_MAGAZZINO` =  " &amp; CStr(GetVariableValue("R1_DATI_PEZZO:MAGAZZINO_ASSEGNATO") &amp; _
			'" WHERE `ID_QUARTINA` = " &amp; "`" 		&amp; CStr(GetVariableValue("R1_DATI_PEZZO:ID_QUARTINA") &amp; "`" &amp; ";"

            commandText = "INSERT INTO `gualini`.`quartina` " &amp; _
            "(`ID_QUARTINA`, " &amp; _
            "`TOTALE_PEZZI_QUARTINA`, " &amp; _
            "`NUM_SQUADRETTE1`, " &amp; _
            "`COD_SQUADRETTA1`, " &amp; _
            "`NUM_SQUADRETTE2`, " &amp; _
            "`COD_SQUADRETTA2`, " &amp; _
            "`NOME_COMMESSA`, " &amp; _
            "`cassetto_ID_CASSETTO`, " &amp; _
            "`cassetto_magazzino_ID_MAGAZZINO` " &amp; _
            ") " &amp; _
            " VALUES " &amp; _
			"(" &amp; _
            """" &amp; CStr(GetVariableValue("R1_DATI_PEZZO:ID_QUARTINA")) &amp; """" &amp; ", " &amp; _
            CStr(GetVariableValue("R1_DATI_PEZZO:TOTALE_PEZZI_QUARTINA")) &amp; ", " &amp; _
            CStr(GetVariableValue("R1_DATI_PEZZO:NUM_SQUADRETTE1")) &amp; ", " &amp; _
            """" &amp; CStr(GetVariableValue("R1_DATI_PEZZO:COD_SQUADRETTA1")) &amp; """" &amp; ", " &amp; _
            CStr(GetVariableValue("R1_DATI_PEZZO:NUM_SQUADRETTE2")) &amp; ", " &amp; _
			"""" &amp; CStr(GetVariableValue("R1_DATI_PEZZO:COD_SQUADRETTA2")) &amp; """" &amp; ", " &amp; _
			"""" &amp; CStr(GetVariableValue("R1_DATI_PEZZO:NOME_COMMESSA")) &amp; """" &amp; ", " &amp; _
            CStr(GetVariableValue("R1_DATI_PEZZO:CASSETTO_ASSEGNATO")) &amp; ", " &amp; _
            CStr(GetVariableValue("R1_DATI_PEZZO:MAGAZZINO_ASSEGNATO")) &amp; _
            ") ON DUPLICATE KEY UPDATE " &amp; _
            "`TOTALE_PEZZI_QUARTINA` = " &amp; CStr(GetVariableValue("R1_DATI_PEZZO:TOTALE_PEZZI_QUARTINA"))  &amp; ", " &amp; _
			"`NUM_SQUADRETTE1` = " &amp; CStr(GetVariableValue("R1_DATI_PEZZO:NUM_SQUADRETTE1")) &amp; ", " &amp; _
			"`COD_SQUADRETTA1` = " &amp; """" &amp; CStr(GetVariableValue("R1_DATI_PEZZO:COD_SQUADRETTA1")) &amp; """" &amp; ", " &amp; _
			"`NUM_SQUADRETTE2` = " &amp; CStr(GetVariableValue("R1_DATI_PEZZO:NUM_SQUADRETTE2")) &amp; ", " &amp; _
			"`COD_SQUADRETTA2` = " &amp; """" &amp; CStr(GetVariableValue("R1_DATI_PEZZO:COD_SQUADRETTA2")) &amp; """" &amp; ", " &amp; _
			"`NOME_COMMESSA` = " &amp; """" &amp; CStr(GetVariableValue("R1_DATI_PEZZO:NOME_COMMESSA"))  &amp; """" &amp;  _
            ";"

            DebugMsg "GestioneZonaR1.movbas -&gt; FineRobot(); commandText = " &amp; commandText

            commandText2 = "INSERT INTO `gualini`.`pezzo` " &amp; _
            "(`ID_PEZZO`, " &amp; _
            "`POSIZIONE`, " &amp; _
            "`NOME_PEZZO_ESTERNO`, " &amp; _
            "`CODICE_PROFILO`, " &amp; _
            "`SERIE_PROFILO`, " &amp; _
            "`MAX_LUNGHEZZA`, " &amp; _
            "`ALTEZZA_PROFILO`, " &amp; _
            "`LARGHEZZA_PROFILO`, " &amp; _
            "`MISURA_CAMERA_ESTERNA`, " &amp; _
            "`APPOGGIO_PEZZO`, " &amp; _
            "`POSIZIONE_PEZZO_ESTERNO`, " &amp; _
            "`ID_PEZZO_ESTERNO`, " &amp; _
            "`LUNGHEZZA_PEZZO_ESTERNO`, " &amp; _
            "`FILE_XML`, " &amp; _
            "`DATA`, " &amp; _
            "`ORA`, " &amp; _
            "`quartina_ID_QUARTINA`) " &amp; _
            "VALUES " &amp; _
			"(" &amp; _
            """" &amp; CStr(GetVariableValue("R1_DATI_PEZZO:NOME_PEZZO_UNICO")) &amp; """" &amp; ", " &amp; _
            CStr(GetVariableValue("R1_DATI_PEZZO:POSIZIONE")) &amp; ", " &amp; _
            """" &amp; CStr(GetVariableValue("R1_DATI_PEZZO:NOME_PEZZO_ESTERNO")) &amp; """" &amp; ", " &amp; _
            """" &amp; CStr(GetVariableValue("R1_DATI_PEZZO:CODICE_PROFILO")) &amp; """" &amp; ", " &amp; _
            """" &amp; CStr(GetVariableValue("R1_DATI_PEZZO:SERIE_PROFILO")) &amp; """" &amp; ", " &amp; _
			CStr(GetVariableValue("R1_DATI_PEZZO:MAX_LUNGHEZZA")) &amp; ", " &amp; _
			CStr(GetVariableValue("R1_DATI_PEZZO:ALTEZZA_PROFILO")) &amp; ", " &amp; _
            CStr(GetVariableValue("R1_DATI_PEZZO:LARGHEZZA_PROFILO")) &amp; ", " &amp; _
            CStr(GetVariableValue("R1_DATI_PEZZO:MISURA_CAMERA_ESTERNA")) &amp; ", " &amp; _
            CStr(GetVariableValue("R1_DATI_PEZZO:APPOGGIO_PEZZO")) &amp; ", " &amp; _
            CStr(GetVariableValue("R1_DATI_PEZZO:POSIZIONE_PEZZO_ESTERNO")) &amp; ", " &amp; _
            """" &amp; CStr(GetVariableValue("R1_DATI_PEZZO:ID_PEZZO_ESTERNO")) &amp; """" &amp; ", " &amp; _
            CStr(GetVariableValue("R1_DATI_PEZZO:LUNGHEZZA_PEZZO_ESTERNO")) &amp; ", " &amp; _
            """" &amp; CStr(GetVariableValue("R1_DATI_PEZZO:FILE_XML")) &amp; """" &amp; ", " &amp; _
            """" &amp; CStr(GetVariableValue("R1_DATI_PEZZO:DATA")) &amp; """" &amp; ", " &amp; _
            """" &amp; CStr(GetVariableValue("R1_DATI_PEZZO:ORA")) &amp; """" &amp; ", " &amp; _
            """" &amp; CStr(GetVariableValue("R1_DATI_PEZZO:ID_QUARTINA")) &amp; """"  &amp; _
            "); "

            DebugMsg "GestioneZonaR1.movbas -&gt; FineRobot(); commandText2 = " &amp; commandText2

            Using MyCommand As New OdbcCommand()
				MyCommand.Connection = MyConnection

	            Dim rCount As Integer

	            'inserisco o aggiorno i dati di quartina
	            MyCommand.CommandText = commandText
	            rCount = MyCommand.ExecuteNonQuery()
				Debug.Print	"rCout = MyCommand.ExecuteNonQuery() = " &amp; rCount

				'inserisco i dati del pezzo
				MyCommand.CommandText = commandText2
	            rCount = MyCommand.ExecuteNonQuery()
				Debug.Print	"rCout = MyCommand.ExecuteNonQuery() = " &amp; rCount

			End Using	'MyCommand.Dispose
        End Using	'MyConnection.Close

	  'Catch program exception
	Catch MyException As Exception
		excp = True
		DebugMsg(MyException.ToString)
		MsgBox("GestioneZonaR1.movbas -&gt; FineRobot() - ERRORE: Exception." &amp; vbCrLf &amp; _
					 MyException.ToString &amp; ".")
		LogMsg(" FineRobot() - ERRORE: Exception."  &amp; _
					 MyException.ToString &amp; ".")

		'alzare alarme
		alm_ZonaR1_ODBC_txt = "ERR_GENERIC_EXCEPION" &amp; " -- GestioneZonaR1.movbas -&gt; FineRobot() - ERRORE: Exception."  &amp; _
					 MyException.ToString &amp; "." 'ERR_GENERIC_EXCEPION 'ERRORE eccezzione generic
		alm_ZonaR1_ODBC = True
		FineRobot = ERR_GENERIC_EXCEPION
		'Exit Function

	  'Catch ODBC Exception
	Catch MyOdbcException As OdbcException
		excp = True
		DebugMsg(MyOdbcException.ToString)
		MsgBox("GestioneZonaR1.movbas -&gt; FineRobot() - ERRORE ODBC: OdbcException." &amp; vbCrLf &amp; _
					MyOdbcException.ToString  &amp; ".")
		LogMsg("FineRobot() - ERRORE ODBC: OdbcException."  &amp; _
					MyOdbcException.ToString  &amp; ".")
		'TODO
		'alzare alarme
		alm_ZonaR1_ODBC_txt = "ERR_ODBC_EXCEPTION" &amp; " -- GestioneZonaR1.movbas -&gt; FineRobot() - ERRORE: Exception."  &amp; _
					 MyException.ToString &amp; "." 'ERR_ODBC_EXCEPTION 'ERRORE ecezzione ODBC
		alm_ZonaR1_ODBC = True
		FineRobot = ERR_ODBC_EXCEPTION
	Finally
		If excp Then
			Exit Function
		End If
    End Try

    'tutto Ok
    FineRobot = 0
End Function

Function RilevaCassettoQuartinaSuccessiva( connectionString As String ) As PosQuartina
									'TipoCarico As Integer _
									', leggiDaQuadra As Integer _
									', connectionString As String _
									', ID_QUARTINA As String _
									', TOTALE_PEZZI_QUARTINA As Integer _
									', NOME_COMMESSA As String _
									', NUM_SQUADRETTE1 As Integer _
									', COD_SQUADRETTA1 As String _
									', NUM_SQUADRETTE2 As Integer _
									', COD_SQUADRETTA2 As String _
									') As PosQuartina
	'devo chiamare la procedura MySql `CassettoPiuVicinoAndInsert`
		'(
		'TipoCarico Int,
        'LeggiDaQuadra Int,
		'OP VARCHAR(10), /* "" = solo ricerca del cassetto più vicino, "INS" = inserisce anche nuova quartina, "UPD" aggiorna i dati indentificativi della quartina */
		'pID_QUARTINA VARCHAR(45),
		'pTOTALE_PEZZI_QUARTINA TINYINT(4),
		'pNOME_COMMESSA VARCHAR(45),
		'pNUM_SQUADRETTE1 TINYINT(4),
		'pCOD_SQUADRETTA1  VARCHAR(45),
		'pNUM_SQUADRETTE2 TINYINT(4),
		'pCOD_SQUADRETTA2  VARCHAR(45)
        ')
    'con i soli dati di TipoCarico, LeggiDaQuadra, OP = "INS" e ID_QUARTINA e 0 o "" gli altri parametri
    'questa procedura torna cassetto e magazzino assegnati sia che la quartina esista sia che non esista e sia in grado di crearla
    'torna magazzino = 0 e cassetto = 0 se il magazzino è pieno


	Dim pos As PosQuartina

	Dim commandText As String
	Dim cassetti As Integer

	Const ERR_GENERICO As Integer = -1 					'ERRORE GENERICO
    Const ERR_GENERIC_EXCEPION As Integer = -101	 	'ERRORE eccezzione generica
    Const ERR_ODBC_EXCEPTION As Integer = -102	 		'ERRORE ecezzione ODBC

	pos.mag  = 0
	pos.cass = 0
	RilevaCassettoQuartinaSuccessiva = pos 'inizializzo variabile di ritorno

	'cerco nel db a quale cassetto è assegnata la quartina successiva
	Try
        Using MyConnection As New System.Data.Odbc.OdbcConnection(connectionString)
            MyConnection.Open()
            commandText = "CALL `gualini`.`CassettoPiuVicinoAndInsert`" &amp; _
            							"(" &amp; _
            							CStr([loc_ImpostazioniImpianto:TipoCarico]) &amp; _
            							", " &amp; CStr([R1_STATUS:PZ_DA_QUADRA]) &amp; _
            							", ""INS"" " &amp; _
            							", " &amp; """" &amp; CStr([R1_DATI_PEZZO:ID_QUARTINA_SUCCESSIVA]) &amp; """" &amp; _
            							", " &amp; CStr("NULL") &amp; _
            							", " &amp; CStr("NULL") &amp; _
            							", " &amp; CStr("NULL") &amp; _
            							", " &amp; CStr("NULL") &amp; _
            							", " &amp; CStr("NULL") &amp; _
            							", " &amp; CStr("NULL") &amp; _
            							");"

            DebugMsg "GestioneZonaR1.movbas -&gt; RilevaCassettoQuartinaSuccessiva(); commandText = " &amp; commandText

            Using MyCommand As New OdbcCommand()
				MyCommand.Connection = MyConnection
	            MyCommand.CommandText = commandText

				Using MyDataReader As OdbcDataReader
					MyDataReader = MyCommand.ExecuteReader

					DebugMsg "RilevaCassettoQuartinaSuccessiva(); MyDataReader.HasRows = " 			&amp;  CStr(MyDataReader.HasRows)
					DebugMsg "RilevaCassettoQuartinaSuccessiva(); MyDataReader.RecordsAffected = " 	&amp;  CStr(MyDataReader.RecordsAffected)

					'se la quartina esiste nel DB leggo i dati di magazzino e cassetto
					If MyDataReader.HasRows Then
						MyDataReader.Read

						pos.mag = MyDataReader("MAGAZZINO")
						pos.cass = MyDataReader("CASSETTO")
					End If
				End Using	'MyDataReader.Close
			End Using	'MyCommand.Dispose
        End Using	'MyConnection.Close

        DebugMsg("RilevaCassettoQuartinaSuccessiva() - cassettoPiuViciono pos.mag = " &amp; CStr(pos.mag) &amp; " pos.cass = " &amp; CStr(pos.cass)  &amp; ".")
        RilevaCassettoQuartinaSuccessiva = pos 'torno valore trovato

	  'Catch program exception
	Catch MyException As Exception
		DebugMsg(MyException.ToString)
		MsgBox("GestioneZonaR1.movbas -&gt; RilevaCassettoQuartinaSuccessiva() - ERRORE: Exception." &amp; vbCrLf &amp; _
					 MyException.ToString &amp; ".")
		LogMsg(" RilevaCassettoQuartinaSuccessiva() - ERRORE: Exception."  &amp; _
					 MyException.ToString &amp; ".")

		'alzare alarme
		alm_ZonaR1_ODBC_txt = "ERR_GENERIC_EXCEPION" &amp; " -- GestioneZonaR1.movbas -&gt; RilevaCassettoQuartinaSuccessiva() - ERRORE: Exception."  &amp; _
					 MyException.ToString &amp; "." 'ERR_GENERIC_EXCEPION 'ERRORE eccezzione generic
		alm_ZonaR1_ODBC = True

	  'Catch ODBC Exception
	Catch MyOdbcException As OdbcException
		DebugMsg(MyOdbcException.ToString)
		MsgBox("GestioneZonaR1.movbas -&gt; RilevaCassettoQuartinaSuccessiva() - ERRORE ODBC: OdbcException." &amp; vbCrLf &amp; _
					MyOdbcException.ToString  &amp; ".")
		LogMsg("RilevaCassettoQuartinaSuccessiva() - ERRORE ODBC: OdbcException."  &amp; _
					MyOdbcException.ToString  &amp; ".")
		'TODO
		'alzare alarme
		alm_ZonaR1_ODBC_txt = "ERR_ODBC_EXCEPTION" &amp; " -- GestioneZonaR1.movbas -&gt; RilevaCassettoQuartinaSuccessiva() - ERRORE: Exception."  &amp; _
					 MyException.ToString &amp; "." 'ERR_ODBC_EXCEPTION 'ERRORE ecezzione ODBC
		alm_ZonaR1_ODBC = True


	Finally
		'Dim objAlarm As AlarmCmdTarget
		'Dim objThreshold As AlarmThresholdCmdTarget
		'objAlarm = GetAlarm("alm_ZonaR1_ODBC")
		'objThreshold = objAlarm.GetAlarmThreshold("H")
		'objThreshold.Text = alm_ZonaR1_ODBC_txt
		'objThreshold = Nothing
		'objAlarm = Nothing

		Exit Function

    End Try

End Function

Sub DecodificaMissioneR1()
	If [R1_DATI_PEZZO:SERIE_PROFILO]= "UNA" And [R1_DATI_PEZZO:CODICE_PROFILO] = "K1900" Then
		[R1_DATI_PEZZO:R1_COD_RBT] = 1
	End If
	If [R1_DATI_PEZZO:SERIE_PROFILO]= "UNA" And [R1_DATI_PEZZO:CODICE_PROFILO] = "K1901" Then
		[R1_DATI_PEZZO:R1_COD_RBT] = 2
	End If
	If [R1_DATI_PEZZO:SERIE_PROFILO]= "UNA" And [R1_DATI_PEZZO:CODICE_PROFILO] = "K1911" Then
		[R1_DATI_PEZZO:R1_COD_RBT] = 3
	End If
	If [R1_DATI_PEZZO:SERIE_PROFILO]= "AWS65" And [R1_DATI_PEZZO:CODICE_PROFILO] = "363890" Then
		[R1_DATI_PEZZO:R1_COD_RBT] = 4
	End If
	If [R1_DATI_PEZZO:SERIE_PROFILO]= "AWS70" And [R1_DATI_PEZZO:CODICE_PROFILO] = "358140" Then
		[R1_DATI_PEZZO:R1_COD_RBT] = 5
	End If
	If [R1_DATI_PEZZO:SERIE_PROFILO]= "AWS65" And [R1_DATI_PEZZO:CODICE_PROFILO] = "364110" Then
		[R1_DATI_PEZZO:R1_COD_RBT] = 6
	End If
	If [R1_DATI_PEZZO:SERIE_PROFILO]= "AWS70" And [R1_DATI_PEZZO:CODICE_PROFILO] = "358340" Then
		[R1_DATI_PEZZO:R1_COD_RBT] = 7
	End If
	If [R1_DATI_PEZZO:SERIE_PROFILO]= "AWS65" And [R1_DATI_PEZZO:CODICE_PROFILO] = "363980" Then
		[R1_DATI_PEZZO:R1_COD_RBT] = 8
	End If
	If [R1_DATI_PEZZO:SERIE_PROFILO]= "AWS70" And [R1_DATI_PEZZO:CODICE_PROFILO] = "358240" Then
		[R1_DATI_PEZZO:R1_COD_RBT] = 9
	End If
	If [R1_DATI_PEZZO:SERIE_PROFILO]= "AWS65" And [R1_DATI_PEZZO:CODICE_PROFILO] = "364650" Then
		[R1_DATI_PEZZO:R1_COD_RBT] = 10
	End If
	If [R1_DATI_PEZZO:SERIE_PROFILO]= "AWS70" And [R1_DATI_PEZZO:CODICE_PROFILO] = "358610" Then
		[R1_DATI_PEZZO:R1_COD_RBT] = 11
	End If
	If [R1_DATI_PEZZO:SERIE_PROFILO]= "R72TT" And [R1_DATI_PEZZO:CODICE_PROFILO] = "R72C44" Then
		[R1_DATI_PEZZO:R1_COD_RBT] = 12
	End If
	If [R1_DATI_PEZZO:SERIE_PROFILO]= "R72TT" And [R1_DATI_PEZZO:CODICE_PROFILO] = "R72C41" Then
		[R1_DATI_PEZZO:R1_COD_RBT] = 13
	End If
	If [R1_DATI_PEZZO:SERIE_PROFILO]= "R72TT" And [R1_DATI_PEZZO:CODICE_PROFILO] = "R72C45" Then
		[R1_DATI_PEZZO:R1_COD_RBT] = 14
	End If
	If [R1_DATI_PEZZO:SERIE_PROFILO]= "R72TT" And [R1_DATI_PEZZO:CODICE_PROFILO] = "R72C113" Then
		[R1_DATI_PEZZO:R1_COD_RBT] = 15
	End If
	If [R1_DATI_PEZZO:SERIE_PROFILO]= "AWS90" And [R1_DATI_PEZZO:CODICE_PROFILO] = "441050" Then
		[R1_DATI_PEZZO:R1_COD_RBT] = 16
	End If
	If [R1_DATI_PEZZO:SERIE_PROFILO]= "AWS90" And [R1_DATI_PEZZO:CODICE_PROFILO] = "441780" Then
		[R1_DATI_PEZZO:R1_COD_RBT] = 17
	End If
End Sub


Sub ResetDatiPezzoMissione(daQuadra As Integer)
	'aggiungere tutte le altre variabili dimensionali
	'per comodità uso la variabile R1_DATI_PEZZO che ha stesso tipo di Q1_PEZZO_DISP e Q2_PEZZO_DISP
	'e copio tutti valori dei membri con un ciclo
	Dim varnameQuadra As String
	Dim varnameR1 As String

	Dim objR1 As DBVarObjCmdTarget
	Dim objPezzo As DBVarObjCmdTarget
	Dim MemberR1 As DBVarObjCmdTarget
	Dim MemberQuadra As DBVarObjCmdTarget

	Dim membCount As Integer	'contatore dei membri
	Dim et As movicon.eVariableType
	varnameQuadra = IIf(daQuadra = 1, "Q1_PEZZO_DISP", "Q2_PEZZO_DISP")

	objPezzo = GetVariableObject(varnameQuadra)
	objR1 = GetVariableObject("R1_DATI_PEZZO")

	membCount = 0	'inizializzo a 0

	MemberQuadra 	= objPezzo.GetMemberObjectFromIndex(membCount)
	MemberR1 		= objR1.GetMemberObjectFromIndex(membCount)

	While Not MemberQuadra Is Nothing
		'DebugMsg 		"ResetDatiPezzoMissione() -&gt; MemberQuadra name = " 	&amp; MemberQuadra.GetName 	&amp; "; value = " &amp; CStr(MemberQuadra.Value) 	&amp; "; Tipo = " &amp; CStr(MemberQuadra.GetType())
		'DebugMsg 		"ResetDatiPezzoMissione() -&gt; MemberR1 name = " 		&amp; MemberR1.GetName 		&amp; "; value = " &amp; CStr(MemberR1.Value) 		&amp; "; Tipo = " &amp; CStr(MemberR1.GetType())
		'Debug.Print 	"ResetDatiPezzoMissione() -&gt; MemberQuadra name = " 	&amp; MemberQuadra.GetName 	&amp; "; value = " &amp; CStr(MemberQuadra.Value) 	&amp; "; Tipo = " &amp; CStr(MemberQuadra.GetType())
		'Debug.Print 	"ResetDatiPezzoMissione() -&gt; MemberR1 name = " 		&amp; MemberR1.GetName 		&amp; "; value = " &amp; CStr(MemberR1.Value) 		&amp; "; Tipo = " &amp; CStr(MemberR1.GetType())

		et = MemberR1.GetType()
		Select Case et
			Case movicon.eVariableType.enum_VAR_TYPE_BIT
				MemberR1.Value 		= False
				MemberQuadra.Value 	= False

			Case movicon.eVariableType.enum_VAR_TYPE_BYTE _
				, movicon.eVariableType.enum_VAR_TYPE_DOUBLE _
				, movicon.eVariableType.enum_VAR_TYPE_DWORD _
				, movicon.eVariableType.enum_VAR_TYPE_FLOAT _
				, movicon.eVariableType.enum_VAR_TYPE_SIGNBYTE _
				, movicon.eVariableType.enum_VAR_TYPE_SIGNDWORD _
				, movicon.eVariableType.enum_VAR_TYPE_SIGNWORD _
				, movicon.eVariableType.enum_VAR_TYPE_WORD

				MemberR1.Value 		= 0
				MemberQuadra.Value 	= 0

			Case movicon.eVariableType.enum_VAR_TYPE_STRING
				MemberR1.Value 		= ""
				MemberQuadra.Value 	= ""
			Case Else
				'tipo non resettabile :movicon.eVariableType.enum_VAR_TYPE_ARRAY movicon.eVariableType.enum_VAR_TYPE_E_UNKNOWN movicon.eVariableType.enum_VAR_TYPE_STRUCT
		End Select

		membCount = membCount + 1
		MemberQuadra 	= objPezzo.GetMemberObjectFromIndex(membCount)
		MemberR1 		= objR1.GetMemberObjectFromIndex(membCount)
	End While
	MemberQuadra 	= Nothing
	MemberR1 		= Nothing
	objPezzo 		= Nothing
	objR1 			= Nothing
End Sub

Sub AggiornaPosizioniEstrattoriES1(connectionString As String )
	AggiornaPosizioneEstrattore(1 , 1,connectionString)
	AggiornaPosizioneEstrattore(2 , 1,connectionString)
End Sub

Sub AggiornaPosizioneEstrattore(mag As Integer, estr As Integer, connectionString As String )
	Dim varEstrattore As String
	Dim varEstrattoreOld As String
	Dim cass As Integer
	Dim cassOld As Integer
	Dim query As String
	Dim ret As Integer

	varEstrattore 		= "MAG" &amp; CStr(mag) &amp; "_ES" &amp; CStr(estr) &amp; "_ACT"
	varEstrattoreOld 	= "MAG" &amp; CStr(mag) &amp; "_ES" &amp; CStr(estr) &amp; "_ACT_OLD"

	cass 		= GetVariableValue(varEstrattore 		&amp; ":ID_CASSETTO")
	cassOld 	= GetVariableValue(varEstrattoreOld 	&amp; ":ID_CASSETTO")

	If (cass &lt;&gt; cassOld) Then
		'devo aggiornare il DB

		'per prima cosa metto dentro eventuali pezzi che sono nell'estrattore
		query = "UPDATE `gualini`.`cassetto` " &amp; _
			"Set " &amp; _
			"`POSIZIONE` =  " 			&amp; CStr(0) 	&amp; _
			" WHERE "	&amp; _
			"`POSIZIONE` =  " 						&amp; CStr(estr) &amp; " And " &amp; _
			"`magazzino_ID_MAGAZZINO` =  " &amp; CStr(mag) &amp; _
			";"

		ret = SqlExecuteNonQuery(MySqlConnectionString, query)
		If ret &lt; 0 Then
			LogMsg		"AggiornaPosizioneEstrattore() -&gt; SqlExecuteNonQuery ERROR: errorcode = " &amp; CStr(ret)	&amp; "; query= " &amp; query &amp; ";"
		ElseIf ret = 0 Then
			LogMsg		"AggiornaPosizioneEstrattore() -&gt; SqlExecuteNonQuery no Row updated " 	&amp; CStr(ret)	&amp; "; query= " &amp; query &amp; ";"
		ElseIf ret &gt; 0 Then
			LogMsg		"AggiornaPosizioneEstrattore() -&gt; SqlExecuteNonQuery NumRow  = " &amp; CStr(ret)	&amp; "; query= " &amp; query &amp; ";"
		End If

		'poi metto fuori il pezzo che è realmente nell'estrattore, se ce ne è uno
		If cass &gt; 0 Then
			query = "UPDATE `gualini`.`cassetto` " &amp; _
				"Set " &amp; _
				"`POSIZIONE` =  " 			&amp; CStr(estr) 	&amp; _
				" WHERE "	&amp; _
				"`ID_CASSETTO` =  " 					&amp; CStr(cass) &amp; " And " &amp; _
				"`magazzino_ID_MAGAZZINO` =  " &amp; CStr(mag) &amp; _
				";"

			ret = SqlExecuteNonQuery(MySqlConnectionString, query)
			If ret &lt; 0 Then
				LogMsg		"AggiornaPosizioneEstrattore() -&gt; SqlExecuteNonQuery ERROR: errorcode = " &amp; CStr(ret)	&amp; "; query= " &amp; query &amp; ";"
			ElseIf ret = 0 Then
				LogMsg		"AggiornaPosizioneEstrattore() -&gt; SqlExecuteNonQuery no Row updated " 	&amp; CStr(ret)	&amp; "; query= " &amp; query &amp; ";"
			ElseIf ret &gt; 0 Then
				LogMsg		"AggiornaPosizioneEstrattore() -&gt; SqlExecuteNonQuery NumRow  = " &amp; CStr(ret)	&amp; "; query= " &amp; query &amp; ";"
			End If
		End If


		'alla fine aggiorno la variabile Old
		AggiornaMembri(varEstrattore, varEstrattoreOld)
	End If

End Sub

Sub ProcessaCodaEstrattori_ZONA_R1()

	Dim tmpEs As stEstrattore
	Dim strEs As String
	Dim strPeekEs As String

	Dim enableLogMsg_old As Boolean

	'abilito LogMsg
	 enableLogMsg_old = enableLogMsg
	 enableLogMsg = True

	If codaMAG1_ES1.Count &gt; 0 Then
		If Not [MAG1_ES1_RIK:STROBE] _
				And [MAG1_ES1_ACT:PRONTO] _
				And Not [MAG1_ES1_ACT:BUSY] _
				And ( [MAG1_ES1_ACT:DEPO] Or [MAG1_ES1_ACT:ID_CASSETTO] = 0 Or [MAG1_ES1_ACT:NOME_PEZZO_UNICO] = "qrt_succ" Or [MAG1_ES1_ACT:NOME_PEZZO_UNICO] = "") Then

				If codaMAG1_ES1.Count &gt; 0 Then
					LogMsg("ProcessaCodaEstrattori_ZONA_R1() -&gt; codaMAG1_ES1 -&gt; count = " &amp; CStr(codaMAG1_ES1.Count) &amp; "; peek = " &amp; codaMAG1_ES1.Peek())
				End If

				strEs = codaMAG1_ES1.Dequeue()

				'dopo ave estratto l'lelemento guardo se ne sono presenti altri uguali a quello appena letto
				If codaMAG1_ES1.Count &gt; 0 Then
					strPeekEs = codaMAG1_ES1.Peek()
					While (strEs = strPeekEs)
						LogMsg("ProcessaCodaEstrattori_ZONA_R1() -&gt; DOPPIO VALORE!!; strEs = " &amp; strEs &amp; "codaMAG1_ES1 -&gt; count = " &amp; CStr(codaMAG1_ES1.Count) &amp; "; peek = " &amp; strPeekEs)
						codaMAG1_ES1.Dequeue()
						If codaMAG1_ES1.Count &gt; 0 Then
							strPeekEs = codaMAG1_ES1.Peek()
						Else
							strPeekEs = ""
						End If
					End While
				End If
				DebugMsg("ProcessaCodaEstrattori_ZONA_R1() -&gt;codaMAG1_ES1.Count = " &amp; CStr(codaMAG1_ES1.Count) &amp; " ;  Deserializza(" &amp; strEs &amp;")")
				Deserializza_stEstrattore(tmpEs, strEs)

				'guardo se ho in coda valori uguali
				'TODO

				'passo a interfaccia
				loc_MAG1_ES1_CountCoda = codaMAG1_ES1.Count

				[MAG1_ES1_RIK:ID_CASSETTO] 				= tmpEs.ID_CASSETTO
				[MAG1_ES1_RIK:ID_QUARTINA] 				= tmpEs.ID_QUARTINA
				[MAG1_ES1_RIK:NOME_PEZZO_UNICO] 		= tmpEs.NOME_PEZZO_UNICO
				[MAG1_ES1_RIK:POSIZIONE] 				= tmpEs.POSIZIONE
				[MAG1_ES1_RIK:PRONTO] 					= tmpEs.PRONTO
				[MAG1_ES1_RIK:DEPO] 					= tmpEs.DEPO
				[MAG1_ES1_RIK:STROBE] 					= tmpEs.STROBE

		End If
	End If

	If codaMAG2_ES1.Count &gt; 0 Then
		If Not [MAG2_ES1_RIK:STROBE] _
				And [MAG2_ES1_ACT:PRONTO] _
				And Not [MAG2_ES1_ACT:BUSY] _
				And ( [MAG2_ES1_ACT:DEPO] Or [MAG2_ES1_ACT:ID_CASSETTO] = 0  Or [MAG2_ES1_ACT:NOME_PEZZO_UNICO] = "qrt_succ"  Or [MAG2_ES1_ACT:NOME_PEZZO_UNICO] = "") Then

				If codaMAG2_ES1.Count &gt; 0 Then
					LogMsg("ProcessaCodaEstrattori_ZONA_R1() -&gt; codaMAG2_ES1 -&gt; count = " &amp; CStr(codaMAG2_ES1.Count) &amp; "; peek = " &amp; codaMAG2_ES1.Peek())
				End If

				strEs = codaMAG2_ES1.Dequeue()

				'dopo ave estratto l'lelemento guardo se ne sono presenti altri uguali a quello appena letto
				If codaMAG2_ES1.Count &gt; 0 Then
					strPeekEs = codaMAG2_ES1.Peek()
					While (strEs = strPeekEs)
						LogMsg("ProcessaCodaEstrattori_ZONA_R1() -&gt; DOPPIO VALORE!!; strEs = " &amp; strEs &amp; "codaMAG2_ES1 -&gt; count = " &amp; CStr(codaMAG2_ES1.Count) &amp; "; peek = " &amp; strPeekEs)
						codaMAG2_ES1.Dequeue()
						If codaMAG2_ES1.Count &gt; 0 Then
							strPeekEs = codaMAG2_ES1.Peek()
						Else
							strPeekEs = ""
						End If
					End While
				End If
				DebugMsg("ProcessaCodaEstrattori_ZONA_R1() -&gt;codaMAG2_ES1.Count = " &amp; CStr(codaMAG2_ES1.Count) &amp; " ;  Deserializza(" &amp; strEs &amp;")")
				Deserializza_stEstrattore(tmpEs, strEs)

				'passo a interfaccia
				loc_MAG2_ES1_CountCoda = codaMAG2_ES1.Count

				[MAG2_ES1_RIK:ID_CASSETTO] 				= tmpEs.ID_CASSETTO
				[MAG2_ES1_RIK:ID_QUARTINA] 				= tmpEs.ID_QUARTINA
				[MAG2_ES1_RIK:NOME_PEZZO_UNICO] 		= tmpEs.NOME_PEZZO_UNICO
				[MAG2_ES1_RIK:POSIZIONE] 				= tmpEs.POSIZIONE
				[MAG2_ES1_RIK:PRONTO] 					= tmpEs.PRONTO
				[MAG2_ES1_RIK:DEPO] 					= tmpEs.DEPO
				[MAG2_ES1_RIK:STROBE] 					= tmpEs.STROBE

		End If
	End If

	'riassegno valore precedente a enableLogMsg
	enableLogMsg = enableLogMsg_old
End Sub


Function SqlExecuteNonQuery(connectionString As String, query As String) As Integer
	'ExecuteNonQuery used for executing queries that does not return any data. It is used to execute the sql statements like update, insert, delete etc.
	'ExecuteNonQuery executes the command and returns the number of rows affected

    Dim commandText As String
    Dim excp As Boolean
    Dim rCount As Integer

    Const ERR_GENERICO As Integer = -1 					'ERRORE GENERICO
    Const ERR_GENERIC_EXCEPION As Integer = -101	 	'ERRORE eccezzione generica
    Const ERR_ODBC_EXCEPTION As Integer = -102	 		'ERRORE ecezzione ODBC

    SqlExecuteNonQuery = ERR_GENERICO	'inizializzzo a ERR_GENERICO

	commandText = query
	excp = False
	rCount = 0
	Try
        Using MyConnection As New System.Data.Odbc.OdbcConnection(connectionString)
            MyConnection.Open()

            DebugMsg "GestioneZonaR1.movbas -&gt; SqlExecuteNonQuery(); commandText = " &amp; commandText

            Using MyCommand As New OdbcCommand()
				MyCommand.Connection = MyConnection
	            MyCommand.CommandText = commandText
	            rCount = MyCommand.ExecuteNonQuery()
				Debug.Print	"rCout = MyCommand.ExecuteNonQuery() = " &amp; rCount
			End Using	'MyCommand.Dispose
        End Using	'MyConnection.Close

	  'Catch program exception
	Catch MyException As Exception
		excp = True
		DebugMsg(MyException.ToString)
		MsgBox("GestioneZonaR1.movbas -&gt; SqlExecuteNonQuery() - ERRORE: Exception." &amp; vbCrLf &amp; _
					 MyException.ToString &amp; ".")
		LogMsg(" SqlExecuteNonQuery() - ERRORE: Exception."  &amp; _
					 MyException.ToString &amp; ".")

		'alzare alarme
		alm_ZonaR1_ODBC_txt = "ERR_GENERIC_EXCEPION" &amp; " -- GestioneZonaR1.movbas -&gt; SqlExecuteNonQuery() - ERRORE: Exception."  &amp; _
					 MyException.ToString &amp; "." 'ERR_GENERIC_EXCEPION 'ERRORE eccezzione generic
		alm_ZonaR1_ODBC = True
		SqlExecuteNonQuery = ERR_GENERIC_EXCEPION
		'Exit Function

	  'Catch ODBC Exception
	Catch MyOdbcException As OdbcException
		excp = True
		DebugMsg(MyOdbcException.ToString)
		MsgBox("GestioneZonaR1.movbas -&gt; SqlExecuteNonQuery() - ERRORE ODBC: OdbcException." &amp; vbCrLf &amp; _
					MyOdbcException.ToString  &amp; ".")
		LogMsg("SqlExecuteNonQuery() - ERRORE ODBC: OdbcException."  &amp; _
					MyOdbcException.ToString  &amp; ".")
		'TODO
		'alzare alarme
		alm_ZonaR1_ODBC_txt = "ERR_ODBC_EXCEPTION" &amp; " -- GestioneZonaR1.movbas -&gt; SqlExecuteNonQuery() - ERRORE: Exception."  &amp; _
					 MyException.ToString &amp; "." 'ERR_ODBC_EXCEPTION 'ERRORE ecezzione ODBC
		alm_ZonaR1_ODBC = True
		SqlExecuteNonQuery = ERR_ODBC_EXCEPTION
	Finally
		If excp Then
			Exit Function
		End If
    End Try

    'tutto Ok
    SqlExecuteNonQuery = rCount
End Function

Sub EliminaFileDaQuadra(daQuadra As Integer)
	Dim fullNameDataFile As String
	Dim path As String
	Dim varname As String

	Select Case daQuadra
		Case 1:
			path = loc_Q1_path
			varname = "Q1_PEZZO_DISP"
			If loc_QuadraDataFile &lt;&gt; "" And loc_Q1_path &lt;&gt; "" Then
				fullNameDataFile = path + loc_QuadraDataFile
			Else
				fullNameDataFile = "\\10.200.200.31\l46\COMAR\DATA.TXT"
			End If
		Case 2:
			path = loc_Q2_path
			varname = "Q2_PEZZO_DISP"
			If loc_QuadraDataFile &lt;&gt; "" And loc_Q2_path &lt;&gt; "" Then
				fullNameDataFile = path + loc_QuadraDataFile
			Else
				fullNameDataFile = "\\10.200.200.32\l46\COMAR\DATA.TXT"
			End If
		Case Else
			Throw New System.Exception("GestioneZonaR1.movbas -&gt; EliminaFileDaQuadra() ECCEZZIONE: parametro daQuadra non ammesso: " &amp; CStr(daQuadra) &amp; ".")
	End Select

	'fullNameDataFile = path &amp; GetVariableValue(varname &amp; ":NOME_PEZZO_UNICO")

	'guardo il file esiste
	Try
		'Using fi As New System.IO.FileInfo(nomeFileFull)
		Dim fi As New System.IO.FileInfo(fullNameDataFile)
			If fi.Exists Then
				'fi.Delete()

				Dim thefile As String = fullNameDataFile
			    Dim lines() As String = System.IO.File.ReadAllLines(fullNameDataFile)

			    lines(0) = "0"
			    System.IO.File.WriteAllLines(fullNameDataFile, lines)

			Else
				LogMsg("EliminaFileDaQuadra() File non più esistente. filename:" &amp; fullNameDataFile)
			End If
		'End Using

	Catch  e As Exception
        LogMsg("EliminaFileDaQuadra() ECCEZZIONE:" &amp; e.Message)
	Finally

		fi = Nothing

	End Try


End Sub

Sub EliminaFileDaQuadraOld(daQuadra As Integer, nomePezzo As String)
	Dim nomeFileFull As String
	Dim path As String
	Dim varname As String

	Select Case daQuadra
		Case 1:
			path = loc_Q1_path
			varname = "Q1_PEZZO_DISP"
		Case 2:
			path = loc_Q2_path
			varname = "Q2_PEZZO_DISP"
		Case Else
			Throw New System.Exception("GestioneZonaR1.movbas -&gt; EliminaFileDaQuadra() ECCEZZIONE: parametro daQuadra non ammesso: " &amp; CStr(daQuadra) &amp; ".")
	End Select

	nomeFileFull = path &amp; GetVariableValue(varname &amp; ":NOME_PEZZO_UNICO")

	'guardo il file esiste
	Try
		'Using fi As New System.IO.FileInfo(nomeFileFull)
		Dim fi As New System.IO.FileInfo(nomeFileFull)
			If fi.Exists Then
				fi.Delete()
			Else
				LogMsg("EliminaFileDaQuadra() File non più esistente. filename:" &amp; nomeFileFull)
			End If
		'End Using

	Catch  e As Exception
        LogMsg("EliminaFileDaQuadra() ECCEZZIONE:" &amp; e.Message)
	Finally

	End Try


End Sub

Sub EliminaFileSimulazione(daQuadra As Integer)
	Dim nomeFileFull As String
	Dim path As String
	Dim varname As String

	Select Case daQuadra
		Case 1:
			path = loc_Q1_path
			varname = "Q1_PEZZO_DISP"
		Case 2:
			path = loc_Q2_path
			varname = "Q2_PEZZO_DISP"
		Case Else
			Throw New System.Exception("GestioneZonaR1.movbas -&gt; EliminaFileSimulazione() ECCEZZIONE: parametro daQuadra non ammesso: " &amp; CStr(daQuadra) &amp; ".")
	End Select

	'elimino tutti i file nella cartella
	Dim di As IO.DirectoryInfo = New IO.DirectoryInfo(path)
	Try
		For Each File As IO.FileInfo In di.GetFiles()
            File.Delete()
        Next
	Catch  e As Exception
        LogMsg("EliminaFileSimulazione() ECCEZZIONE:" &amp; e.Message)
	Finally
		di = Nothing
	End Try


End Sub

Sub AggiornaMembri(source As String, dest As String)
	Dim objDest As DBVarObjCmdTarget
	Dim objSource As DBVarObjCmdTarget
	Dim MemberDest As DBVarObjCmdTarget
	Dim MemberSource As DBVarObjCmdTarget

	Dim memberCount As Integer	'contatore dei membri

	Dim etSource As movicon.eVariableType
	Dim etDest As movicon.eVariableType

	DebugMsg("AggiornaMembri(source As String, dest As String) : " &amp; source &amp; "," &amp; dest)
	objSource 	= GetVariableObject(source)
	objDest 	= GetVariableObject(dest)

	If  objSource Is Nothing Or  objDest Is Nothing Then
		Throw New System.Exception("GestioneZonaR1.movbas -&gt; AggiornaMembri() objSource Is Nothing Or  objDest Is Nothing")
	End If

	'guardo se le var hanno tipo identico e sono struct Var
	etSource 	= objSource.GetType()
	etDest 		= objDest.GetType()

	If Not etSource = movicon.eVariableType.enum_VAR_TYPE_STRUCT Then
		Throw New System.Exception("GestioneZonaR1.movbas -&gt; AggiornaMembri() Not etSource = movicon.eVariableType.enum_VAR_TYPE_STRUCT")
		Exit Sub
	End If
	If Not etDest = movicon.eVariableType.enum_VAR_TYPE_STRUCT Then
		Throw New System.Exception("GestioneZonaR1.movbas -&gt; AggiornaMembri() Not etDest = movicon.eVariableType.enum_VAR_TYPE_STRUCT")
		Exit Sub
	End If

	memberCount = 0	'inizializzo a 0
	MemberSource 	= objSource.GetMemberObjectFromIndex(memberCount)
	MemberDest 		= objDest.GetMemberObjectFromIndex(memberCount)

	If (etSource = etDest) Then
		While (Not MemberSource Is Nothing) And (Not MemberDest Is Nothing )
			'DebugMsg "AggiorrnaMembri() -&gt; MemberSource name = " 	&amp; MemberSource.GetName 	&amp; "; value = " &amp; CStr(MemberSource.Value) 	&amp; "; Tipo = " &amp; CStr(MemberSource.GetType())
			'DebugMsg "AggiorrnaMembri() -&gt; MemberDest name = " 		&amp; MemberDest.GetName 	&amp; "; value = " &amp; CStr(MemberDest.Value) 	&amp; "; Tipo = " &amp; CStr(MemberDest.GetType())

			etSource 	= MemberSource.GetType()
			etDest 		= MemberDest.GetType()

			If (etSource = etDest) Then
				MemberDest.Value = MemberSource.Value
			End If

			memberCount = memberCount + 1
			MemberSource 	= objSource.GetMemberObjectFromIndex(memberCount)
			MemberDest 		= objDest.GetMemberObjectFromIndex(memberCount)
		End While

	End If

	MemberSource 	= Nothing
	MemberDest 		= Nothing
	objSource 		= Nothing
	objDest 		= Nothing

End Sub

Sub ResetDatiMembriStruttura(varname As String)
	'metto a 0 i membri di tipo numerico
	'a "" i membri stringa
	'a false i bit

	Dim objVar As DBVarObjCmdTarget
	Dim MemberVar As DBVarObjCmdTarget

	Dim mCount As Integer	'contatore dei membri
	Dim et As movicon.eVariableType

	objVar = GetVariableObject(varname)

	et = objVar.GetType()

	If et &lt;&gt; movicon.eVariableType.enum_VAR_TYPE_STRUCT Then
		DebugMsg 		"ATTENZIONE!!! ResetDatiMembriStruttura() -&gt; Variabile = " 	&amp; varname 	&amp; " NON è una Struct."
		Exit Sub
	End If

	mCount = 0	'inizializzo a 0

	MemberVar 	= objVar.GetMemberObjectFromIndex(mCount)

	While Not MemberVar Is Nothing
		'DebugMsg 		"ResetDatiMembriStruttura() -&gt; MemberVar name = " 	&amp; MemberVar.GetName 	&amp; "; value = " &amp; CStr(MemberVar.Value) 	&amp; "; Tipo = " &amp; CStr(MemberVar.GetType())
		'Debug.Print 	"ResetDatiMembriStruttura() -&gt; MemberVar name = " 	&amp; MemberVar.GetName 	&amp; "; value = " &amp; CStr(MemberVar.Value) 	&amp; "; Tipo = " &amp; CStr(MemberVar.GetType())

		et = MemberVar.GetType()
		Select Case et
			Case movicon.eVariableType.enum_VAR_TYPE_BIT
				MemberVar.Value 	= False

			Case movicon.eVariableType.enum_VAR_TYPE_BYTE _
				, movicon.eVariableType.enum_VAR_TYPE_DOUBLE _
				, movicon.eVariableType.enum_VAR_TYPE_DWORD _
				, movicon.eVariableType.enum_VAR_TYPE_FLOAT _
				, movicon.eVariableType.enum_VAR_TYPE_SIGNBYTE _
				, movicon.eVariableType.enum_VAR_TYPE_SIGNDWORD _
				, movicon.eVariableType.enum_VAR_TYPE_SIGNWORD _
				, movicon.eVariableType.enum_VAR_TYPE_WORD

				MemberVar.Value 	= 0

			Case movicon.eVariableType.enum_VAR_TYPE_STRING
				MemberVar.Value 	= ""
			Case Else
				'tipo non resettabile :movicon.eVariableType.enum_VAR_TYPE_ARRAY movicon.eVariableType.enum_VAR_TYPE_E_UNKNOWN movicon.eVariableType.enum_VAR_TYPE_STRUCT
		End Select

		mCount = mCount + 1
		MemberVar 	= objVar.GetMemberObjectFromIndex(mCount)
	End While
	MemberVar 	= Nothing
	objVar 		= Nothing
End Sub

Function PezzoPiuVecchio() As Integer
	PezzoPiuVecchio = 0

	If [Q1_Out:PezzoPronto] And [Q2_Out:PezzoPronto] Then
		'ho due pezzi pronti allora prendo quello che ha il timestamp più vecchio
		Dim objRet1 As DBVarObjCmdTarget
		Dim dTimeStamp1 As Date
		Dim nMS1 As Integer
		Dim dt1 As Double

		Dim objRet2 As DBVarObjCmdTarget
		Dim dTimeStamp2 As Date
		Dim nMS2 As Integer
		Dim dt2 As Double

		Dim differenza As Double

		objRet1 = GetVariableObject("Q1_Out:PezzoPronto")
		dTimeStamp1 = objRet1.GetTimeStamp()
		nMS1 = objRet1.GetTimeStampMs()
		dt1 = CLng(dTimeStamp1) * 1000
		dt1 = dt1 + nMS1

		objRet2 = GetVariableObject("Q2_Out:PezzoPronto")
		dTimeStamp2 = objRet2.GetTimeStamp()
		nMS2 = objRet2.GetTimeStampMs()
		dt2 = CLng(dTimeStamp2) * 1000
		dt2 = dt2 + nMS2

		differenza = dt1 - dt2
		DebugMsg "PezzoPiuVecchio() -&gt; differenza = dt1-dt2 = " &amp; CStr(dt1 -dt2)

		If differenza &gt; 0 Then
			'pezzo da Q1 più recente
			PezzoPiuVecchio = 2	'prendo da Q2 perchè più vecchio
		Else
			PezzoPiuVecchio = 1	'prendo da Q1 perchè più vecchio
		End If

		objRet1 = Nothing
		objRet2 = Nothing
	Else
		'ho solo un pezzo pronto o nessuno
		If [Q1_Out:PezzoPronto] Then
			PezzoPiuVecchio = 1
		End If
		If [Q2_Out:PezzoPronto] Then
			PezzoPiuVecchio = 2
		End If
		'se nessun pezzo pronto PezzoPiuVecchio = 0
	End If

End Function


Function SuperatoTimeout(ByRef lastcheck As Double, tout As Integer) As Boolean
	Dim tempo As Double
	tempo = Abs(lastcheck - Timer())
	If tempo &gt; tout Then
		SuperatoTimeout = True
	Else
		SuperatoTimeout = False
	End If
	DoEvents

End Function


Sub DebugMsg(msg As String)
	Dim prefix As String
	Dim fullmsg As String
	If [loc_ImpostazioniImpianto:AbilitaDbgMsg_ZonaR1] Then
		prefix = "GestioneZonaR1.movbas -&gt; "
		fullmsg = prefix &amp; msg
		If oldDebugMsg &lt;&gt; fullmsg Then
			Debug.Print fullmsg
			oldDebugMsg = fullmsg
		End If

	End If
End Sub

Sub LogMsg(msg As String)
	If enableLogMsg Then
		Dim prefix As String
		prefix = "GestioneZonaR1.movbas -&gt; "
		Debug.Print prefix &amp; msg
	End If
End Sub



</ScriptCode>
<BreakPoints xsi:type="xsd:base64Binary">AiDQAoED
</BreakPoints>
<Mode RunAtServer="1" UseUIInterface="1" SeparateThread="1" UseItsTrace="1" ModalDialogs="0"/>
<Execution ThreadPriority="0" StatusVariable="statoScriptGestioneZonaR1" MaxInstances="1" SleepExecution="100" SyncroScriptTimeout="5000"/>
</MovResource>
