<?xml version="1.0" encoding="ISO-8859-1" ?>
<MovResource xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
<ScriptCode StartSel="41839" SelLength="0" OutStatusBar="1" OutLog="1" OutPrinter="1">'#Reference #System.Core.resources, Version=3.5.0.0, Culture=it, PublicKeyToken=b77a5c561934e089, processorArchitecture=MSIL
'#Reference #System.Core, Version=3.5.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089, processorArchitecture=MSIL
'#Reference #System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089, processorArchitecture=MSIL
'#Reference #System.Data, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089, processorArchitecture=x86
'#Language "WWB.NET"

'Option Explicit

Imports System
Imports System.IO
Imports System.Collections
Imports System.Collections.Generic
Imports System.Collections.ObjectModel
Imports System.Data.Odbc

Public Structure DSnMembers
    Dim DSn As String
    Dim Uid As String
    Dim Pwd As String
End Structure

Public Structure PosQuartina
    Dim mag As Integer
    Dim cass As Integer
End Structure

Const TOUT_DISPONIBILE 	As Integer 	= 1000
Const TOUT_STEP			As Integer	= 2000

'Dim q As System.Collections.Queue(Of Integer)= New System.Collections.Queue(Of Integer)
Dim codaGiostra1 As System.Collections.Queue= New System.Collections.Queue()

Dim MysSqlConnectionString As String
Dim disponibileLastCheck As Double

'Sub Main2
'	Dim F As Object
'    F = Dir("C:\SupervisioneGualini2_C02515_Varie\NoteScamibioDati\R_ note su scambio dati\test\*.*")
'    While F &lt;&gt; ""
'        Debug.Print F
'        F = Dir()
'    End While
'End Sub

Sub Main()
	'#################################
	'CHIAMATE PER DEBUG
	'ResetDatiPezzoMissione(1)
	'#####################################


	Dim leggiDaQuadra As Integer
	Dim quartina As String
	Dim quartina_successiva As String
	Dim posizione As PosQuartina

	Dim ret As Integer

	Dim varname_pezzo As String
	Dim varname_missioneDaQuadra As String
	Dim varname_estrattore As String

	Dim missioneNum As Integer
	Dim numCassetti As Integer
	Dim valVerificaAttendiCassettoDisponibile As Integer

	Dim stepTout As Double

	codaGiostra1.Enqueue(10)
	codaGiostra1.Enqueue(20)
	codaGiostra1.Enqueue(30)

	Debug.Print "elem: " + Convert.ToString(codaGiostra1.count())

	MysSqlConnectionString = "server=localhost;user=root;database=gualini;port=3306;password=co.mar;"
	'Connector/MySQL ODBC 5.3 ANSI Driver connection string
    MysSqlConnectionString = "DRIVER={MySQL ODBC 5.3 ANSI Driver};" &amp; _
      "SERVER=localhost;" &amp; _
      "DATABASE=gualini;" &amp; _
      "UID=root;" &amp; _
      "PASSWORD=co.mar;" &amp; _
      "OPTION=3;"

    'inizializzo alcune variabili
    [MAG1_ES1_ACT_OLD:ID_CASSETTO] = 16500
    [MAG2_ES1_ACT_OLD:ID_CASSETTO] = 16500

'#####TODO DEBUG
'###########################
	GoTo AA
'############################

	For Each element As Integer In codaGiostra1
		Debug.Print "elem: " + Convert.ToString(element)
	Next

	Dim myint As Integer
	While codaGiostra1.Count &gt; 0
		myint = codaGiostra1.Dequeue()
		Debug.Print "myint: " + Convert.ToString(myint)
	End While


'############STATE MACHINE############

	'inizializzo variabile di stato del ciclo
	StatoCicloCarico = 100
AA:
[Q1_In:PezzoPronto] = True
Wait 1
[Q2_In:PezzoPronto] = True
StatoCicloCarico = 1000
loc_Q1_path ="C:\SupervisioneGualini2_C02515_Varie\NoteScamibioDati\R_ note su scambio dati\test\Q1\"
loc_Q2_path ="C:\SupervisioneGualini2_C02515_Varie\NoteScamibioDati\R_ note su scambio dati\test\Q2\"
	Do
		'azioni da fare tutti i cicli

		'gestisco eventuali aggiornamentii da fare al DB per le posizioni degli estrattori
		AggiornaPosizioniEstrattoriES1(MysSqlConnectionString)

		Select Case StatoCicloCarico

			Case 100	'StatoIniziale
				DebugMsg "StatoCicloCarico = 100	'StatoIniziale"
				StatoCicloCarico = 1000		'AttesaPezzi

			Case 1000	'AttesaPezzi
				DebugMsg "StatoCicloCarico = 1000	'AttesaPezzi"
				'inizio a scorrere le condizioni di uscita dallo stato
				StatoCicloCarico = 1010	'AttesaPezzi_AssegnaMissioneRobot

			Case 1010	'AttesaPezzi_AssegnaMissioneRobot
				DebugMsg "StatoCicloCarico = 1010	'AttesaPezzi_AssegnaMissioneRobot"
				'guardo se ho una missione assegnabile
				missioneNum = MissioneAssegnabile()
				If missioneNum &gt; 0 Then
					StatoCicloCarico = 4100	'AssegnaMissioneRobot
				Else
					StatoCicloCarico = 1020	'AttesaPezzi_AttendiCassettoDisponibile
				End If

			Case 1020	'AttesaPezzi_AttendiCassettoDisponibile
				DebugMsg "StatoCicloCarico = 1020	'AttesaPezzi_AttendiCassettoDisponibile"
				'guardo se ho un cassetto disponibile da assegnare a pezzo pronto
				valVerificaAttendiCassettoDisponibile = transizioneAttendiCassettoDisponibile() 'serve per non fare il controllo sempre
				'valVerificaAttendiCassettoDisponibile = 0 solo se avevo letto un file della quadra e non avevo cassetti a cui assegnare la quartina
				'valVerificaAttendiCassettoDisponibile &gt; 0 se è passato un tout e non ho ancora assegnato la quartina
				If valVerificaAttendiCassettoDisponibile &gt; 0 Then
					DebugMsg "StatoCicloCarico = 1020	'AttesaPezzi_AttendiCassettoDisponibile &amp; valVerificaAttendiCassettoDisponibile &gt; 0 "
					StatoCicloCarico = 3100	'AttendiCassettoDisponibile
					'AttendiCassettoDisponibile controlla che si sia liberato un cassetto per assegnare il pezzo ad una quartina
				Else
					StatoCicloCarico = 1030	'AttesaPezzi_LeggiFileDaQuadra
				End If

			Case 1030	'AttesaPezzi_LeggiFileDaQuadra
				DebugMsg "StatoCicloCarico = 1030	'AttesaPezzi_LeggiFileDaQuadra"
				'obiettivo: verificare se ci sono file_pezzo da leggere sulle quadra
				'guardo se ho un pezzo pronto di cui non ho letto il file da quadra
				leggiDaQuadra = FileDaLeggere()
				If leggiDaQuadra &gt; 0 Then
					StatoCicloCarico = 2100	'LeggiFileDaQuadra
				Else
					StatoCicloCarico = 1040	'FineMissioneRobot
				End If

			Case 1040	'FineMissioneRobot
				DebugMsg "StatoCicloCarico = 1040	'FineMissioneRobot"
				If [R1_STATUS:FINE_MISSIONE] Then
					StatoCicloCarico = 6100	'FineRobot
				Else
					StatoCicloCarico = 1000	'AttesaPezzi
				End If


			Case 2100	'LeggiFileDaQuadra
				DebugMsg "StatoCicloCarico = 2100	'LeggiFileDaQuadra"
				'obiettivo: reperire le informazini contenute nei file_pezzo forniti dalla quadra. la quadra di riferimento dipende dal valore di leggiDaQuadra
				'Guardo se ho almeno un file da leggere
				If (leggiDaQuadra &gt; 0) Then
					'leggo le info del pezzo da file fornito dalla quadra
					varname_pezzo = LeggiFileDaQuadra(leggiDaQuadra)

					quartina = GetVariableValue(varname_pezzo &amp; ":ID_QUARTINA")
					quartina_successiva = GetVariableValue(varname_pezzo &amp; ":ID_QUARTINA_SUCCESSIVA")

					'verifico se la quartina esiste in magazzino
					posizione = VerificaSeQuartinaEsisteInMagazzino(leggiDaQuadra, quartina, MysSqlConnectionString)

					If posizione.mag &gt; 0 Then
						'la quartina è stata assegnata allora aggiungo la richiesta cassetto alla coda missioni del PLC
						'ho gia memorizzato in VerificaSeQuartinaEsisteInMagazzino magazzinio e cassetto assegnato
						StatoCicloCarico = 2200	'AggiungiMissioneCodaPlc
					Else
						'quartina non esiste allora guardo se ci sono cassetti disponibili nel magazzino di riferimento in base a TipoCarico

						If [loc_ImpostazioniImpianto:TipoCarico] = 0 Then
							'QuadraSuMagazzinoCorrispondente
							numCassetti = CassettiDisponibili(leggiDaQuadra, MysSqlConnectionString)
							If numCassetti &gt; 0 Then
								StatoCicloCarico = 2300	'AssegnaCassettoAllaQuartina
							Else
								StatoCicloCarico = 1000	'AttesaPezzi
							End If
						Else
							'QuadraSuTutto
							numCassetti = CassettiDisponibili(0, MysSqlConnectionString)
							If numCassetti &gt; 0 Then
								StatoCicloCarico = 2300	'AssegnaCassettoAllaQuartina
							Else
								StatoCicloCarico = 1000	'AttesaPezzi
							End If
						End If
					End If
				End If

			Case 2200	'RikCassettoInEstrattorePlc
				DebugMsg "StatoCicloCarico = 2200	'RikCassettoInEstrattorePlc"

				'RikCassettoInEstrattorePlc(posizione.mag, posizione.cass) 'non è necessario passare la quartina perchè è già stata assegnata al cassetto corrispondente
				If posizione.mag = 1 And Not [MAG1_ES1_RIK:STROBE] Then
					[MAG1_ES1_RIK:ID_CASSETTO] 				= posizione.cass
					[MAG1_ES1_RIK:ID_QUARTINA] 				= GetVariableValue(varname_pezzo &amp; ":ID_QUARTINA") 'val di varname_pezzo viene da 	Case 2100	'LeggiFileDaQuadra
					[MAG1_ES1_RIK:STROBE] 					= True
				ElseIf posizione.mag = 2 And Not [MAG2_ES1_RIK:STROBE] Then
					[MAG2_ES1_RIK:ID_CASSETTO] 				= posizione.cass
					[MAG2_ES1_RIK:ID_QUARTINA] 				= GetVariableValue(varname_pezzo &amp; ":ID_QUARTINA") 'val di varname_pezzo viene da 	Case 2100	'LeggiFileDaQuadra
					[MAG2_ES1_RIK:STROBE] 					= True
				ElseIf posizione.mag &lt;&gt; 1 And posizione.mag &lt;&gt; 2 Then
					Throw New System.Exception("GestioneZonaR1.movbas -&gt; Main() ECCEZZIONE: Case 2200 'RikCassettoInEstrattorePlc")
				End If
				StatoCicloCarico = 1000	'AttesaPezzi

			Case 2300	'AssegnaCassettoAllaQuartina
				DebugMsg "StatoCicloCarico = 2300	'AssegnaCassettoAllaQuartina"
				'obiettivo: assegnare un casetto alla quartina. se sono qui sicuramento ho un cassetto disponibile in base al valore di [loc_ImpostazioniImpianto:TipoCarico]
				'assegno il cassetto alla quartina che proviene dalla quadra identificata da leggiDaQuadra
				'dallo step 2100 ho in varname_pezzo il valore della variabile di riferimento per i dati del pezzo

				posizione = AssegnaCassettoAllaQuartina([loc_ImpostazioniImpianto:TipoCarico] _
									, leggiDaQuadra _
									, MysSqlConnectionString _
									, GetVariableValue(varname_pezzo &amp; ":ID_QUARTINA") _
									, GetVariableValue(varname_pezzo &amp; ":TOTALE_PEZZI_QUARTINA") _
									, GetVariableValue(varname_pezzo &amp; ":NOME_COMMESSA") _
									, GetVariableValue(varname_pezzo &amp; ":NUM_SQUADRETTE1") _
									, GetVariableValue(varname_pezzo &amp; ":COD_SQUADRETTA1") _
									, GetVariableValue(varname_pezzo &amp; ":NUM_SQADRETTE2") _
									, GetVariableValue(varname_pezzo &amp; ":COD_SQUADRETTA2") _
									)
				If posizione.mag &gt; 0 And posizione.cass &gt; 0 Then
					StatoCicloCarico = 2200	'RikCassettoInEstrattorePlc
				Else
					Throw New System.Exception("GestioneZonaR1.movbas -&gt; Main() ECCEZZIONE: Case 2300 'AssegnaCassettoAllaQuartina: posizione.mag = " _
							&amp; CStr(posizione.mag) &amp; ": posizione.cass = " &amp; CStr(posizione.cass) &amp; ".")
				End If

			Case 3100	'AttendiCassettoDisponibile
				DebugMsg "StatoCicloCarico = 3100	'AttendiCassettoDisponibile" &amp; "; valVerificaAttendiCassettoDisponibile = " &amp; CStr(valVerificaAttendiCassettoDisponibile)
				'memorizzo da quale quadra proviene il pezzo
				leggiDaQuadra = AttendiCassettoDisponibile()
				If leggiDaQuadra &gt; 0 Then
					StatoCicloCarico = 2300	'AssegnaCassettoAllaQuartina
				Else
					StatoCicloCarico = 1000	'AttesaPezzi
				End If

			Case 4100	'AssegnaMissioneRobot
				DebugMsg "StatoCicloCarico = 4100	'AssegnaMissioneRobot"
				'se sono qui ho tutte le condizioni per assegnare una nuova missione al robot
				'devo capire però quale missione assegnare nel caso in cui ci siano le condizioni per tutte e due le quadre

				If [R1_STATUS:DISPONIBILE] Then
					[R1_STATUS:PZ_DA_QUADRA] = PezzoPiuVecchio()
					varname_missioneDaQuadra = IIf([R1_STATUS:PZ_DA_QUADRA] = 1, "Q1_PEZZO_DISP", "Q2_PEZZO_DISP")

					[R1_STATUS:MAGAZZINO]				= GetVariableValue(varname_missioneDaQuadra &amp; ":MAGAZZINO_ASSEGNATO")
					[R1_STATUS:CASSETTO]				= GetVariableValue(varname_missioneDaQuadra &amp; ":CASSETTO_ASSEGNATO")
					[R1_STATUS:POSIZIONE_PEZZO]			= GetVariableValue(varname_missioneDaQuadra &amp; ":POSIZIONE")
					[R1_STATUS:ID_QUARTINA]				= GetVariableValue(varname_missioneDaQuadra &amp; ":ID_QUARTINA")
					[R1_STATUS:ID_QUARTINA_SUCCESSIVA]	= GetVariableValue(varname_missioneDaQuadra &amp; ":ID_QUARTINA_SUCCESSIVA")

					'aggiungere tutte le altre variabili dimensionali
					'per comodità uso la variabile R1_DATI_PEZZO che ha stesso tipo di Q1_PEZZO_DISP e Q2_PEZZO_DISP
					'e copio tutti valori dei membri con un ciclo

					Dim objR1 As DBVarObjCmdTarget
					Dim objPezzo As DBVarObjCmdTarget
					Dim MemberR1 As DBVarObjCmdTarget
					Dim MemberPezzo As DBVarObjCmdTarget
					objPezzo = GetVariableObject(varname_missioneDaQuadra)
					objR1 = GetVariableObject("R1_DATI_PEZZO")
					Dim mCount As Integer	'contatore dei membri
					mCount = 0	'inizializzo a 0

					MemberPezzo 	= objPezzo.GetMemberObjectFromIndex(mCount)
					MemberR1 		= objR1.GetMemberObjectFromIndex(mCount)
					While Not MemberPezzo Is Nothing
						DebugMsg "StatoCicloCarico = 4100 'AssegnaMissioneRobot -&gt; MemberPezzo name is -&gt; " &amp; MemberPezzo.GetName &amp; "; MemberPezzo value is -&gt; " &amp; CStr(MemberPezzo.Value) '
						DebugMsg "StatoCicloCarico = 4100 'AssegnaMissioneRobot -&gt; MemberR1 name is -&gt; " &amp; MemberR1.GetName &amp; "; MemberR1 value is -&gt; " &amp; CStr(MemberR1.Value) '

						MemberR1.Value = MemberPezzo.Value
						mCount = mCount + 1
						MemberPezzo 	= objPezzo.GetMemberObjectFromIndex(mCount)
						MemberR1 		= objR1.GetMemberObjectFromIndex(mCount)
					End While
					MemberPezzo 	= Nothing
					MemberR1 		= Nothing
					objPezzo 		= Nothing
					objR1 			= Nothing
					
					[R1_STATUS:FINE_MISSIONE] = False	'forzo per sicurezza

				End If
				'alzo il bit al Robot di Strobe missione
				[R1_STATUS:NUOVA_MISSIONE] = True
				StatoCicloCarico = 4200	'AttesaSegnaleRobotOccupato
				stepTout = Now()

			Case 4200	'AttesaSegnaleRobotOccupato
				If SuperatoTimeout(stepTout, TOUT_STEP) Then
					alm_Step_Tout = True
					StatoCicloCarico = 1000	'AttesaPezzi
				End If
				If	Not [R1_STATUS:DISPONIBILE] Then
					alm_Step_Tout = False
					StatoCicloCarico = 1000	'AttesaPezzi
				End If

			Case 6100	'FineRobot
				DebugMsg "StatoCicloCarico = 6100	'FineRobot"
				ret = FineRobot(MysSqlConnectionString)
				If ret &lt;&gt; 0 Then
					'Alzo allarme
					alm_FineRobot = True
					StatoCicloCarico = 1000	'AttesaPezzi
				Else
					StatoCicloCarico = 6200	'VerificaUltimoPezzo
				End If

			Case 6200	'VerificaUltimoPezzo
				DebugMsg "StatoCicloCarico = 6200	'VerificaUltimoPezzo"
					'se ultimo pezzo della quartina faccio rientrare l'estrattore
					If Not [R1_DATI_PEZZO:ULTIMO_PEZZO] Then
						StatoCicloCarico = 6300	'GestisciQuartinaSuccessiva
					Else
						'è ultimo pezzo allora rilevo a quale estrattore è relativo
						varname_estrattore = IIf([R1_DATI_PEZZO:MAGAZZINO_ASSEGNATO] = 1, "MAG1_ES1_RIK", "MAG2_ES1_RIK")
						If Not GetVariableValue(varname_estrattore &amp; ":STROBE") Then
							SetVariableValue(varname_estrattore &amp; ":ID_CASSETTO", 0 )
							SetVariableValue(varname_estrattore &amp; ":ID_QUARTINA", "")

							SetVariableValue(varname_estrattore &amp; ":STROBE",  True)	'do Strobe
							StatoCicloCarico = 6300	'GestisciQuartinaSuccessiva
						End If
					End If

			Case 6300	'GestisciQuartinaSuccessiva
				DebugMsg "StatoCicloCarico = 6300	'GestisciQuartinaSuccessiva"
				'reset dei dati di missione
				If [loc_ImpostazioniImpianto:TipoCarico] = 0 Then
					StatoCicloCarico = 7100	'RilevaCassettoQuartinaSuccessiva
				Else
					'non posso fare l'anticipo delle richieste di cassetto
					StatoCicloCarico = 8100	'ResetDatiPezzoMissione
				End If

			Case 7100	'RilevaCassettoQuartinaSuccessiva
				DebugMsg "StatoCicloCarico = 7100	'RilevaCassettoQuartinaSuccessiva"
				posizione = RilevaCassettoQuartinaSuccessiva(MysSqlConnectionString)
				If (posizione.mag &gt; 0 And posizione.cass &gt; 0) Then
					StatoCicloCarico = 7200	'AggiungiMissioneQuartinaSuccessivaCodaPlc
				Else
					'non ho cassetti disponibili perchè magazzino pieno
					StatoCicloCarico = 8100	'ResetDatiPezzoMissione
				End If


			Case 7200	'AggiungiMissioneQuartinaSuccessivaCodaPlc
				DebugMsg "StatoCicloCarico = 7200	'AggiungiMissioneQuartinaSuccessivaCodaPlc"
				varname_estrattore = IIf([R1_DATI_PEZZO:MAGAZZINO_ASSEGNATO_QRT_SUCCESSIVA] = 1, "MAG1_ES1_RIK", "MAG2_ES1_RIK")
				If Not GetVariableValue(varname_estrattore &amp; ":STROBE") Then
					SetVariableValue(varname_estrattore &amp; ":ID_CASSETTO", [R1_DATI_PEZZO:CASSETTO_ASSEGNATO_QRT_SUCCESSIVA])
					SetVariableValue(varname_estrattore &amp; ":ID_QUARTINA", [R1_DATI_PEZZO:ID_QUARTINA_SUCCESSIVA])

					SetVariableValue(varname_estrattore &amp; ":STROBE",  True)	'do Strobe
					StatoCicloCarico = 8100	'ResetDatiPezzoMissione
				End If

			Case 8100	'ResetDatiPezzoMissione
				DebugMsg "StatoCicloCarico = 8100	'ResetDatiPezzoMissione"
				'occorre eliminare il file dalla quadra
				EliminaFileDaQuadra([R1_STATUS:PZ_DA_QUADRA], [R1_DATI_PEZZO:NOME_PEZZO_UNICO])
				'reset dei valori dei membri che identificano il pezzo
				ResetDatiPezzoMissione([R1_STATUS:PZ_DA_QUADRA])
				StatoCicloCarico = 1000	'AttesaPezzi

			Case Else
				Throw New System.Exception("GestioneZonaR1.movbas -&gt; Main() ECCEZZIONE: StatoCicloCarico valore non ammesso: " &amp; CStr(StatoCicloCarico) &amp; ".")

		End Select

	DoEvents
	Loop Until IsInStoppingMode

End Sub

Function LeggiFileDaQuadra(quadra As Integer) As String
	Dim path As String
	Dim filepath As String
	Dim varname As String
	'Dim quartinaCorrente As String
    'Dim quartinaSuccessiva As String

	Select Case quadra
		Case 1:
			path = loc_Q1_path
			varname = "Q1_PEZZO_DISP"
			LeggiFileDaQuadra = "Q1_PEZZO_DISP"
			path = loc_Q1_path
			'path ="C:\SupervisioneGualini2_C02515_Varie\NoteScamibioDati\R_ note su scambio dati\test\Q1\"
		Case 2:
			path = loc_Q2_path
			varname = "Q2_PEZZO_DISP"
			LeggiFileDaQuadra = "Q2_PEZZO_DISP"
			path = loc_Q2_path
			'path ="C:\SupervisioneGualini2_C02515_Varie\NoteScamibioDati\R_ note su scambio dati\test\Q2\"
		Case Else
			Throw New System.Exception("GestioneZonaR1.movbas -&gt; LeggiFileDaQuadra() ECCEZZIONE: parametro quadra non ammesso: " &amp; CStr(quadra) &amp; ".")
	End Select

	'guardo se sono presenti file
	Dim di As New IO.DirectoryInfo(path)
	Dim files As Object
	Dim nFiles As Integer

	files = di.GetFiles()

	If files.GetType.IsArray Then
		Dim ii As Integer
		For ii = files.GetLowerBound(0) To files.GetUpperBound(0) Step 1
			Dim fi As System.IO.FileSystemInfo
			fi = files(ii)
			DebugMsg fi.FullName
		Next
	End If

	nFiles = files.GetLowerBound(0)
	DebugMsg "LeggiFileDaQuadra(quadra As Integer); nFiles = files.GetLowerBound(0) = " &amp; CStr(nFiles)
	nFiles = files.GetUpperBound(0)
	DebugMsg "LeggiFileDaQuadra(quadra As Integer); nFiles = files.GetUpperBound(0) = " &amp;  CStr(nFiles)


	'FORZATURA DEBUG
	nFiles = 0
	If nFiles &gt; files.GetLowerBound(0) Then
		If quadra = 1 Then
			alm_Q1_numFilesIncoerente = True
		Else
			alm_Q2_numFilesIncoerente = True
		End If
		Exit Function
	End If
	If nFiles &lt; files.GetLowerBound(0) Then
		If quadra = 1 Then
			alm_Q1_MancaFile = True
		Else
			alm_Q2_MancaFile = True
		End If
		Exit Function
	End If

	filepath = files(0).FullName

	'Dim lastF As FileInfo
	'lastF = files(files.GetUpperBound(0))
	'Debug.Print lastF.Name

	'##cerco file più recente
	'Dim recentDt, olderDt As Date
	'recentDt = Date.MinValue
	'olderDt = Date.MaxValue
	'Dim recentFl, olderFl As FileInfo

	'For Each fl As FileInfo In fis

	'	Debug.Print(fl.FullName.ToString())
	'   Debug.Print(fl.LastWriteTime)
	'   If (fl.LastWriteTime &gt;recentDt) Then
	'  	recentDt = fl.LastWriteTime
	'	recentFl  = fl
	'    End If
	'    If (fl.LastWriteTime &lt; olderDt) Then
	'    	olderDt = fl.LastWriteTime
	'    	olderFl = fl
	 '   End If
	'Next
	'Debug.Print "recent: " &amp; (recentFl.FullName.ToString()) &amp; "; date: " &amp; recentDt.toString()
	'Debug.Print "older: " &amp; (olderFl.FullName.ToString()) &amp; "; date: " &amp; olderDt.toString()
    'Debug.Print(fl.LastWriteTime)


	Try
        ' Open the file using a stream reader.
        Using sr As New StreamReader(filepath)
            Dim line As String
            Dim i As Integer

            'Debug.Print "### lettura a righe"
            'Debug.Print

			i=0
            Do While sr.Peek() &gt;= 0
            	line = sr.ReadLine()
                'Debug.Print(line)
                Select Case i
	                Case 0:
						SetVariableValue(varname &amp; ":NUOVO", CInt(line))
					Case 1:
						SetVariableValue(varname &amp; ":ID_QUARTINA", line)
						'quartinaCorrente = line
					Case 2:
						SetVariableValue(varname &amp; ":POSIZIONE", line)
					Case 3:
						SetVariableValue(varname &amp; ":NOME_PEZZO_UNICO", line)
					Case 4:
						SetVariableValue(varname &amp; ":NOME_PEZZO_ESTERNO", line)
					Case 5:
						SetVariableValue(varname &amp; ":ULTIMO_PEZZO", CBool(line))
					Case 6:
						SetVariableValue(varname &amp; ":CODICE_PROFILO", line)
					Case 7:
						SetVariableValue(varname &amp; ":SERIE_PROFILO", line)
					Case 8:
						SetVariableValue(varname &amp; ":MAX_LUNGHEZZA", CInt(line))
					Case 9:
						SetVariableValue(varname &amp; ":TOTALE_PEZZI_QUARTINA", CInt(line))
					Case 10:
						SetVariableValue(varname &amp; ":NUM_SQUADRETTE1", CInt(line))
					Case 11:
						SetVariableValue(varname &amp; ":COD_SQUADRETTA1", line)
					Case 12:
						SetVariableValue(varname &amp; ":NUM_SQUADRETTE2", CInt(line))
					Case 13:
						SetVariableValue(varname &amp; ":COD_SQUADRETTA2", line)
					Case 14:
						SetVariableValue(varname &amp; ":ALTEZZA_PROFILO", CInt(line))
					Case 15:
						SetVariableValue(varname &amp; ":LARGHEZZA_PROFILO", CInt(line))
					Case 16:
						SetVariableValue(varname &amp; ":MISURA_CAMERA_ESTERNA", CInt(line))
					Case 17:
						SetVariableValue(varname &amp; ":ID_QUARTINA_SUCCESSIVA", line)
						'quartinaSuccessiva = line
					Case 18:
						SetVariableValue(varname &amp; ":NOME_COMMESSA", line)
					Case 19:
						SetVariableValue(varname &amp; ":APPOGGIO_PEZZO", CInt(line))
					Case 20:
						SetVariableValue(varname &amp; ":POSIZIONE_PEZZO_ESTERNO", CInt(line))
					Case 21:
						SetVariableValue(varname &amp; ":ID_PEZZO_ESTERNO", line)
					Case 22:
						SetVariableValue(varname &amp; ":LUNGHEZZA_PEZZO_ESTERNO", CInt(line))
					Case 23:
						SetVariableValue(varname &amp; ":FILE_XML", line)
					Case 24:
						SetVariableValue(varname &amp; ":DATA", line)
					Case 25:
						SetVariableValue(varname &amp; ":ORA", line)

	            End Select
	            i = i + 1
            Loop
            'faccio Reset dei valori di cassetto e magazzino assegnati, sarà la procedura di GestionePezzo a rilevare i valori corretto
            SetVariableValue(varname &amp; ":MAGAZZINO_ASSEGNATO", 0)
			SetVariableValue(varname &amp; ":CASSETTO_ASSEGNATO", 0)
			SetVariableValue(varname &amp; ":MAGAZZINO_ASSEGNATO_QRT_SUCCESSIVA", 0)
			SetVariableValue(varname &amp; ":CASSETTO_ASSEGNATO_QRT_SUCCESSIVA", 0)
        End Using
    Catch e As Exception
        LogMsg("The file could Not be Read:")
        LogMsg("LeggiFileDaQuadra() -&gt; " &amp;e.Message)
    End Try
End Function


Function FileDaLeggere() As Integer
	FileDaLeggere = 0	'metto a zero, significa che non ho pezzi pronti

	Dim leggiQ1 As Boolean
	Dim leggiQ2 As Boolean

	leggiQ1 = [Q1_In:PezzoPronto] And [Q1_PEZZO_DISP:NOME_PEZZO_UNICO] =""
	leggiQ2 = [Q2_In:PezzoPronto] And [Q2_PEZZO_DISP:NOME_PEZZO_UNICO] =""
	If leggiQ1 And leggiQ2 Then
		'ho due pezzi pronti allora prendo quello che ha il timestamp più vecchio
		Dim objRet1 As DBVarObjCmdTarget
		Dim dTimeStamp1 As Date
		Dim nMS1 As Integer
		Dim dt1 As Double

		Dim objRet2 As DBVarObjCmdTarget
		Dim dTimeStamp2 As Date
		Dim nMS2 As Integer
		Dim dt2 As Double

		Dim differenza As Double

		objRet1 = GetVariableObject("Q1_In:PezzoPronto")
		dTimeStamp1 = objRet1.GetTimeStamp()
		nMS1 = objRet1.GetTimeStampMs()
		dt1 = CLng(dTimeStamp1) * 1000
		dt1 = dt1 + nMS1

		objRet2 = GetVariableObject("Q2_In:PezzoPronto")
		dTimeStamp2 = objRet2.GetTimeStamp()
		nMS2 = objRet2.GetTimeStampMs()
		dt2 = CLng(dTimeStamp2) * 1000
		dt2 = dt2 + nMS2

		differenza = dt1 - dt2
		Debug.Print CStr(dt1 -dt2)

		If differenza &gt; 0 Then
			'pezzo da Q1 più recente
			FileDaLeggere = 2	'prendo da Q2 perchè più vecchio
		Else
			FileDaLeggere = 1	'prendo da Q1 perchè più vecchio
		End If

		objRet1 = Nothing
		objRet2 = Nothing
	Else
		'ho solo un pezzo pronto o nessuno
		If leggiQ1 Then
			FileDaLeggere = 1
		End If
		If leggiQ2 Then
			FileDaLeggere = 2
		End If
		'se nessun pezzo pronto leggiDaQuadra = 0
	End If

End Function

Function VerificaSeQuartinaEsisteInMagazzino(quadra As Integer, qrt As String, connectionString As String) As PosQuartina
	Dim pos As PosQuartina
	pos.mag  = 0		'0 = NON ESISTE, 1 = MAG_1, 2 = MAG_2
	pos.cass = 0

	VerificaSeQuartinaEsisteInMagazzino = pos 	'inizializzzo a NON ESISTE


	'Dim varname As String
	Dim vResult As Object
    Dim commandText As String
    'Dim quartina As String
    'Dim magazzino As Integer
    'Dim cassetto As Integer

    Const ERR_GENERICO As Integer = -1 					'ERRORE GENERICO
    Const ERR_GENERIC_EXCEPION As Integer = -101	 	'ERRORE eccezzione generica
    Const ERR_ODBC_EXCEPTION As Integer = -102	 		'ERRORE ecezzione ODBC


	'cerco nel db a quale cassetto è assegnata la quartina
	Try
        Using MyConnection As New System.Data.Odbc.OdbcConnection(connectionString)
            MyConnection.Open()
            commandText = "SELECT " &amp; _
                            "  `quartina`.`ID_QUARTINA` " &amp; _
                            ", `quartina`.`TOTALE_PEZZI_QUARTINA` " &amp; _
                            ", `quartina`.`NOME_COMMESSA` " &amp; _
                            ", `quartina`.`NUM_SQUADRETTE1` " &amp; _
                            ", `quartina`.`COD_SQUADRETTA1` " &amp; _
                            ", `quartina`.`NUM_SQADRETTE2` " &amp; _
                            ", `quartina`.`COD_SQUADRETTA2` " &amp; _
			        		", `quartina`.`cassetto_ID_CASSETTO` " &amp; _
                            ", `quartina`.`cassetto_magazzino_ID_MAGAZZINO` " &amp; _
                      	"FROM  `gualini`.`quartina` " &amp; _
            			"WHERE `quartina`.`ID_QUARTINA` = '" &amp; qrt &amp;"';"
            DebugMsg "GestioneZonaR1.movbas -&gt; VerificaSeQuartinaEsisteInMagazzino; commandText = " &amp; commandText

            Using MyCommand As New OdbcCommand()

				MyCommand.Connection = MyConnection
	            MyCommand.CommandText = commandText

				Using MyDataReader As OdbcDataReader
					MyDataReader = MyCommand.ExecuteReader

					'Debug.Print CStr(MyDataReader.HasRows)
					'Debug.Print CStr(MyDataReader.RecordsAffected)

					'se la quartina esiste nel DB leggo i dati di magazzino e cassetto
					If MyDataReader.HasRows Then
						MyDataReader.Read
						'[__CAR_CASS_RIK:Magazzino] 	= MyDataReader("cassetto_magazzino_ID_MAGAZZINO")
						'[__CAR_CASS_RIK:Cassetto]		= MyDataReader("cassetto_ID_CASSETTO")
						'[__CAR_CASS_RIK:Quartina]		= MyDataReader("ID_QUARTINA")

						pos.mag 	= MyDataReader("cassetto_magazzino_ID_MAGAZZINO")
						pos.cass	= MyDataReader("cassetto_ID_CASSETTO")
					Else
						'la quartina non esiste allora forzo i valori di posizione
						pos.mag = 0
						pos.cass = 0

					End If
				End Using	'MyDataReader.Close
			End Using	'MyCommand.Dispose
        End Using	'MyConnection.Close

        'memorizzo il cassetto assegnato in base alla quadra di provenienza
        If quadra = 1 Then
			[Q1_PEZZO_DISP:CASSETTO_ASSEGNATO] 		= pos.cass 'memorizzo il cassetto assegnato al pezzo
			[Q1_PEZZO_DISP:MAGAZZINO_ASSEGNATO] 	= pos.mag 'memorizzo il magazzino assegnato al pezzo
		ElseIf quadra = 2 Then
			[Q2_PEZZO_DISP:CASSETTO_ASSEGNATO] 		= pos.cass 'memorizzo il cassetto assegnato al pezzo
			[Q2_PEZZO_DISP:MAGAZZINO_ASSEGNATO] 	= pos.mag 'memorizzo il magazzino assegnato al pezzo
		End If

		DebugMsg "GestioneZonaR1.movbas -&gt; VerificaSeQuartinaEsisteInMagazzino; posizione.mag = " &amp; CStr(pos.mag)
		DebugMsg "GestioneZonaR1.movbas -&gt; VerificaSeQuartinaEsisteInMagazzino; posizione.cass = " &amp; CStr(pos.cass)
        VerificaSeQuartinaEsisteInMagazzino = pos 'torno valore trovato

	  'Catch program exception
	Catch MyException As Exception
		DebugMsg(MyException.ToString)
		MsgBox("GestioneZonaR1.movbas -&gt; VerificaSeQuartinaEsisteInMagazzino() - ERRORE: Exception." &amp; vbCrLf &amp; _
					 MyException.ToString &amp; ".")
		LogMsg(" VerificaSeQuartinaEsisteInMagazzino() - ERRORE: Exception." &amp; vbCrLf &amp; _
					 MyException.ToString &amp; ".")

		'alzare alarme
		alm_ZonaR1_ODBC_txt = "ERR_GENERIC_EXCEPION" &amp; " -- GestioneZonaR1.movbas -&gt; VerificaSeQuartinaEsisteInMagazzino() - ERRORE: Exception." &amp; vbCrLf &amp; _
					 MyException.ToString &amp; "." 'ERR_GENERIC_EXCEPION 'ERRORE eccezzione generic
		alm_ZonaR1_ODBC = True
		Exit Function

	  'Catch ODBC Exception
	Catch MyOdbcException As OdbcException
		DebugMsg(MyOdbcException.ToString)
		MsgBox("GestioneZonaR1.movbas -&gt; VerificaSeQuartinaEsisteInMagazzino() - ERRORE ODBC: OdbcException." &amp; vbCrLf &amp; _
					MyOdbcException.ToString  &amp; ".")
		LogMsg("VerificaSeQuartinaEsisteInMagazzino() - ERRORE ODBC: OdbcException." &amp; vbCrLf &amp; _
					MyOdbcException.ToString  &amp; ".")
		'TODO
		'alzare alarme
		alm_ZonaR1_ODBC_txt = "ERR_ODBC_EXCEPTION" &amp; " -- GestioneZonaR1.movbas -&gt; VerificaSeQuartinaEsisteInMagazzino() - ERRORE: Exception." &amp; vbCrLf &amp; _
					 MyException.ToString &amp; "." 'ERR_ODBC_EXCEPTION 'ERRORE ecezzione ODBC
		alm_ZonaR1_ODBC = True
		Exit Function

    End Try

End Function

Function CassettiDisponibili(mag As Integer, connectionString As String) As Integer
	CassettiDisponibili = 0 	'inizializzzo a NON DIDPONIBILE

    Dim commandText As String
    Dim whereString As String
    Dim cassetti As Integer

    Select Case mag
    Case 0
    	whereString = "ID_MAGAZZINO = 1 Or ID_MAGAZZINO = 2"
	Case 1
		whereString = "ID_MAGAZZINO = 1"
	Case 2
		whereString = "ID_MAGAZZINO = 2"
	Case Else
		Throw New System.Exception("GestioneZonaR1.movbas -&gt; CassettiDisponibili() ECCEZZIONE: valore parametro mag non ammesso: " &amp; CStr(mag) &amp; ".")
    End Select

    Const ERR_GENERICO As Integer = -1 					'ERRORE GENERICO
    Const ERR_GENERIC_EXCEPION As Integer = -101	 	'ERRORE eccezzione generica
    Const ERR_ODBC_EXCEPTION As Integer = -102	 		'ERRORE ecezzione ODBC


	'cerco nel db a quale cassetto è assegnata la quartina
	Try
        Using MyConnection As New System.Data.Odbc.OdbcConnection(connectionString)
            MyConnection.Open()
            commandText = "SELECT COUNT(*) AS DISPONIBILI " &amp; _
                      	" FROM  `gualini`.`cassetti_disponibili` " &amp; _
            			" WHERE " &amp; whereString &amp;";"

            'Select COUNT(*) FROM gualini.cassetti_disponibili WHERE ID_MAGAZZINO = 1 Or ID_MAGAZZINO = 2;
            DebugMsg "GestioneZonaR1.movbas -&gt; CassettiDisponibili(); commandText = " &amp; commandText

            Using MyCommand As New OdbcCommand()

				MyCommand.Connection = MyConnection
	            MyCommand.CommandText = commandText

				Using MyDataReader As OdbcDataReader
					MyDataReader = MyCommand.ExecuteReader

					DebugMsg "CassettiDisponibili(); MyDataReader.HasRows = " 			&amp;  CStr(MyDataReader.HasRows)
					DebugMsg "CassettiDisponibili(); MyDataReader.RecordsAffected = " 	&amp;  CStr(MyDataReader.RecordsAffected)

					'se la quartina esiste nel DB leggo i dati di magazzino e cassetto
					If MyDataReader.HasRows Then
						MyDataReader.Read

						cassetti = MyDataReader("DISPONIBILI")
					Else
						cassetti = 0
					End If
				End Using	'MyDataReader.Close
			End Using	'MyCommand.Dispose
        End Using	'MyConnection.Close

        DebugMsg("CassettiDisponibili() - cassetti = " &amp; CStr(cassetti)  &amp; ".")
        CassettiDisponibili = cassetti 'torno valore trovato

	  'Catch program exception
	Catch MyException As Exception
		DebugMsg(MyException.ToString)
		MsgBox("GestioneZonaR1.movbas -&gt; CassettiDisponibili() - ERRORE: Exception." &amp; vbCrLf &amp; _
					 MyException.ToString &amp; ".")
		LogMsg(" CassettiDisponibili() - ERRORE: Exception." &amp; vbCrLf &amp; _
					 MyException.ToString &amp; ".")

		'alzare alarme
		alm_ZonaR1_ODBC_txt = "ERR_GENERIC_EXCEPION" &amp; " -- GestioneZonaR1.movbas -&gt; CassettiDisponibili() - ERRORE: Exception." &amp; vbCrLf &amp; _
					 MyException.ToString &amp; "." 'ERR_GENERIC_EXCEPION 'ERRORE eccezzione generic
		alm_ZonaR1_ODBC = True
		Exit Function

	  'Catch ODBC Exception
	Catch MyOdbcException As OdbcException
		DebugMsg(MyOdbcException.ToString)
		MsgBox("GestioneZonaR1.movbas -&gt; CassettiDisponibili() - ERRORE ODBC: OdbcException." &amp; vbCrLf &amp; _
					MyOdbcException.ToString  &amp; ".")
		LogMsg("CassettiDisponibili() - ERRORE ODBC: OdbcException." &amp; vbCrLf &amp; _
					MyOdbcException.ToString  &amp; ".")
		'TODO
		'alzare alarme
		alm_ZonaR1_ODBC_txt = "ERR_ODBC_EXCEPTION" &amp; " -- GestioneZonaR1.movbas -&gt; CassettiDisponibili() - ERRORE: Exception." &amp; vbCrLf &amp; _
					 MyException.ToString &amp; "." 'ERR_ODBC_EXCEPTION 'ERRORE ecezzione ODBC
		alm_ZonaR1_ODBC = True
		Exit Function

    End Try

End Function

Function MissioneAssegnabile() As Integer
	MissioneAssegnabile = 0

	Dim assegnabileQ1 As Boolean
	Dim assegnabileQ2 As Boolean

	Dim cassettoInEstrattoreAssegnatoPronto As Boolean	'vero se il cassetto assegnato al pezzo ' pronto nell'estrattore corrispondente

	'verifico prima le condizioni per il pezzo su Q1
	If [Q1_PEZZO_DISP:MAGAZZINO_ASSEGNATO] = 1 Then
		'ho assegnato il magazzino 1
		If [MAG1_ES1_ACT:ID_CASSETTO]=[Q1_PEZZO_DISP:CASSETTO_ASSEGNATO] And [MAG1_ES1_ACT:PRONTO] Then
			cassettoInEstrattoreAssegnatoPronto = True
		Else
			cassettoInEstrattoreAssegnatoPronto = False
		End If
	ElseIf [Q1_PEZZO_DISP:MAGAZZINO_ASSEGNATO] = 2 Then
		'ho assegnato il magazzino 2
		If [MAG2_ES1_ACT:ID_CASSETTO]=[Q1_PEZZO_DISP:CASSETTO_ASSEGNATO] And [MAG2_ES1_ACT:PRONTO] Then
			cassettoInEstrattoreAssegnatoPronto = True
		Else
			cassettoInEstrattoreAssegnatoPronto = False
		End If
	Else
		' non pronto
		cassettoInEstrattoreAssegnatoPronto = False
		'CANCELLA 'eccezione perchè :MAGAZZINO_ASSEGNATO deve essere 1 o 2
		'CANCELLA 'Throw New System.Exception("GestioneZonaR1.movbas -&gt; MissioneAssegnabile() ECCEZZIONE: valore [Q1_PEZZO_DISP:MAGAZZINO_ASSEGNATO] non  ammesso: " &amp; CStr([Q1_PEZZO_DISP:MAGAZZINO_ASSEGNATO]) &amp; ".")
	End If

	assegnabileQ1 =	[Q1_In:PezzoPronto] _
					And [Q1_PEZZO_DISP:NOME_PEZZO_UNICO] &lt;&gt;"" _
					And [R1_STATUS:DISPONIBILE] _
					And cassettoInEstrattoreAssegnatoPronto

	'verifico le condizioni per il pezzo su Q2
	If [Q2_PEZZO_DISP:MAGAZZINO_ASSEGNATO] = 1 Then
		'ho assegnato il magazzino 1
		If [MAG1_ES1_ACT:ID_CASSETTO]=[Q2_PEZZO_DISP:CASSETTO_ASSEGNATO] And [MAG1_ES1_ACT:PRONTO] Then
			cassettoInEstrattoreAssegnatoPronto = True
		Else
			cassettoInEstrattoreAssegnatoPronto = False
		End If
	ElseIf [Q2_PEZZO_DISP:MAGAZZINO_ASSEGNATO] = 2 Then
		'ho assegnato il magazzino 2
		If [MAG2_ES1_ACT:ID_CASSETTO]=[Q2_PEZZO_DISP:CASSETTO_ASSEGNATO] And [MAG2_ES1_ACT:PRONTO] Then
			cassettoInEstrattoreAssegnatoPronto = True
		Else
			cassettoInEstrattoreAssegnatoPronto = False
		End If
	Else
		' non pronto
		cassettoInEstrattoreAssegnatoPronto = False
		'CANCELLA 'eccezione perchè :MAGAZZINO_ASSEGNATO deve essere 1 o 2
		'CANCELLA Throw New System.Exception("GestioneZonaR1.movbas -&gt; MissioneAssegnabile() ECCEZZIONE: valore [Q1_PEZZO_DISP:MAGAZZINO_ASSEGNATO] non  ammesso: " &amp; CStr([Q1_PEZZO_DISP:MAGAZZINO_ASSEGNATO]) &amp; ".")
	End If

	assegnabileQ2 = [Q2_In:PezzoPronto] _
					And [Q2_PEZZO_DISP:NOME_PEZZO_UNICO] &lt;&gt;"" _
					And [R1_STATUS:DISPONIBILE] _
					And cassettoInEstrattoreAssegnatoPronto

	If assegnabileQ1 And assegnabileQ2 Then
		MissioneAssegnabile = PezzoPiuVecchio()
	Else
		'ho solo un pezzo pronto o nessuno
		If assegnabileQ1 Then
			MissioneAssegnabile = 1
		End If
		If assegnabileQ2 Then
			MissioneAssegnabile = 2
		End If
		'se nessun pezzo pronto MissioneAssegnabile = 0, già impostato a inizio funzione
	End If
End Function


Function transizioneAttendiCassettoDisponibile() As Boolean
	transizioneAttendiCassettoDisponibile = 0
	Dim dispQ1 As Boolean
	Dim dispQ2 As Boolean
	Dim tout As Boolean

	tout = SuperatoTimeout(disponibileLastCheck, TOUT_DISPONIBILE)
	If tout Then
		disponibileLastCheck = Timer
	Else
		transizioneAttendiCassettoDisponibile = 0
		Exit Function
	End If

	'[Q1_In:PezzoPronto] And [Q1_PEZZO_DISP:NOME_PEZZO_UNICO] &lt;&gt;"" And [Q1_PEZZO_DISP:CASSETTO_ASSEGNATO]=0 And (Now()-lastcheck &gt; TIMEOUT)
	dispQ1 = [Q1_In:PezzoPronto] And [Q1_PEZZO_DISP:NOME_PEZZO_UNICO] &lt;&gt;"" And [Q1_PEZZO_DISP:CASSETTO_ASSEGNATO]=0 And tout
	dispQ2 = [Q2_In:PezzoPronto] And [Q2_PEZZO_DISP:NOME_PEZZO_UNICO] &lt;&gt;"" And [Q2_PEZZO_DISP:CASSETTO_ASSEGNATO]=0 And tout

	If dispQ1 And dispQ2 Then
		transizioneAttendiCassettoDisponibile = PezzoPiuVecchio()
		'devo verificare se il pezzo più vecchio è gestibile, ovvero se ho cassetti liberi nel magazzino o se è tutto pieno
		'TODO ##################################

	Else
		'ho solo un pezzo pronto o nessuno
		If dispQ1 Then
			transizioneAttendiCassettoDisponibile = 1
		End If
		If dispQ2 Then
			transizioneAttendiCassettoDisponibile = 2
		End If
		'se nessun cassetto disponibile transizioneAttendiCassettoDisponibile = 0
	End If

End Function

Function AttendiCassettoDisponibile() As Integer
	'questa funzione torna 0 se non posso assegnare nessun cassetto alla quartina perche magazziono di riferimento è pieno
	'torna 1 o 2 se posso assegnare un cassetto (il magazzionio di riferimento dipende da TipoCarico) al pezzo che proviente dalla quadra 1 o 2
	AttendiCassettoDisponibile = 0
	Dim dispQ1 As Boolean
	Dim dispQ2 As Boolean
	Dim quadraPezzoDaAssegnare As Integer	'num quadra del pezzo da assegnare
	Dim numCassettiDisp As Integer


	'[Q1_In:PezzoPronto] And [Q1_PEZZO_DISP:NOME_PEZZO_UNICO] &lt;&gt;"" And [Q1_PEZZO_DISP:CASSETTO_ASSEGNATO]=0 And (Now()-lastcheck &gt; TIMEOUT)
	'tout è già stato contato in transizioneAttendiCassettoDisponibile()

	dispQ1 = [Q1_In:PezzoPronto] And [Q1_PEZZO_DISP:NOME_PEZZO_UNICO] &lt;&gt;"" And [Q1_PEZZO_DISP:CASSETTO_ASSEGNATO]=0
	dispQ2 = [Q2_In:PezzoPronto] And [Q2_PEZZO_DISP:NOME_PEZZO_UNICO] &lt;&gt;"" And [Q2_PEZZO_DISP:CASSETTO_ASSEGNATO]=0

	If dispQ1 And dispQ2 Then
		quadraPezzoDaAssegnare = PezzoPiuVecchio()
	Else
		'ho solo un pezzo pronto o nessuno
		If dispQ1 Then
			quadraPezzoDaAssegnare = 1
		End If
		If dispQ2 Then
			quadraPezzoDaAssegnare = 2
		End If
		'se nessun cassetto disponibile quadraPezzoDaAssegnare = 0
	End If

	'in base al valore di TipoCarico guardo se ho un cassetto libero
	If [loc_ImpostazioniImpianto:TipoCarico] = 0 Then
		'QuadraSuMagazzinoCorrispondente
		numCassettiDisp = CassettiDisponibili(quadraPezzoDaAssegnare, MysSqlConnectionString)
		If numCassettiDisp &gt; 0 Then
			'posso assegnare una quartina al pezzo che proviene dalla quadra memorizzata in quadraPezzoDaAssegnare
			AttendiCassettoDisponibile = quadraPezzoDaAssegnare
		Else
			AttendiCassettoDisponibile = 0	'non posso assegnare il cassetto
		End If
	Else
		'QuadraSuTutto
		numCassettiDisp = CassettiDisponibili(0, MysSqlConnectionString)
		If numCassettiDisp &gt; 0 Then
			'anche in questo caso posso assegnare una quartina al pezzo che proviene dalla quadra memorizzata in quadraPezzoDaAssegnare
			AttendiCassettoDisponibile = quadraPezzoDaAssegnare
		Else
			AttendiCassettoDisponibile = 0	'non posso assegnare il cassetto
		End If
	End If

End Function

Function AssegnaCassettoAllaQuartina(TipoCarico As Integer _
									, leggiDaQuadra As Integer _
									, connectionString As String _
									, ID_QUARTINA As String _
									, TOTALE_PEZZI_QUARTINA As Integer _
									, NOME_COMMESSA As String _
									, NUM_SQUADRETTE1 As Integer _
									, COD_SQUADRETTA1 As String _
									, NUM_SQADRETTE2 As Integer _
									, COD_SQUADRETTA2 As String _
									) As PosQuartina
	Dim pos As PosQuartina

	Dim commandText As String
	Dim cassetti As Integer

	Const ERR_GENERICO As Integer = -1 					'ERRORE GENERICO
    Const ERR_GENERIC_EXCEPION As Integer = -101	 	'ERRORE eccezzione generica
    Const ERR_ODBC_EXCEPTION As Integer = -102	 		'ERRORE ecezzione ODBC

	pos.mag  = 0
	pos.cass = 0
	AssegnaCassettoAllaQuartina = pos 'inizializzo variabile di ritorno

	'cerco nel db a quale cassetto è assegnata la quartina
	Try
        Using MyConnection As New System.Data.Odbc.OdbcConnection(connectionString)
            MyConnection.Open()
            commandText = "CALL `gualini`.`CassettoPiuVicinoAndInsert`" &amp; _
            							"(" &amp; _
            							CStr(TipoCarico) &amp; _
            							", " &amp; CStr(leggiDaQuadra) &amp; _
            							", ""INS"" " &amp; _
            							", " &amp; """" &amp; CStr(ID_QUARTINA) &amp; """"  &amp; _
            							", " &amp; CStr(TOTALE_PEZZI_QUARTINA) &amp;  _
            							", " &amp; """" &amp; CStr(NOME_COMMESSA) &amp; """" &amp;  _
            							", " &amp; CStr(NUM_SQUADRETTE1) &amp;  _
            							", " &amp; CStr(COD_SQUADRETTA1) &amp;  _
            							", " &amp; CStr(NUM_SQADRETTE2) &amp;  _
            							", " &amp; CStr(COD_SQUADRETTA2) &amp;  _
            							");"

            'Select COUNT(*) FROM gualini.cassetti_disponibili WHERE ID_MAGAZZINO = 1 Or ID_MAGAZZINO = 2;
            DebugMsg "GestioneZonaR1.movbas -&gt; AssegnaCassettoAllaQuartina(); commandText = " &amp; commandText

            Using MyCommand As New OdbcCommand()
				MyCommand.Connection = MyConnection
	            MyCommand.CommandText = commandText

				Using MyDataReader As OdbcDataReader
					MyDataReader = MyCommand.ExecuteReader

					DebugMsg "AssegnaCassettoAllaQuartina(); MyDataReader.HasRows = " 			&amp;  CStr(MyDataReader.HasRows)
					DebugMsg "AssegnaCassettoAllaQuartina(); MyDataReader.RecordsAffected = " 	&amp;  CStr(MyDataReader.RecordsAffected)

					'se la quartina esiste nel DB leggo i dati di magazzino e cassetto
					If MyDataReader.HasRows Then
						MyDataReader.Read

						pos.mag = MyDataReader("MAGAZZINO")
						pos.cass = MyDataReader("CASSETTO")
					End If
				End Using	'MyDataReader.Close
			End Using	'MyCommand.Dispose
        End Using	'MyConnection.Close

        'memorizzo il cassetto assegnato in base alla quadra di provenienza
        If leggiDaQuadra = 1 Then
			[Q1_PEZZO_DISP:CASSETTO_ASSEGNATO] 		= pos.cass 'memorizzo il cassetto assegnato al pezzo
			[Q1_PEZZO_DISP:MAGAZZINO_ASSEGNATO] 	= pos.mag 'memorizzo il magazzino assegnato al pezzo
		ElseIf leggiDaQuadra = 2 Then
			[Q2_PEZZO_DISP:CASSETTO_ASSEGNATO] 		= pos.cass 'memorizzo il cassetto assegnato al pezzo
			[Q2_PEZZO_DISP:MAGAZZINO_ASSEGNATO] 	= pos.mag 'memorizzo il magazzino assegnato al pezzo
		End If

        DebugMsg("AssegnaCassettoAllaQuartina() - cassettoPiuViciono pos.mag = " &amp; CStr(pos.mag) &amp; " pos.cass = " &amp; CStr(pos.cass)  &amp; ".")
        AssegnaCassettoAllaQuartina = pos 'torno valore trovato

	  'Catch program exception
	Catch MyException As Exception
		DebugMsg(MyException.ToString)
		MsgBox("GestioneZonaR1.movbas -&gt; AssegnaCassettoAllaQuartina() - ERRORE: Exception." &amp; vbCrLf &amp; _
					 MyException.ToString &amp; ".")
		LogMsg(" AssegnaCassettoAllaQuartina() - ERRORE: Exception." &amp; vbCrLf &amp; _
					 MyException.ToString &amp; ".")

		'alzare alarme
		alm_ZonaR1_ODBC_txt = "ERR_GENERIC_EXCEPION" &amp; " -- GestioneZonaR1.movbas -&gt; AssegnaCassettoAllaQuartina() - ERRORE: Exception." &amp; vbCrLf &amp; _
					 MyException.ToString &amp; "." 'ERR_GENERIC_EXCEPION 'ERRORE eccezzione generic
		alm_ZonaR1_ODBC = True

	  'Catch ODBC Exception
	Catch MyOdbcException As OdbcException
		DebugMsg(MyOdbcException.ToString)
		MsgBox("GestioneZonaR1.movbas -&gt; AssegnaCassettoAllaQuartina() - ERRORE ODBC: OdbcException." &amp; vbCrLf &amp; _
					MyOdbcException.ToString  &amp; ".")
		LogMsg("AssegnaCassettoAllaQuartina() - ERRORE ODBC: OdbcException." &amp; vbCrLf &amp; _
					MyOdbcException.ToString  &amp; ".")
		'TODO
		'alzare alarme
		alm_ZonaR1_ODBC_txt = "ERR_ODBC_EXCEPTION" &amp; " -- GestioneZonaR1.movbas -&gt; AssegnaCassettoAllaQuartina() - ERRORE: Exception." &amp; vbCrLf &amp; _
					 MyException.ToString &amp; "." 'ERR_ODBC_EXCEPTION 'ERRORE ecezzione ODBC
		alm_ZonaR1_ODBC = True


	Finally
		'Dim objAlarm As AlarmCmdTarget
		'Dim objThreshold As AlarmThresholdCmdTarget
		'objAlarm = GetAlarm("alm_ZonaR1_ODBC")
		'objThreshold = objAlarm.GetAlarmThreshold("H")
		'objThreshold.Text = alm_ZonaR1_ODBC_txt
		'objThreshold = Nothing
		'objAlarm = Nothing

		'Exit Function
    End Try

End Function

Function FineRobot(connectionString As String) As Integer
	'operazioni da fare nella function
	'inserire i dati del pezzo nel DB
	'se ultimo pezzo della quartina faccio rientrare l'estrattore
	'resettare i valori dei membri che identificano il pezzo
	'reset dei dati di missione

    Dim commandText As String
    Dim commandText2 As String
    Dim excp As Boolean

    Const ERR_GENERICO As Integer = -1 					'ERRORE GENERICO
    Const ERR_GENERIC_EXCEPION As Integer = -101	 	'ERRORE eccezzione generica
    Const ERR_ODBC_EXCEPTION As Integer = -102	 		'ERRORE ecezzione ODBC

    FineRobot = ERR_GENERICO	'inizializzzo a ERR_GENERICO

	'devo inserire i dati del pezzo nel DB
	excp = False
	Try
        Using MyConnection As New System.Data.Odbc.OdbcConnection(connectionString)
            MyConnection.Open()

			'commandText = "UPDATE `gualini`.`quartina` " &amp; _
			'"Set " &amp; _
			'"`TOTALE_PEZZI_QUARTINA` =  " 			&amp; CStr(GetVariableValue("R1_DATI_PEZZO:TOTALE_PEZZI_QUARTINA") &amp; "," &amp; _
			'"`NUM_SQUADRETTE1` =  " 				&amp; CStr(GetVariableValue("R1_DATI_PEZZO:NUM_SQUADRETTE1") &amp; "," &amp; _
			'"`COD_SQUADRETTA1` =  " 				&amp; CStr(GetVariableValue("R1_DATI_PEZZO:COD_SQUADRETTA1") &amp; "," &amp; _
			'"`NUM_SQADRETTE2` =  " 				&amp; CStr(GetVariableValue("R1_DATI_PEZZO:NUM_SQADRETTE2") &amp; "," &amp; _
			'"`COD_SQUADRETTA2` =  " 				&amp; CStr(GetVariableValue("R1_DATI_PEZZO:COD_SQUADRETTA2") &amp; "," &amp; _
			'"`NOME_COMMESSA` =  " 					&amp; CStr(GetVariableValue("R1_DATI_PEZZO:NOME_COMMESSA") &amp; "," &amp; _
			'"`cassetto_ID_CASSETTO` =  " 			&amp; CStr(GetVariableValue("R1_DATI_PEZZO:CASSETTO_ASSEGNATO") &amp; "," &amp; _
			'"`cassetto_magazzino_ID_MAGAZZINO` =  " &amp; CStr(GetVariableValue("R1_DATI_PEZZO:MAGAZZINO_ASSEGNATO") &amp; _
			'" WHERE `ID_QUARTINA` = " &amp; "`" 		&amp; CStr(GetVariableValue("R1_DATI_PEZZO:ID_QUARTINA") &amp; "`" &amp; ";"

            commandText = "INSERT INTO `gualini`.`quartina` " &amp; _
            "(`ID_QUARTINA`, " &amp; _
            "`TOTALE_PEZZI_QUARTINA`, " &amp; _
            "`NUM_SQUADRETTE1`, " &amp; _
            "`COD_SQUADRETTA1`, " &amp; _
            "`NUM_SQADRETTE2`, " &amp; _
            "`COD_SQUADRETTA2`, " &amp; _
            "`NOME_COMMESSA`, " &amp; _
            "`cassetto_ID_CASSETTO`, " &amp; _
            "`cassetto_magazzino_ID_MAGAZZINO`, " &amp; _
            "VALUES " &amp; _
			"(" &amp; _
            CStr(GetVariableValue("R1_DATI_PEZZO:ID_QUARTINA")) &amp; ", " &amp; _
            CStr(GetVariableValue("R1_DATI_PEZZO:TOTALE_PEZZI_QUARTINA")) &amp; ", " &amp; _
            CStr(GetVariableValue("R1_DATI_PEZZO:NUM_SQUADRETTE1")) &amp; ", " &amp; _
            CStr(GetVariableValue("R1_DATI_PEZZO:COD_SQUADRETTA1")) &amp; ", " &amp; _
            CStr(GetVariableValue("R1_DATI_PEZZO:NUM_SQADRETTE2")) &amp; ", " &amp; _
			CStr(GetVariableValue("R1_DATI_PEZZO:COD_SQUADRETTA2")) &amp; ", " &amp; _
			CStr(GetVariableValue("R1_DATI_PEZZO:NOME_COMMESSA")) &amp; ", " &amp; _
            CStr(GetVariableValue("R1_DATI_PEZZO:CASSETTO_ASSEGNATO")) &amp; ", " &amp; _
            CStr(GetVariableValue("R1_DATI_PEZZO:MAGAZZINO_ASSEGNATO")) &amp; ", " &amp; _
            ") ON DUPLICATE KEY UPDATE " &amp; _
            "`TOTALE_PEZZI_QUARTINA` = " &amp; CStr(GetVariableValue("R1_DATI_PEZZO:TOTALE_PEZZI_QUARTINA"))  &amp; ", " &amp; _
			"`NUM_SQUADRETTE1` = " &amp; CStr(GetVariableValue("R1_DATI_PEZZO:NUM_SQUADRETTE1")) &amp; ", " &amp; _
			"`COD_SQUADRETTA1` = " &amp; CStr(GetVariableValue("R1_DATI_PEZZO:COD_SQUADRETTA1")) &amp; ", " &amp; _
			"`NUM_SQADRETTE2` = " &amp; CStr(GetVariableValue("R1_DATI_PEZZO:NUM_SQADRETTE2")) &amp; ", " &amp; _
			"`COD_SQUADRETTA2` = " &amp; CStr(GetVariableValue("R1_DATI_PEZZO:COD_SQUADRETTA2")) &amp; ", " &amp; _
			"`NOME_COMMESSA` = " &amp; CStr(GetVariableValue("R1_DATI_PEZZO:NOME_COMMESSA"))  &amp; ", " &amp; _
            ";"

            DebugMsg "GestioneZonaR1.movbas -&gt; FineRobot(); commandText = " &amp; commandText

            commandText2 = "INSERT INTO `gualini`.`pezzo` " &amp; _
            "(`ID_PEZZO`, " &amp; _
            "`POSIZIONE`, " &amp; _
            "`NOME_PEZZO_ESTERNO`, " &amp; _
            "`CODICE_PROFILO`, " &amp; _
            "`SERIE_PROFILO`, " &amp; _
            "`MAX_LUNGHEZZA`, " &amp; _
            "`ALTEZZA_PROFILO`, " &amp; _
            "`LARGHEZZA_PROFILO`, " &amp; _
            "`MISURA_CAMERA_ESTERNA`, " &amp; _
            "`APPOGGIO_PEZZO`, " &amp; _
            "`POSIZIONE_PEZZO_ESTERNO`, " &amp; _
            "`ID_PEZZO_ESTERNO`, " &amp; _
            "`LUNGHEZZA_PEZZO_ESTERNO`, " &amp; _
            "`FILE_XML`, " &amp; _
            "`DATA`, " &amp; _
            "`ORA`, " &amp; _
            "`quartina_ID_QUARTINA`) " &amp; _
            "VALUES " &amp; _
			"(" &amp; _
            CStr(GetVariableValue("R1_DATI_PEZZO:NOME_PEZZO_UNICO")) &amp; ", " &amp; _
            CStr(GetVariableValue("R1_DATI_PEZZO:POSIZIONE")) &amp; ", " &amp; _
            CStr(GetVariableValue("R1_DATI_PEZZO:NOME_PEZZO_ESTERNO")) &amp; ", " &amp; _
            CStr(GetVariableValue("R1_DATI_PEZZO:CODICE_PROFILO")) &amp; ", " &amp; _
            CStr(GetVariableValue("R1_DATI_PEZZO:SERIE_PROFILO")) &amp; ", " &amp; _
			CStr(GetVariableValue("R1_DATI_PEZZO:MAX_LUNGHEZZA")) &amp; ", " &amp; _
			CStr(GetVariableValue("R1_DATI_PEZZO:ALTEZZA_PROFILO")) &amp; ", " &amp; _
            CStr(GetVariableValue("R1_DATI_PEZZO:MISURA_CAMERA_ESTERNA")) &amp; ", " &amp; _
            CStr(GetVariableValue("R1_DATI_PEZZO:APPOGGIO_PEZZO")) &amp; ", " &amp; _
            CStr(GetVariableValue("R1_DATI_PEZZO:POSIZIONE_PEZZO_ESTERNO")) &amp; ", " &amp; _
            CStr(GetVariableValue("R1_DATI_PEZZO:ID_PEZZO_ESTERNO")) &amp; ", " &amp; _
            CStr(GetVariableValue("R1_DATI_PEZZO:LUNGHEZZA_PEZZO_ESTERNO")) &amp; ", " &amp; _
            CStr(GetVariableValue("R1_DATI_PEZZO:FILE_XML")) &amp; ", " &amp; _
            CStr(GetVariableValue("R1_DATI_PEZZO:DATA")) &amp; ", " &amp; _
            CStr(GetVariableValue("R1_DATI_PEZZO:ORA")) &amp; ", " &amp; _
            CStr(GetVariableValue("R1_DATI_PEZZO:ID_QUARTINA")) &amp; _
            "); "

            DebugMsg "GestioneZonaR1.movbas -&gt; FineRobot(); commandText2 = " &amp; commandText2

            Using MyCommand As New OdbcCommand()
				MyCommand.Connection = MyConnection

	            Dim rCount As Integer

	            'inserisco o aggiorno i dati di quartina
	            MyCommand.CommandText = commandText
	            rCount = MyCommand.ExecuteNonQuery()
				Debug.Print	"rCout = MyCommand.ExecuteNonQuery() = " &amp; rCount

				'inserisco i dati del pezzo
				MyCommand.CommandText = commandText2
	            rCount = MyCommand.ExecuteNonQuery()
				Debug.Print	"rCout = MyCommand.ExecuteNonQuery() = " &amp; rCount

			End Using	'MyCommand.Dispose
        End Using	'MyConnection.Close

	  'Catch program exception
	Catch MyException As Exception
		excp = True
		DebugMsg(MyException.ToString)
		MsgBox("GestioneZonaR1.movbas -&gt; FineRobot() - ERRORE: Exception." &amp; vbCrLf &amp; _
					 MyException.ToString &amp; ".")
		LogMsg(" FineRobot() - ERRORE: Exception." &amp; vbCrLf &amp; _
					 MyException.ToString &amp; ".")

		'alzare alarme
		alm_ZonaR1_ODBC_txt = "ERR_GENERIC_EXCEPION" &amp; " -- GestioneZonaR1.movbas -&gt; FineRobot() - ERRORE: Exception." &amp; vbCrLf &amp; _
					 MyException.ToString &amp; "." 'ERR_GENERIC_EXCEPION 'ERRORE eccezzione generic
		alm_ZonaR1_ODBC = True
		FineRobot = ERR_GENERIC_EXCEPION
		'Exit Function

	  'Catch ODBC Exception
	Catch MyOdbcException As OdbcException
		excp = True
		DebugMsg(MyOdbcException.ToString)
		MsgBox("GestioneZonaR1.movbas -&gt; FineRobot() - ERRORE ODBC: OdbcException." &amp; vbCrLf &amp; _
					MyOdbcException.ToString  &amp; ".")
		LogMsg("FineRobot() - ERRORE ODBC: OdbcException." &amp; vbCrLf &amp; _
					MyOdbcException.ToString  &amp; ".")
		'TODO
		'alzare alarme
		alm_ZonaR1_ODBC_txt = "ERR_ODBC_EXCEPTION" &amp; " -- GestioneZonaR1.movbas -&gt; FineRobot() - ERRORE: Exception." &amp; vbCrLf &amp; _
					 MyException.ToString &amp; "." 'ERR_ODBC_EXCEPTION 'ERRORE ecezzione ODBC
		alm_ZonaR1_ODBC = True
		FineRobot = ERR_ODBC_EXCEPTION
	Finally
		If excp Then
			Exit Function
		End If
    End Try

    'tutto Ok
    FineRobot = 0
End Function

Function RilevaCassettoQuartinaSuccessiva( connectionString As String ) As PosQuartina
									'TipoCarico As Integer _
									', leggiDaQuadra As Integer _
									', connectionString As String _
									', ID_QUARTINA As String _
									', TOTALE_PEZZI_QUARTINA As Integer _
									', NOME_COMMESSA As String _
									', NUM_SQUADRETTE1 As Integer _
									', COD_SQUADRETTA1 As String _
									', NUM_SQADRETTE2 As Integer _
									', COD_SQUADRETTA2 As String _
									') As PosQuartina
	'devo chiamare la procedura MySql `CassettoPiuVicinoAndInsert`
		'(
		'TipoCarico Int,
        'LeggiDaQuadra Int,
		'OP VARCHAR(10), /* "" = solo ricerca del cassetto più vicino, "INS" = inserisce anche nuova quartina, "UPD" aggiorna i dati indentificativi della quartina */
		'pID_QUARTINA VARCHAR(45),
		'pTOTALE_PEZZI_QUARTINA TINYINT(4),
		'pNOME_COMMESSA VARCHAR(45),
		'pNUM_SQUADRETTE1 TINYINT(4),
		'pCOD_SQUADRETTA1  VARCHAR(45),
		'pNUM_SQADRETTE2 TINYINT(4),
		'pCOD_SQUADRETTA2  VARCHAR(45)
        ')
    'con i soli dati di TipoCarico, LeggiDaQuadra, OP = "INS" e ID_QUARTINA e 0 o "" gli altri parametri
    'questa procedura torna cassetto e magazzino assegnati sia che la quartina esista sia che non esista e sia in grado di crearla
    'torna magazzino = 0 e cassetto = 0 se il magazzino è pieno


	Dim pos As PosQuartina

	Dim commandText As String
	Dim cassetti As Integer

	Const ERR_GENERICO As Integer = -1 					'ERRORE GENERICO
    Const ERR_GENERIC_EXCEPION As Integer = -101	 	'ERRORE eccezzione generica
    Const ERR_ODBC_EXCEPTION As Integer = -102	 		'ERRORE ecezzione ODBC

	pos.mag  = 0
	pos.cass = 0
	RilevaCassettoQuartinaSuccessiva = pos 'inizializzo variabile di ritorno

	'cerco nel db a quale cassetto è assegnata la quartina successiva
	Try
        Using MyConnection As New System.Data.Odbc.OdbcConnection(connectionString)
            MyConnection.Open()
            commandText = "CALL `gualini`.`CassettoPiuVicinoAndInsert`" &amp; _
            							"(" &amp; _
            							CStr([loc_ImpostazioniImpianto:TipoCarico]) &amp; _
            							", " &amp; CStr([R1_STATUS:PZ_DA_QUADRA]) &amp; _
            							", ""INS"" " &amp; _
            							", " &amp; CStr([R1_DATI_PEZZO:ID_QUARTINA_SUCCESSIVA]) &amp; _
            							", " &amp; CStr("NULL") &amp; _
            							", " &amp; CStr("NULL") &amp; _
            							", " &amp; CStr("NULL") &amp; _
            							", " &amp; CStr("NULL") &amp; _
            							", " &amp; CStr("NULL") &amp; _
            							", " &amp; CStr("NULL") &amp; _
            							");"

            DebugMsg "GestioneZonaR1.movbas -&gt; RilevaCassettoQuartinaSuccessiva(); commandText = " &amp; commandText

            Using MyCommand As New OdbcCommand()
				MyCommand.Connection = MyConnection
	            MyCommand.CommandText = commandText

				Using MyDataReader As OdbcDataReader
					MyDataReader = MyCommand.ExecuteReader

					DebugMsg "RilevaCassettoQuartinaSuccessiva(); MyDataReader.HasRows = " 			&amp;  CStr(MyDataReader.HasRows)
					DebugMsg "RilevaCassettoQuartinaSuccessiva(); MyDataReader.RecordsAffected = " 	&amp;  CStr(MyDataReader.RecordsAffected)

					'se la quartina esiste nel DB leggo i dati di magazzino e cassetto
					If MyDataReader.HasRows Then
						MyDataReader.Read

						pos.mag = MyDataReader("MAGAZZINO")
						pos.cass = MyDataReader("CASSETTO")
					End If
				End Using	'MyDataReader.Close
			End Using	'MyCommand.Dispose
        End Using	'MyConnection.Close

        DebugMsg("RilevaCassettoQuartinaSuccessiva() - cassettoPiuViciono pos.mag = " &amp; CStr(pos.mag) &amp; " pos.cass = " &amp; CStr(pos.cass)  &amp; ".")
        RilevaCassettoQuartinaSuccessiva = pos 'torno valore trovato

	  'Catch program exception
	Catch MyException As Exception
		DebugMsg(MyException.ToString)
		MsgBox("GestioneZonaR1.movbas -&gt; RilevaCassettoQuartinaSuccessiva() - ERRORE: Exception." &amp; vbCrLf &amp; _
					 MyException.ToString &amp; ".")
		LogMsg(" RilevaCassettoQuartinaSuccessiva() - ERRORE: Exception." &amp; vbCrLf &amp; _
					 MyException.ToString &amp; ".")

		'alzare alarme
		alm_ZonaR1_ODBC_txt = "ERR_GENERIC_EXCEPION" &amp; " -- GestioneZonaR1.movbas -&gt; RilevaCassettoQuartinaSuccessiva() - ERRORE: Exception." &amp; vbCrLf &amp; _
					 MyException.ToString &amp; "." 'ERR_GENERIC_EXCEPION 'ERRORE eccezzione generic
		alm_ZonaR1_ODBC = True

	  'Catch ODBC Exception
	Catch MyOdbcException As OdbcException
		DebugMsg(MyOdbcException.ToString)
		MsgBox("GestioneZonaR1.movbas -&gt; RilevaCassettoQuartinaSuccessiva() - ERRORE ODBC: OdbcException." &amp; vbCrLf &amp; _
					MyOdbcException.ToString  &amp; ".")
		LogMsg("RilevaCassettoQuartinaSuccessiva() - ERRORE ODBC: OdbcException." &amp; vbCrLf &amp; _
					MyOdbcException.ToString  &amp; ".")
		'TODO
		'alzare alarme
		alm_ZonaR1_ODBC_txt = "ERR_ODBC_EXCEPTION" &amp; " -- GestioneZonaR1.movbas -&gt; RilevaCassettoQuartinaSuccessiva() - ERRORE: Exception." &amp; vbCrLf &amp; _
					 MyException.ToString &amp; "." 'ERR_ODBC_EXCEPTION 'ERRORE ecezzione ODBC
		alm_ZonaR1_ODBC = True


	Finally
		'Dim objAlarm As AlarmCmdTarget
		'Dim objThreshold As AlarmThresholdCmdTarget
		'objAlarm = GetAlarm("alm_ZonaR1_ODBC")
		'objThreshold = objAlarm.GetAlarmThreshold("H")
		'objThreshold.Text = alm_ZonaR1_ODBC_txt
		'objThreshold = Nothing
		'objAlarm = Nothing

		Exit Function

    End Try

End Function


Sub ResetDatiPezzoMissione(daQuadra As Integer)
	'aggiungere tutte le altre variabili dimensionali
	'per comodità uso la variabile R1_DATI_PEZZO che ha stesso tipo di Q1_PEZZO_DISP e Q2_PEZZO_DISP
	'e copio tutti valori dei membri con un ciclo
	Dim varnameQuadra As String
	Dim varnameR1 As String

	Dim objR1 As DBVarObjCmdTarget
	Dim objPezzo As DBVarObjCmdTarget
	Dim MemberR1 As DBVarObjCmdTarget
	Dim MemberQuadra As DBVarObjCmdTarget

	Dim mCount As Integer	'contatore dei membri
	Dim et As movicon.eVariableType
	varnameQuadra = IIf(daQuadra = 1, "Q1_PEZZO_DISP", "Q2_PEZZO_DISP")

	objPezzo = GetVariableObject(varnameQuadra)
	objR1 = GetVariableObject("R1_DATI_PEZZO")

	mCount = 0	'inizializzo a 0

	MemberQuadra 	= objPezzo.GetMemberObjectFromIndex(mCount)
	MemberR1 		= objR1.GetMemberObjectFromIndex(mCount)

	While Not MemberQuadra Is Nothing
		DebugMsg 		"ResetDatiPezzoMissione() -&gt; MemberQuadra name = " 	&amp; MemberQuadra.GetName 	&amp; "; value = " &amp; CStr(MemberQuadra.Value) 	&amp; "; Tipo = " &amp; CStr(MemberQuadra.GetType())
		DebugMsg 		"ResetDatiPezzoMissione() -&gt; MemberR1 name = " 		&amp; MemberR1.GetName 		&amp; "; value = " &amp; CStr(MemberR1.Value) 		&amp; "; Tipo = " &amp; CStr(MemberR1.GetType())
		'Debug.Print 	"ResetDatiPezzoMissione() -&gt; MemberQuadra name = " 	&amp; MemberQuadra.GetName 	&amp; "; value = " &amp; CStr(MemberQuadra.Value) 	&amp; "; Tipo = " &amp; CStr(MemberQuadra.GetType())
		'Debug.Print 	"ResetDatiPezzoMissione() -&gt; MemberR1 name = " 		&amp; MemberR1.GetName 		&amp; "; value = " &amp; CStr(MemberR1.Value) 		&amp; "; Tipo = " &amp; CStr(MemberR1.GetType())

		et = MemberR1.GetType()
		Select Case et
			Case movicon.eVariableType.enum_VAR_TYPE_BIT
				MemberR1.Value 		= False
				MemberQuadra.Value 	= False

			Case movicon.eVariableType.enum_VAR_TYPE_BYTE _
				, movicon.eVariableType.enum_VAR_TYPE_DOUBLE _
				, movicon.eVariableType.enum_VAR_TYPE_DWORD _
				, movicon.eVariableType.enum_VAR_TYPE_FLOAT _
				, movicon.eVariableType.enum_VAR_TYPE_SIGNBYTE _
				, movicon.eVariableType.enum_VAR_TYPE_SIGNDWORD _
				, movicon.eVariableType.enum_VAR_TYPE_SIGNWORD _
				, movicon.eVariableType.enum_VAR_TYPE_WORD

				MemberR1.Value 		= 0
				MemberQuadra.Value 	= 0

			Case movicon.eVariableType.enum_VAR_TYPE_STRING
				MemberR1.Value 		= ""
				MemberQuadra.Value 	= ""
			Case Else
				'tipo non resettabile :movicon.eVariableType.enum_VAR_TYPE_ARRAY movicon.eVariableType.enum_VAR_TYPE_E_UNKNOWN movicon.eVariableType.enum_VAR_TYPE_STRUCT
		End Select

		mCount = mCount + 1
		MemberQuadra 	= objPezzo.GetMemberObjectFromIndex(mCount)
		MemberR1 		= objR1.GetMemberObjectFromIndex(mCount)
	End While
	MemberQuadra 	= Nothing
	MemberR1 		= Nothing
	objPezzo 		= Nothing
	objR1 			= Nothing
End Sub

Sub AggiornaPosizioniEstrattoriES1(connectionString As String )
	AggiornaPosizioneEstrattore(1 , 1,connectionString)
	AggiornaPosizioneEstrattore(2 , 1,connectionString)
End Sub

Sub AggiornaPosizioneEstrattore(mag As Integer, estr As Integer, connectionString As String )
	Dim varEstrattore As String
	Dim varEstrattoreOld As String
	Dim cass As Integer
	Dim cassOld As Integer
	Dim query As String
	Dim ret As Integer

	varEstrattore 		= "MAG" &amp; CStr(mag) &amp; "_ES" &amp; CStr(estr) &amp; "_ACT"
	varEstrattoreOld 	= "MAG" &amp; CStr(mag) &amp; "_ES" &amp; CStr(estr) &amp; "_ACT_OLD"

	cass 		= GetVariableValue(varEstrattore 		&amp; ":ID_CASSETTO")
	cassOld 	= GetVariableValue(varEstrattoreOld 	&amp; ":ID_CASSETTO")

	If (cass &lt;&gt; cassOld) Then
		'devo aggiornare il DB

		'per prima cosa metto dentro eventuali pezzi che sono nell'estrattore
		query = "UPDATE `gualini`.`cassetto` " &amp; _
			"Set " &amp; _
			"`POSIZIONE` =  " 			&amp; CStr(0) 	&amp; _
			" WHERE "	&amp; _
			"`POSIZIONE` =  " 						&amp; CStr(estr) &amp; " And " &amp; _
			"`magazzino_ID_MAGAZZINO` =  " &amp; CStr(mag) &amp; _
			";"

		ret = SqlExecuteNonQuery(MysSqlConnectionString, query)
		If ret &lt; 0 Then
			LogMsg		"AggiornaPosizioneEstrattore() -&gt; SqlExecuteNonQuery ERROR: errorcode = " &amp; CStr(ret)	&amp; "; query= " &amp; query &amp; ";"
		ElseIf ret = 0 Then
			LogMsg		"AggiornaPosizioneEstrattore() -&gt; SqlExecuteNonQuery no Row updated " 	&amp; CStr(ret)	&amp; "; query= " &amp; query &amp; ";"
		ElseIf ret &gt; 0 Then
			LogMsg		"AggiornaPosizioneEstrattore() -&gt; SqlExecuteNonQuery NumRow  = " &amp; CStr(ret)	&amp; "; query= " &amp; query &amp; ";"
		End If

		'poi metto fuori il pezzo che è realmente nell'estrattore, se ce ne è uno
		If cass &gt; 0 Then
			query = "UPDATE `gualini`.`cassetto` " &amp; _
				"Set " &amp; _
				"`POSIZIONE` =  " 			&amp; CStr(estr) 	&amp; _
				" WHERE "	&amp; _
				"`ID_CASSETTO` =  " 					&amp; CStr(cass) &amp; " And " &amp; _
				"`magazzino_ID_MAGAZZINO` =  " &amp; CStr(mag) &amp; _
				";"

			ret = SqlExecuteNonQuery(MysSqlConnectionString, query)
			If ret &lt; 0 Then
				LogMsg		"AggiornaPosizioneEstrattore() -&gt; SqlExecuteNonQuery ERROR: errorcode = " &amp; CStr(ret)	&amp; "; query= " &amp; query &amp; ";"
			ElseIf ret = 0 Then
				LogMsg		"AggiornaPosizioneEstrattore() -&gt; SqlExecuteNonQuery no Row updated " 	&amp; CStr(ret)	&amp; "; query= " &amp; query &amp; ";"
			ElseIf ret &gt; 0 Then
				LogMsg		"AggiornaPosizioneEstrattore() -&gt; SqlExecuteNonQuery NumRow  = " &amp; CStr(ret)	&amp; "; query= " &amp; query &amp; ";"
			End If
		End If


		'alla fine aggiorno la variabile Old
		AggiorrnaMembri(varEstrattore, varEstrattoreOld)
	End If

End Sub

Function SqlExecuteNonQuery(connectionString As String, query As String) As Integer
	'ExecuteNonQuery used for executing queries that does not return any data. It is used to execute the sql statements like update, insert, delete etc.
	'ExecuteNonQuery executes the command and returns the number of rows affected

    Dim commandText As String
    Dim excp As Boolean
    Dim rCount As Integer

    Const ERR_GENERICO As Integer = -1 					'ERRORE GENERICO
    Const ERR_GENERIC_EXCEPION As Integer = -101	 	'ERRORE eccezzione generica
    Const ERR_ODBC_EXCEPTION As Integer = -102	 		'ERRORE ecezzione ODBC

    SqlExecuteNonQuery = ERR_GENERICO	'inizializzzo a ERR_GENERICO

	commandText = query
	excp = False
	rCount = 0
	Try
        Using MyConnection As New System.Data.Odbc.OdbcConnection(connectionString)
            MyConnection.Open()

            DebugMsg "GestioneZonaR1.movbas -&gt; SqlExecuteNonQuery(); commandText = " &amp; commandText

            Using MyCommand As New OdbcCommand()
				MyCommand.Connection = MyConnection
	            MyCommand.CommandText = commandText
	            rCount = MyCommand.ExecuteNonQuery()
				Debug.Print	"rCout = MyCommand.ExecuteNonQuery() = " &amp; rCount
			End Using	'MyCommand.Dispose
        End Using	'MyConnection.Close

	  'Catch program exception
	Catch MyException As Exception
		excp = True
		DebugMsg(MyException.ToString)
		MsgBox("GestioneZonaR1.movbas -&gt; SqlExecuteNonQuery() - ERRORE: Exception." &amp; vbCrLf &amp; _
					 MyException.ToString &amp; ".")
		LogMsg(" SqlExecuteNonQuery() - ERRORE: Exception." &amp; vbCrLf &amp; _
					 MyException.ToString &amp; ".")

		'alzare alarme
		alm_ZonaR1_ODBC_txt = "ERR_GENERIC_EXCEPION" &amp; " -- GestioneZonaR1.movbas -&gt; SqlExecuteNonQuery() - ERRORE: Exception." &amp; vbCrLf &amp; _
					 MyException.ToString &amp; "." 'ERR_GENERIC_EXCEPION 'ERRORE eccezzione generic
		alm_ZonaR1_ODBC = True
		SqlExecuteNonQuery = ERR_GENERIC_EXCEPION
		'Exit Function

	  'Catch ODBC Exception
	Catch MyOdbcException As OdbcException
		excp = True
		DebugMsg(MyOdbcException.ToString)
		MsgBox("GestioneZonaR1.movbas -&gt; SqlExecuteNonQuery() - ERRORE ODBC: OdbcException." &amp; vbCrLf &amp; _
					MyOdbcException.ToString  &amp; ".")
		LogMsg("SqlExecuteNonQuery() - ERRORE ODBC: OdbcException." &amp; vbCrLf &amp; _
					MyOdbcException.ToString  &amp; ".")
		'TODO
		'alzare alarme
		alm_ZonaR1_ODBC_txt = "ERR_ODBC_EXCEPTION" &amp; " -- GestioneZonaR1.movbas -&gt; SqlExecuteNonQuery() - ERRORE: Exception." &amp; vbCrLf &amp; _
					 MyException.ToString &amp; "." 'ERR_ODBC_EXCEPTION 'ERRORE ecezzione ODBC
		alm_ZonaR1_ODBC = True
		SqlExecuteNonQuery = ERR_ODBC_EXCEPTION
	Finally
		If excp Then
			Exit Function
		End If
    End Try

    'tutto Ok
    SqlExecuteNonQuery = rCount
End Function

Sub EliminaFileDaQuadra(daQuadra As Integer, nomePezzo As String)
	Dim nomeFileFull As String
	Dim path As String
	Dim varname As String

	Select Case daQuadra
		Case 1:
			path = loc_Q1_path
			varname = "Q1_PEZZO_DISP"
		Case 2:
			path = loc_Q2_path
			varname = "Q2_PEZZO_DISP"
		Case Else
			Throw New System.Exception("GestioneZonaR1.movbas -&gt; EliminaFileDaQuadra() ECCEZZIONE: parametro daQuadra non ammesso: " &amp; CStr(daQuadra) &amp; ".")
	End Select

	nomeFileFull = path &amp; GetVariableValue(varname &amp; ":NOME_PEZZO_UNICO")

	'guardo il file esiste
	Try
		Using fi As New System.IO.FileInfo(nomeFileFull)
			If fi.Exists Then
				fi.Delete()
			Else
				LogMsg("EliminaFileDaQuadra() File non più esistente. filename:" &amp; nomeFileFull)
			End If
		End Using

	Catch  e As Exception
        LogMsg("EliminaFileDaQuadra() ECCEZZIONE:" &amp; e.Message)
	Finally

	End Try


End Sub


Sub AggiorrnaMembri(source As String, dest As String)
	Dim objDest As DBVarObjCmdTarget
	Dim objSource As DBVarObjCmdTarget
	Dim MemberDest As DBVarObjCmdTarget
	Dim MemberSource As DBVarObjCmdTarget

	Dim mCount As Integer	'contatore dei membri

	Dim etSource As movicon.eVariableType
	Dim etDest As movicon.eVariableType

	objSource 	= GetVariableObject(source)
	objDest 	= GetVariableObject(dest)


	mCount = 0	'inizializzo a 0

	MemberSource 	= objSource.GetMemberObjectFromIndex(mCount)
	MemberDest 		= objDest.GetMemberObjectFromIndex(mCount)

	'guardo se le var hanno tipo identico
	etSource 	= objSource.GetType()
	etDest 		= objDest.GetType()

	If (etSource = etDest) Then
		While (Not MemberSource Is Nothing) And (Not MemberDest Is Nothing )
			'DebugMsg "AggiorrnaMembri() -&gt; MemberSource name = " 	&amp; MemberSource.GetName 	&amp; "; value = " &amp; CStr(MemberSource.Value) 	&amp; "; Tipo = " &amp; CStr(MemberSource.GetType())
			'DebugMsg "AggiorrnaMembri() -&gt; MemberDest name = " 		&amp; MemberDest.GetName 	&amp; "; value = " &amp; CStr(MemberDest.Value) 	&amp; "; Tipo = " &amp; CStr(MemberDest.GetType())

			etSource 	= MemberSource.GetType()
			etDest 		= MemberDest.GetType()

			If (etSource = etDest) Then
				MemberDest.Value = MemberSource.Value
			End If

			mCount = mCount + 1
			MemberSource 	= objSource.GetMemberObjectFromIndex(mCount)
			MemberDest 		= objDest.GetMemberObjectFromIndex(mCount)
		End While

	End If

	MemberSource 	= Nothing
	MemberDest 		= Nothing
	objSource 		= Nothing
	objDest 		= Nothing

End Sub

Sub ResetDatiMembriStruttura(varname As String)
	'metto a 0 i membri di tipo numerico
	'a "" i membri stringa
	'a false i bit

	Dim objVar As DBVarObjCmdTarget
	Dim MemberVar As DBVarObjCmdTarget

	Dim mCount As Integer	'contatore dei membri
	Dim et As movicon.eVariableType

	objVar = GetVariableObject(varname)

	et = objVar.GetType()

	If et &lt;&gt; movicon.eVariableType.enum_VAR_TYPE_STRUCT Then
		DebugMsg 		"ResetDatiMembriStruttura() -&gt; Variabile = " 	&amp; varname 	&amp; " NON è una Struct."
		Exit Sub
	End If

	mCount = 0	'inizializzo a 0

	MemberVar 	= objVar.GetMemberObjectFromIndex(mCount)

	While Not MemberVar Is Nothing
		DebugMsg 		"ResetDatiMembriStruttura() -&gt; MemberVar name = " 	&amp; MemberVar.GetName 	&amp; "; value = " &amp; CStr(MemberVar.Value) 	&amp; "; Tipo = " &amp; CStr(MemberVar.GetType())
		'Debug.Print 	"ResetDatiMembriStruttura() -&gt; MemberVar name = " 	&amp; MemberVar.GetName 	&amp; "; value = " &amp; CStr(MemberVar.Value) 	&amp; "; Tipo = " &amp; CStr(MemberVar.GetType())

		et = MemberVar.GetType()
		Select Case et
			Case movicon.eVariableType.enum_VAR_TYPE_BIT
				MemberVar.Value 	= False

			Case movicon.eVariableType.enum_VAR_TYPE_BYTE _
				, movicon.eVariableType.enum_VAR_TYPE_DOUBLE _
				, movicon.eVariableType.enum_VAR_TYPE_DWORD _
				, movicon.eVariableType.enum_VAR_TYPE_FLOAT _
				, movicon.eVariableType.enum_VAR_TYPE_SIGNBYTE _
				, movicon.eVariableType.enum_VAR_TYPE_SIGNDWORD _
				, movicon.eVariableType.enum_VAR_TYPE_SIGNWORD _
				, movicon.eVariableType.enum_VAR_TYPE_WORD

				MemberVar.Value 	= 0

			Case movicon.eVariableType.enum_VAR_TYPE_STRING
				MemberVar.Value 	= ""
			Case Else
				'tipo non resettabile :movicon.eVariableType.enum_VAR_TYPE_ARRAY movicon.eVariableType.enum_VAR_TYPE_E_UNKNOWN movicon.eVariableType.enum_VAR_TYPE_STRUCT
		End Select

		mCount = mCount + 1
		MemberVar 	= objVar.GetMemberObjectFromIndex(mCount)
	End While
	MemberVar 	= Nothing
	objVar 		= Nothing
End Sub

Function PezzoPiuVecchio() As Integer
	PezzoPiuVecchio = 0

	If [Q1_In:PezzoPronto] And [Q2_In:PezzoPronto] Then
		'ho due pezzi pronti allora prendo quello che ha il timestamp più vecchio
		Dim objRet1 As DBVarObjCmdTarget
		Dim dTimeStamp1 As Date
		Dim nMS1 As Integer
		Dim dt1 As Double

		Dim objRet2 As DBVarObjCmdTarget
		Dim dTimeStamp2 As Date
		Dim nMS2 As Integer
		Dim dt2 As Double

		Dim differenza As Double

		objRet1 = GetVariableObject("Q1_In:PezzoPronto")
		dTimeStamp1 = objRet1.GetTimeStamp()
		nMS1 = objRet1.GetTimeStampMs()
		dt1 = CLng(dTimeStamp1) * 1000
		dt1 = dt1 + nMS1

		objRet2 = GetVariableObject("Q2_In:PezzoPronto")
		dTimeStamp2 = objRet2.GetTimeStamp()
		nMS2 = objRet2.GetTimeStampMs()
		dt2 = CLng(dTimeStamp2) * 1000
		dt2 = dt2 + nMS2

		differenza = dt1 - dt2
		DebugMsg "PezzoPiuVecchio() -&gt; differenza = dt1-dt2 = " &amp; CStr(dt1 -dt2)

		If differenza &gt; 0 Then
			'pezzo da Q1 più recente
			PezzoPiuVecchio = 2	'prendo da Q2 perchè più vecchio
		Else
			PezzoPiuVecchio = 1	'prendo da Q1 perchè più vecchio
		End If

		objRet1 = Nothing
		objRet2 = Nothing
	Else
		'ho solo un pezzo pronto o nessuno
		If [Q1_In:PezzoPronto] Then
			PezzoPiuVecchio = 1
		End If
		If [Q2_In:PezzoPronto] Then
			PezzoPiuVecchio = 2
		End If
		'se nessun pezzo pronto PezzoPiuVecchio = 0
	End If

End Function


Function SuperatoTimeout(ByRef lastcheck As Double, tout As Integer) As Boolean
	Dim tempo As Double
	tempo = Abs(lastcheck - Now())
	If tempo &gt; tout Then
		SuperatoTimeout = True
	Else
		SuperatoTimeout = False
	End If

End Function


Sub DebugMsg(msg As String)
	Dim prefix As String
	prefix = "GestioneZonaR1.movbas -&gt; "
	Debug.Print prefix &amp; msg
End Sub

Sub LogMsg(msg As String)
	Dim prefix As String
	prefix = "GestioneZonaR1.movbas -&gt; "
	Debug.Print prefix &amp; msg
End Sub



</ScriptCode>
<BreakPoints xsi:type="xsd:base64Binary">AiB1AOYAlQFJAoQCCwRzBC8FnwUbBg==</BreakPoints>
<Mode RunAtServer="1" UseUIInterface="1" SeparateThread="1" UseItsTrace="1" ModalDialogs="0"/>
<Execution ThreadPriority="0" StatusVariable="" MaxInstances="1" SleepExecution="0" SyncroScriptTimeout="5000"/>
</MovResource>
