<?xml version="1.0" encoding="ISO-8859-1" ?>
<MovResource xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
<ScriptCode StartSel="8583" SelLength="0" OutStatusBar="1" OutLog="1" OutPrinter="1">'#Reference {90B4B163-0535-3F3A-9F70-3F595C86A26B}#1.0#0#C:\Program Files (x86)\Progea\Movicon11.4\CncCOMItfc.tlb#CncCOMItfc#CncCOMItfc
'Sostituita la Variabile 'Q1_Out_err' con il nuovo nome 'Q1_In'
'Sostituita la Variabile 'Q1_In' con il nuovo nome 'Q1_Out'
'Sostituita la Variabile 'Q1_Out' con il nuovo nome 'Q1_Out_err'

Option Explicit

Private Const IP_SUCCESS As Long = 0
Private Const IP_STATUS_BASE As Long = 11000
Private Const IP_BUF_TOO_SMALL As Long = (11000 + 1)
Private Const IP_DEST_NET_UNREACHABLE As Long = (11000 + 2)
Private Const IP_DEST_HOST_UNREACHABLE As Long = (11000 + 3)
Private Const IP_DEST_PROT_UNREACHABLE As Long = (11000 + 4)
Private Const IP_DEST_PORT_UNREACHABLE As Long = (11000 + 5)
Private Const IP_NO_RESOURCES As Long = (11000 + 6)
Private Const IP_BAD_OPTION As Long = (11000 + 7)
Private Const IP_HW_ERROR As Long = (11000 + 8)
Private Const IP_PACKET_TOO_BIG As Long = (11000 + 9)
Private Const IP_REQ_TIMED_OUT As Long = (11000 + 10)
Private Const IP_BAD_REQ As Long = (11000 + 11)
Private Const IP_BAD_ROUTE As Long = (11000 + 12)
Private Const IP_TTL_EXPIRED_TRANSIT As Long = (11000 + 13)
Private Const IP_TTL_EXPIRED_REASSEM As Long = (11000 + 14)
Private Const IP_PARAM_PROBLEM As Long = (11000 + 15)
Private Const IP_SOURCE_QUENCH As Long = (11000 + 16)
Private Const IP_OPTION_TOO_BIG As Long = (11000 + 17)
Private Const IP_BAD_DESTINATION As Long = (11000 + 18)
Private Const IP_ADDR_DELETED As Long = (11000 + 19)
Private Const IP_SPEC_MTU_CHANGE As Long = (11000 + 20)
Private Const IP_MTU_CHANGE As Long = (11000 + 21)
Private Const IP_UNLOAD As Long = (11000 + 22)
Private Const IP_ADDR_ADDED As Long = (11000 + 23)
Private Const IP_GENERAL_FAILURE As Long = (11000 + 50)
Private Const MAX_IP_STATUS As Long = (11000 + 50)
Private Const IP_PENDING As Long = (11000 + 255)
Private Const PING_TIMEOUT As Long = 500
Private Const WS_VERSION_REQD As Long = &amp;H101
Private Const MIN_SOCKETS_REQD As Long = 1
Private Const SOCKET_ERROR As Long = -1
Private Const INADDR_NONE As Long = &amp;HFFFFFFFF
Private Const MAX_WSADescription As Long = 256
Private Const MAX_WSASYSStatus As Long = 128

Private Type ICMP_OPTIONS
    Ttl             As Byte
    Tos             As Byte
    Flags           As Byte
    OptionsSize     As Byte
    OptionsData     As Long
End Type

Private Type ICMP_ECHO_REPLY
    Address         As Long
    status          As Long
    RoundTripTime   As Long
    DataSize        As Long 'formerly integer
   'Reserved        As Integer
    DataPointer     As Long
    Options         As ICMP_OPTIONS
    Data            As String * 250
End Type

Private Type WSADATA
   wVersion As Integer
   wHighVersion As Integer
   szDescription(0 To MAX_WSADescription) As Byte
   szSystemStatus(0 To MAX_WSASYSStatus) As Byte
   wMaxSockets As Long
   wMaxUDPDG As Long
   dwVendorInfo As Long
End Type


Dim Q2_OutputPerQuadra As Single
Dim Q2_ProvaComunicaz As Single

Dim WriteR_640 As Single
Dim WriteR_639 As Single

Dim ReadR_640 As Single
Dim ReadR_641 As Single
Dim ReadR_55 As Single

Dim File As String

Dim Q2ChkPing As String	'var per chk ping
Dim Q2ChkPingOk As String	'valore di ping Ok, assegnato in loading

Dim success As Long

Dim IsacCnc As CncCOMItfc.CnItfcItfc
Dim ECHO As ICMP_ECHO_REPLY


Private Declare Function IcmpCreateFile Lib "icmp.dll" () As Long

Private Declare Function IcmpCloseHandle Lib "icmp.dll" _
   (ByVal IcmpHandle As Long) As Long

Private Declare Function IcmpSendEcho Lib "icmp.dll" _
   (ByVal IcmpHandle As Long, _
    ByVal DestinationAddress As Long, _
    ByVal RequestData As String, _
    ByVal RequestSize As Long, _
    ByVal RequestOptions As Long, _
    ReplyBuffer As ICMP_ECHO_REPLY, _
    ByVal ReplySize As Long, _
    ByVal Timeout As Long) As Long

Private Declare Function WSAGetLastError Lib "wsock32" () As Long

Private Declare Function WSAStartup Lib "wsock32" _
   (ByVal wVersionRequired As Long, _
    lpWSADATA As WSADATA) As Long

Private Declare Function WSACleanup Lib "wsock32" () As Long

Private Declare Function gethostname Lib "wsock32" _
   (ByVal szHost As String, _
    ByVal dwHostLen As Long) As Long

Private Declare Function gethostbyname Lib "wsock32" _
   (ByVal szHost As String) As Long

Private Declare Sub CopyMemory Lib "kernel32" _
   Alias "RtlMoveMemory" _
  (xDest As Any, _
   xSource As Any, _
   ByVal nbytes As Long)

Private Declare Function inet_addr Lib "wsock32" _
   (ByVal s As String) As Long


Private Function Ping(sAddress As String, _
                     sDataToSend As String, _
                     ECHO As ICMP_ECHO_REPLY) As Long

	'If Ping succeeds :
	'.RoundTripTime = time in ms for the ping to complete,
	'.Data is the data returned (NULL terminated)
	'.Address is the Ip address that actually replied
	'.DataSize is the size of the string in .Data
	'.Status will be 0
	'
	'If Ping fails .Status will be the error code

	Dim hPort As Long
	Dim dwAddress As Long

	'convert the address into a long representation
	dwAddress = inet_addr(sAddress)

	'if a valid address..
	If dwAddress &lt;&gt; INADDR_NONE Then

    	'open a port
		hPort = IcmpCreateFile()

		'and if successful,
    	If hPort Then
    		'ping it.
        	Call IcmpSendEcho(hPort, _
                           dwAddress, _
                           sDataToSend, _
                           Len(sDataToSend), _
                           0, _
                           ECHO, _
                           Len(ECHO), _
                           PING_TIMEOUT)

    		'return the status as ping succes and close
    		Ping = ECHO.Status
    		Call IcmpCloseHandle(hPort)
    	End If
	Else
    	'the address format was probably invalid
        Ping = INADDR_NONE
	End If
End Function

Private Sub SocketsCleanup()
	If WSACleanup() &lt;&gt; 0 Then
    	MsgBox "Windows Sockets error occurred in Cleanup.", vbExclamation, GetProjectTitle
	End If
End Sub

Private Function SocketsInitialize() As Boolean
	Dim WSAD As WSADATA

	SocketsInitialize = WSAStartup(WS_VERSION_REQD, WSAD) = IP_SUCCESS
End Function

Private Function GetStatusCode(status As Long) As String
	Dim msg As String

	Select Case status
    	Case IP_SUCCESS:               msg = "OK"
    	Case INADDR_NONE:              msg = "inet_addr: bad IP format"
    	Case IP_BUF_TOO_SMALL:         msg = "ip buf too_small"
    	Case IP_DEST_NET_UNREACHABLE:  msg = "ip dest net unreachable"
    	Case IP_DEST_HOST_UNREACHABLE: msg = "ip dest host unreachable"
    	Case IP_DEST_PROT_UNREACHABLE: msg = "ip dest prot unreachable"
    	Case IP_DEST_PORT_UNREACHABLE: msg = "ip dest port unreachable"
    	Case IP_NO_RESOURCES:          msg = "ip no resources"
    	Case IP_BAD_OPTION:            msg = "ip bad option"
    	Case IP_HW_ERROR:              msg = "ip hw_error"
    	Case IP_PACKET_TOO_BIG:        msg = "ip packet too_big"
    	Case IP_REQ_TIMED_OUT:         msg = "ip req timed out"
    	Case IP_BAD_REQ:               msg = "ip bad req"
    	Case IP_BAD_ROUTE:             msg = "ip bad route"
    	Case IP_TTL_EXPIRED_TRANSIT:   msg = "ip ttl expired transit"
    	Case IP_TTL_EXPIRED_REASSEM:   msg = "ip ttl expired reassem"
    	Case IP_PARAM_PROBLEM:         msg = "ip param_problem"
    	Case IP_SOURCE_QUENCH:         msg = "ip source quench"
    	Case IP_OPTION_TOO_BIG:        msg = "ip option too_big"
    	Case IP_BAD_DESTINATION:       msg = "ip bad destination"
    	Case IP_ADDR_DELETED:          msg = "ip addr deleted"
    	Case IP_SPEC_MTU_CHANGE:       msg = "ip spec mtu change"
    	Case IP_MTU_CHANGE:            msg = "ip mtu_change"
    	Case IP_UNLOAD:                msg = "ip unload"
    	Case IP_ADDR_ADDED:            msg = "ip addr added"
    	Case IP_GENERAL_FAILURE:       msg = "ip general failure"
    	Case IP_PENDING:               msg = "ip pending"
    	Case PING_TIMEOUT:             msg = "ping timeout"
    	Case Else:                     msg = "unknown  msg returned"
	End Select

	GetStatusCode = CStr(status) &amp; "   [ " &amp; msg &amp; " ]"
End Function

Sub Main
	Dim lastTimer As Double
	Dim tempoEsecuzione As Double

	Dim oldTestComunicazione As Boolean
	Dim oldTimerTestComunicazione As Double
	Dim diffTempoComunicazione As Double

	Dim ip As String
	Dim nErrIsac As Integer

	'inizializzo
	Set IsacCnc = New CncCOMItfc.CnItfcCls
	[Q2_Out:NonComunica] = True
	Q2_ProvaComunicaz = 0

	If [loc_ImpostazioniImpianto:IP_Q2] &lt;&gt; "" Then
		ip = [loc_ImpostazioniImpianto:IP_Q2]
	Else
		ip = "10.200.200.31"
	End If

	nErrIsac = 0

	'esegui ping fino a quando non ho connessione
	While [Q2_Out:NonComunica] And Not IsInStoppingMode
ConessioneCnc:
	On Error GoTo ErrConessioneCnc
		If OkPing(ip) Then
			[Q2_Out:NonComunica] = False
			Attendi(2.5, [Q2_VarR:tempoAttesa])
		Else
			[Q2_Out:NonComunica] = True
			Attendi(2.5, [Q2_VarR:tempoAttesa])
		End If

		If Not [Q2_Out:NonComunica] Then
			IsacCnc.machinename = ip
			IsacCnc.DataAType = CncAType_atShort
			Q2_ProvaComunicaz = 1
		End If
	Wend

	While Not IsInStoppingMode
Ciclo:
		'ripeto ping prima di ogni lettura per evitare errori strani dovuti al driver isac
		If OkPing(ip)  Then
			[Q2_Out:NonComunica] = False
			lastTimer = Timer()

'--------------------------------------------------------------------------
'LETTURA
			Err.Clear
			On Error GoTo ErrLettura

			ReadR_641=IsacCnc.ReadR(641)	'IsacCnc.ReadR(641)
			ReadR_640=IsacCnc.ReadR(640)	'IsacCnc.ReadR(640)
			ReadR_55=IsacCnc.ReadR(55)		'IsacCnc.ReadR(55)

			If ReadR_55 &lt;&gt; 0 Then
				'Q2_FotocellScaricatore5 = True
				[Q2_Out:FotocellScaricatore5] = True
			Else
				'Q2_FotocellScaricatore5 = False
				[Q2_Out:FotocellScaricatore5] = False
			End If

			[Q2_Out:TestComunicazione] 	= IIf((ReadR_641 And 1) = 1, True, False)
			[Q2_Out:On] 				= IIf((ReadR_641 And 2) = 2, True, False)
			[Q2_Out:InCiclo]			= IIf((ReadR_641 And 4) = 4, True, False)
			[Q2_Out:PezzoPronto]		= IIf((ReadR_641 And 8) = 8, True, False)
			[Q2_Out:PezzoSbloccato]		= IIf((ReadR_641 And 16) = 16, True, False)
			[Q2_Out:NonInEmergenza]		= IIf((ReadR_641 And 32) = 32, True, False)
			[Q2_Out:NonInHold]			= IIf((ReadR_641 And 64) = 64, True, False)
			[Q2_Out:RipariQuadraOk]		= IIf((ReadR_641 And 128) = 128, True, False)

			'verifico se sto comunicando
			If [Q2_Out:TestComunicazione] &lt;&gt; oldTestComunicazione Then
				oldTestComunicazione = [Q2_Out:TestComunicazione]
				oldTimerTestComunicazione = Timer()
			End If

			diffTempoComunicazione = Timer() - oldTimerTestComunicazione
			[Q2_VarR:tempoLettura] = diffTempoComunicazione
			If diffTempoComunicazione &gt; 5 Then
				[Q2_Out:NonComunica] = True
			Else
				[Q2_Out:NonComunica] = False
			End If
'FINE LETTURA
'--------------------------------------------------------------------------


'--------------------------------------------------------------------------
'SCRITTURA
			Q2_OutputPerQuadra = 0

			'Q2_OutputPerQuadra.0 =	[Q2_In:TestComunicazionePc]
			Q2_OutputPerQuadra = CInt([Q2_In:TestComunicazionePc])

			'Q2_OutputPerQuadra.1 =	[Q2_In:R1_Ok]
			Q2_OutputPerQuadra = Q2_OutputPerQuadra + 2 * Abs(CInt([Q2_In:R1_Ok]))

			'Q2_OutputPerQuadra.2 =	[Q2_In:R1_FuoriIngombro]
			Q2_OutputPerQuadra = Q2_OutputPerQuadra + 4 * Abs(CInt([Q2_In:R1_FuoriIngombro]))

			'Q2_OutputPerQuadra.3 =	[Q2_In:PezzoScaricato]
			Q2_OutputPerQuadra = Q2_OutputPerQuadra + 8 * Abs(CInt([Q2_In:PezzoScaricato]))

			'Q2_OutputPerQuadra.4 =	[Q2_In:SbloccaPezzo]
			Q2_OutputPerQuadra = Q2_OutputPerQuadra + 16 * Abs(CInt([Q2_In:SbloccaPezzo]))

			'Q2_OutputPerQuadra.5 =	[Q2_In:LineaNonInEmergenza]
			Q2_OutputPerQuadra = Q2_OutputPerQuadra + 32 * Abs(CInt([Q2_In:LineaNonInEmergenza]))

			'Q2_OutputPerQuadra.6 =	[Q2_In:LineaNonInHold]
			Q2_OutputPerQuadra = Q2_OutputPerQuadra + 64 * Abs(CInt([Q2_In:LineaNonInHold]))

			'Q2_OutputPerQuadra.7 =	[Q2_In:RipariR1_Ok]
			Q2_OutputPerQuadra = Q2_OutputPerQuadra + 128 * Abs(CInt([Q2_In:RipariR1_Ok]))

			On Error GoTo ErrLettura

			[Q2_VarR:WriteR_640] = CInt(Q2_OutputPerQuadra)
			WriteR_640 = CInt(Q2_OutputPerQuadra)

			[Q2_VarR:WriteR_639] = CInt(Q2_ProvaComunicaz)
			WriteR_639 = CInt(Q2_ProvaComunicaz)

			IsacCnc.writeR(640,CSng(WriteR_640))
			IsacCnc.writeR(639,CSng(WriteR_639))
			
'FINE SCRITTURA
'--------------------------------------------------------------------------
			'incremento il contatore per controllo comunicazione sulla quadra
			Q2_ProvaComunicaz = Q2_ProvaComunicaz + 1
			If Q2_ProvaComunicaz &gt;= 10000 Then
				Q2_ProvaComunicaz = 1
			End If

			'controllo tempo ciclo
			tempoEsecuzione = Abs(Timer() - lastTimer)
			If tempoEsecuzione &gt; 1 Then
				Debug.Print "Tempo esecuzione DriverQuadra Q2 = " &amp; CStr(tempoEsecuzione)

			End If
			[Q2_VarR:tempoCiclo] = tempoEsecuzione

		Else
			'no ping
			[Q2_Out:NonComunica] = True
		End If

		DoEvents
		
		Attendi(0.3, [Q2_VarR:tempoAttesa])
	Wend

	'rilascio risorse il ciclo
	Set IsacCnc = Nothing

Exit Sub
ErrConessioneCnc:
	Debug.Print "DriverQuadra Q2 Errore Connessione Cnc; Error code: " &amp; Err.Number &amp; "; Err.desc = " &amp; Err.Description &amp; "; nErrIsac = " &amp; CStr(nErrIsac)
	Err.Clear
	alm_Q2_ErrComunicazione = True
	MsgBox("Attenzione Errore Connessione con Quadra Q2." &amp; vbCrLf &amp; _
			"Richiesto riavvio della Supervisione", vbOkOnly, "Driver Quadra Q2")
	'termino esecuzione
	Set IsacCnc = Nothing
Exit Sub
ErrLettura:
'evito ebventuale overflow
	'If nErrIsac &gt; 32000 Then
	'	nErrIsac = 1
	'End If
	nErrIsac = nErrIsac + 1
	Debug.Print "DriverQuadra Q2 Errore Lettura; Error code: " &amp; Err.Number &amp; "; Err.desc = " &amp; Err.Description &amp; "; nErrIsac = " &amp; CStr(nErrIsac)
	Err.Clear
	[Q2_Out:NonComunica] = True
	If nErrIsac &gt; 10 Then
		nErrIsac = 1
		alm_Q2_ErrComunicazione = True
		MsgBox("Attenzione Errore comunicazione con Quadra Q2." &amp; vbCrLf &amp; _
				"Richiesto riavvio della Supervisione", vbOkOnly, "Driver Quadra Q2")
		'termino esecuzione
		Exit Sub
	Else
		'riprendo
		GoTo Ciclo
	End If
End Sub

Sub Attendi(tout As Integer, ByRef movVar As Double)
	Dim tExec As Double
	Dim lastT As Double
	Dim lastExec As Double
	Dim diffT As Double

	lastT = Timer()

	tExec = Abs(Timer() - lastT)
		While (tExec &lt; tout) And Not IsInStoppingMode
			DoEvents
			tExec = Abs(Timer() - lastT)
			diffT = Timer() - lastT
			movVar = diffT
		Wend
End Sub

Function OkPing(ipaddr As String) As Boolean
	Dim ChkPing As String
	Dim OkChkPing As String

	OkPing =  False

	OkChkPing = "0   [ OK ]"

	On Error GoTo OkPingErr
	If SocketsInitialize() Then
		'ping the IP by passing the address,
		'text to send, and the ECHO structure.
		success = Ping((ipaddr), ("TestPing"), ECHO)

		ChkPing = GetStatusCode(success)
		If (ChkPing &lt;&gt; OkChkPing) Then
			OkPing = False
		Else
			OkPing = True
		End If
	Else
		OkPing = False
	End If
Exit Function
OkPingErr:
	Debug.Print "Ping error. IP = " &amp; ipaddr &amp; "; Error code: " &amp; Err.Number &amp; "; Err.desc = " &amp; Err.Description
	Err.Clear
End Function
</ScriptCode>
<Mode RunAtServer="1" UseUIInterface="0" SeparateThread="1" UseItsTrace="0" ModalDialogs="0"/>
<Execution ThreadPriority="1" StatusVariable="" MaxInstances="1" SleepExecution="200" SyncroScriptTimeout="5000"/>
</MovResource>
