<?xml version="1.0" encoding="ISO-8859-1" ?>
<MovResource xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
<ScriptCode StartSel="53563" SelLength="0" OutStatusBar="1" OutLog="1" OutPrinter="0">'#Reference #System.Data, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089, processorArchitecture=x86
'Sostituita la Variabile 'Assemblatrice_Out' con il nuovo nome 'Assemblatrice_In'
'Sostituita la Variabile 'alm_Step_Tout' con il nuovo nome 'alm_Step_ToutR1_4200'
'#Language "WWB.NET"

Option Explicit

Imports System
Imports System.IO
Imports System.Collections
Imports System.Collections.Generic
Imports System.Collections.ObjectModel
Imports System.Data.Odbc

Public Structure DSnMembers
    Dim DSn As String
    Dim Uid As String
    Dim Pwd As String
End Structure

Public Structure PosQuartina
    Dim mag As Integer
    Dim cass As Integer
End Structure

Public Structure stEstrattore
    Public DEPO As Boolean
    Public ID_CASSETTO As Integer
    Public ID_QUARTINA As String
    Public NOME_PEZZO_UNICO As String
    Public POSIZIONE As Integer
    Public PRONTO As Boolean
    Public STROBE As Boolean
End Structure

Const TOUT_RICHIEDIBILE 	As Integer 	= 1 'in secondi
Const TOUT_STEP				As Integer	= 2 'in secondi
Const UPDATE_ESTRATTORI		As Integer = 16500

Dim MysSqlConnectionString As String
Dim richiedibileLastCheck As Double
Dim enableLogMsg As Boolean = True

Dim codaMAG1_ES2 As New System.Collections.Queue()
Dim codaMAG2_ES2 As New System.Collections.Queue()

Sub Main()
	Dim ValutaProssimaCondizione As Boolean 'serve per valutare le condizioni dello stato Attesa

	Dim rikDaMagazzino As Integer
	Dim POSIZIONE As PosQuartina
	Dim rikEstrattore As stEstrattore
	Dim prefix_varname_pezzo As String
	Dim assegnaMissioneRobot As PosQuartina

	Dim stepTout As Double

	Dim ret As Integer
	Dim retMsgBox As VbMsgBoxResult

	Dim varname_estrattore As String
	Dim strEstrattore As String


	MysSqlConnectionString = [loc_ImpostazioniImpianto:MysSqlConnectionString]
	MysSqlConnectionString = "DRIVER={MySQL ODBC 5.3 ANSI Driver};" &amp; _
      "SERVER=localhost;" &amp; _
      "DATABASE=gualini;" &amp; _
      "UID=root;" &amp; _
      "PASSWORD=co.mar;" &amp; _
      "OPTION=3;"

	'inizializzo alcune variabili
	enableLogMsg = True

    If StatoCicloScarico &lt; 100 Then
		StatoCicloScarico = 1000
    End If
    If StatoCicloScarico &lt;&gt; 1000 Then
    	retMsgBox = MsgBox("Attenzione: StatoCicloScarico = " &amp; CStr(StatoCicloScarico) &amp; "!" &amp; vbCrLf &amp; "Resettare?", vbYesNo, "Attenzione")
    	If retMsgBox = vbYes Then
			StatoCicloScarico = 1000
    	End If
    End If

    'forzo aggiornamento estrattori
    [MAG1_ES2_ACT_OLD:ID_CASSETTO] = UPDATE_ESTRATTORI
    [MAG2_ES2_ACT_OLD:ID_CASSETTO] = UPDATE_ESTRATTORI

	'aggiorno cassetti pieni e disponibili
    AggiornaCassettiPieni(MysSqlConnectionString, 1)
	AggiornaCassettiPieni(MysSqlConnectionString, 2)
    AggiornaCassettiDisponibili(MysSqlConnectionString, 1)
	AggiornaCassettiDisponibili(MysSqlConnectionString, 2)
	AggiornaCassettiInRiempimento(MysSqlConnectionString, 1)
	AggiornaCassettiInRiempimento(MysSqlConnectionString, 2)



	'#######TODO DEBUG
	Debug.Clear
	richiedibileLastCheck = Timer()
	Debug.Print CStr(richiedibileLastCheck)
	richiedibileLastCheck = Timer() - TOUT_RICHIEDIBILE
	Debug.Print CStr(richiedibileLastCheck)
	If SuperatoTimeout(richiedibileLastCheck, TOUT_RICHIEDIBILE) Then
		Debug.Print "GestioneZonaR2.movbas -&gt; DEBUG Main() -&gt; SuperatoTimeout -&gt; Timer() = " &amp; CStr(Timer()) &amp; "; Now()= " &amp; CStr(Now())
	End If

	'LeggiDatiPezzo(connectionString As String, mag As Integer, cass As Integer)
	'LeggiDatiPezzo(MysSqlConnectionString, 2, 29)




	'################
	Do
		'azioni da fare tutti i cicli
		If [loc_ImpostazioniImpianto:ResetCicloR2] Then
			StatoCicloScarico = 100
		End If


		'gestisco eventuali aggiornamentii da fare al DB per le posizioni degli estrattori
		AggiornaPosizioniEstrattori_ZONA_R2_ES2(MysSqlConnectionString)
		ProcessaCodaEstrattori_ZONA_R2()

		If Not alm_Presenti Then
			Select Case StatoCicloScarico

				Case 100	'StatoIniziale
					DebugMsg "StatoCicloSarico = 100	'StatoIniziale"
					StatoCicloScarico = 1000			'Attesa

				Case 1000	'Attesa
					'DebugMsg "StatoCicloScarico = 1000	'Attesa"
					ValutaProssimaCondizione = True
					'inizio a scorrere le condizioni di uscita dallo stato

					'condizione di richiesta nuovo casseto da magazzino
					If ValutaProssimaCondizione Then
						'controllo solo ogni tanto se c'è un cassetto pronto
						If SuperatoTimeout(richiedibileLastCheck, TOUT_RICHIEDIBILE) Then
							richiedibileLastCheck = Timer()
							rikDaMagazzino = CondizioneRikCassettoMagazzino()
							If rikDaMagazzino &gt; 0 Then
								ValutaProssimaCondizione = False
								LogMsg "StatoCicloScarico = 1000	'Attesa	;CondizioneRikCassettoMagazzino &gt; 0 -&gt; next StatoCicloScarico = 2100	'RichiediCassettoDaMagazzino"
								'richiedibileLastCheck = Timer() - TOUT_RICHIEDIBILE 'voglio che alla chiamata il test sia fatto subito e quindi SuperatoTimeout() deve tornare true
								StatoCicloScarico = 2100			'RichiediCassettoDaMagazzino
							End If
						End If
					End If

					'condizione per assegnare missione a Robot R2
					If ValutaProssimaCondizione Then
						assegnaMissioneRobot = CondizioneAssegnaMissioneRobot()
						If assegnaMissioneRobot.mag &gt; 0 Then
							ValutaProssimaCondizione = False
							LogMsg "StatoCicloScarico = 1000	'Attesa	;CondizioneAssegnaMissioneRobot = True -&gt; next StatoCicloScarico = 4100	'AssegnaMissioneAlRobotR2"
							[R2_STATUS:FINE_MISSIONE_ACK] = False	'forzo per sicurezza nel caso di ripartenze da prove
							StatoCicloScarico = 4100			'AssegnaMissioneAlRobotR2
						End If
					End If

					'condizione per FineRobotR2
					'uso i campi di R2_STATUS (MAGAZZINO, CASSETTO, ID_QUARTINA) per tener traccia di aver già gestito il fineRobot
					'devo ricordare di mettere a zero questi campi dopo FineRobot
					If ValutaProssimaCondizione _
						And [R2_STATUS:FINE_MISSIONE]  _
						And [R2_STATUS:MAGAZZINO] &gt; 0 _
						And [R2_STATUS:CASSETTO] &gt; 0 _
						And [R2_STATUS:ID_QUARTINA] &lt;&gt; "" _
						Then

						ValutaProssimaCondizione = False
						LogMsg "StatoCicloScarico = 1000	'Attesa	;CondizioneFineRobot = True -&gt; next StatoCicloScarico = 6100	'FineRobot"
						StatoCicloScarico = 6100	'FineRobot
					End If

					'condizione per ErroreRobotR2
					'uso i campi di R2_STATUS (MAGAZZINO, CASSETTO, ID_QUARTINA) per tener traccia di aver già gestito il fineRobot
					'devo ricordare di mettere a zero questi campi dopo FineRobot
					If ValutaProssimaCondizione _
						And [R2_STATUS:ERR_MISSIONE] _
						And [R2_STATUS:MAGAZZINO] &gt; 0 _
						And [R2_STATUS:CASSETTO] &gt; 0 _
						And [R2_STATUS:ID_QUARTINA] &lt;&gt; "" _
						Then

						ValutaProssimaCondizione = False
						LogMsg "StatoCicloScarico = 1000	'Attesa	;CondizioneErroreRobotR2 = True -&gt; next StatoCicloScarico = 9100	'ErroreRobotR2"
						StatoCicloScarico = 9100	'ErroreRobotR2
					End If


				Case 2100	'RichiediCassettoDaMagazzino
					LogMsg "StatoCicloScarico = 2100	'RichiediCassettoDaMagazzino"
					POSIZIONE.cass = 0	'inizializzo
					POSIZIONE.mag = 0
					'cerco il cassetto richiedibile
					'If SuperatoTimeout(richiedibileLastCheck, TOUT_RICHIEDIBILE) Then
						'controllo solo ogni tanto
						'richiedibileLastCheck = Timer()
						POSIZIONE = RilevaCassettoPiuVicino(MysSqlConnectionString _
															, rikDaMagazzino _
															, [loc_ImpostazioniImpianto:ScaricoCommessaPref] _
															, [loc_ImpostazioniImpianto:ScaricoCommessaEsclusiva] _
															)
						'se ho commessa esclusiva in caso di nessun valore tornato do messaggio di alert
						If [loc_ImpostazioniImpianto:ScaricoCommessaEsclusiva] And POSIZIONE.cass = 0 Then
							msg_AlertCommessaEsclusiva_nessuno = True
						Else
							msg_AlertCommessaEsclusiva_nessuno = False
						End If
					'End If
					'leggo i dati dei pezzi dal DB e aggiungo alla coda dell'estrattore il cassetto
					If POSIZIONE.cass &gt; 0 And POSIZIONE.mag &gt; 0 Then
						'leggo i dati dei pezzi
						If LeggiDatiPezzo(MysSqlConnectionString, POSIZIONE.mag, POSIZIONE.cass) = 0 Then
							'avanzo di step per leggere richiedere il cassetto
							StatoCicloScarico = 2200	'RikCassettoInEstrattorePlc
						Else
							LogMsg "Case 2100	'RichiediCassettoDaMagazzino -&gt; ERRORE in If LeggiDatiPezzo(POSIZIONE.mag, POSIZIONE.cass) = 0 Then "
							StatoCicloScarico = 1000	'Attesa
						End If
					Else
						StatoCicloScarico = 1000	'Attesa
					End If

				Case 2200	'RikCassettoInEstrattorePlc
					LogMsg "StatoCicloScarico = 2200	'RikCassettoInEstrattorePlc"
	'				'posso fare richiesta di estrattore se EsXX_RIK:NOME_PEZZO_UNICO = EsXX_ACT:NOME_PEZZO_UNICO e EsXX_ACT:DEPO = 1 , quindi pezzo depositato
	'				'oppure se EsXX_RIK:NOME_PEZZO_UNICO = "" che significa che non ho richieste pendenti


					Select Case POSIZIONE.mag
						Case 1:
							prefix_varname_pezzo = "SCAR_M1_"
						Case 2:
							prefix_varname_pezzo = "SCAR_M2_"
					End Select


					If POSIZIONE.mag = 1  Then
						rikEstrattore.ID_CASSETTO				= POSIZIONE.cass
						rikEstrattore.ID_QUARTINA 				= "rikScaricoQrt"	'GetVariableValue(prefix_varname_pezzo &amp; "PZ1" &amp; ":ID_QUARTINA")
						rikEstrattore.NOME_PEZZO_UNICO 			= "rikScaricoPzz"	'GetVariableValue(prefix_varname_pezzo &amp; "PZ1" &amp; ":NOME_PEZZO_UNICO")
						rikEstrattore.POSIZIONE 				= 0				'GetVariableValue(varname_pezzo &amp; ":POSIZIONE")
						rikEstrattore.DEPO						= False
						rikEstrattore.PRONTO					= False
						rikEstrattore.STROBE 					= True

						strEstrattore =Serializza_stEstrattore(rikEstrattore)
						DebugMsg("	Case 2200	'RikCassettoInEstrattorePlc - codaMAG1_ES2.Enqueue(" &amp; strEstrattore &amp; ")")
						'codaMAG1_ES2.Enqueue(Serializza_stEstrattore(rikEstrattore))
						codaMAG1_ES2.Enqueue(strEstrattore)

						StatoCicloScarico = 1000	'Attesa

					ElseIf POSIZIONE.mag = 2 Then
						rikEstrattore.ID_CASSETTO				= POSIZIONE.cass
						rikEstrattore.ID_QUARTINA 				= "rikScaricoQrt"	'GetVariableValue(prefix_varname_pezzo &amp; "PZ1" &amp; ":ID_QUARTINA")
						rikEstrattore.NOME_PEZZO_UNICO 			= "rikScaricoPzz"	'GetVariableValue(prefix_varname_pezzo &amp; "PZ1" &amp; ":NOME_PEZZO_UNICO")
						rikEstrattore.POSIZIONE 				= 0				'GetVariableValue(varname_pezzo &amp; ":POSIZIONE")
						rikEstrattore.DEPO						= False
						rikEstrattore.PRONTO					= False
						rikEstrattore.STROBE 					= True

						strEstrattore =Serializza_stEstrattore(rikEstrattore)
						DebugMsg("	Case 2200	'RikCassettoInEstrattorePlc - codaMAG2_ES2.Enqueue(" &amp; strEstrattore &amp; ")")
						'codaMAG2_ES2.Enqueue(Serializza_stEstrattore(rikEstrattore))
						codaMAG2_ES2.Enqueue(strEstrattore)

						StatoCicloScarico = 1000	'Attesa
					ElseIf POSIZIONE.mag &lt;&gt; 1 And POSIZIONE.mag &lt;&gt; 2 Then
						'Throw New System.Exception("GestioneZonaR2.movbas -&gt; Main() ECCEZZIONE: Case 2200 'RikCassettoInEstrattorePlc")
						alm_StatoCiclo_R2 = True
						alm_StatoCiclo_R2_txt = "ECCEZZIONE: Case 2200 'RikCassettoInEstrattorePlc; POSIZIONE.mag = " &amp; CStr(POSIZIONE.mag) &amp; "; FARE RESET CICLO R2"
					End If

				Case 4100			'AssegnaMissioneAlRobotR2
					LogMsg "StatoCicloScarico = 4100			'AssegnaMissioneAlRobotR2"

					If [R2_STATUS:DISPONIBILE] And Not [R2_STATUS:IN_MISSIONE] Then
						[R2_STATUS:MAGAZZINO] = assegnaMissioneRobot.mag
						[R2_STATUS:CASSETTO] = assegnaMissioneRobot.cass
						If assegnaMissioneRobot.mag = 1 Then
							'DecodificaMissioniPezziR2_Mag1() ora il dato viene preso direttamente dal DB
							[R2_STATUS:ID_QUARTINA] = [SCAR_M1_PZ1:ID_QUARTINA]
						End If
						If assegnaMissioneRobot.mag = 2 Then
							'DecodificaMissioniPezziR2_Mag2() ora il dato viene preso direttamente dal DB
							[R2_STATUS:ID_QUARTINA] = [SCAR_M2_PZ1:ID_QUARTINA]
						End If
						'forzo a zero per sicurezza
						[R2_STATUS:FINE_MISSIONE] = False
						[R2_STATUS:ID_QUARTINA_SUCCESSIVA] = ""
						[R2_STATUS:POSIZIONE_PEZZO] = 0
						[R2_STATUS:PZ_DA_QUADRA] = 0

						'segnalo a R2 nuova missione
						[R2_STATUS:NUOVA_MISSIONE] = True
						StatoCicloScarico = 4195	'AttesaSegnaleRobotOccupato_settout
					End If

				Case 4195	'AttesaSegnaleRobotOccupato_settout
					If	[R2_STATUS:DISPONIBILE] Then
						stepTout = Timer()
						StatoCicloScarico = 4200	'AttesaSegnaleRobotOccupato
					End If

				Case 4200	'AttesaSegnaleRobotOccupato
					LogMsg "StatoCicloScarico = 4200	'AttesaSegnaleRobotOccupato"

					ValutaProssimaCondizione = True

					If SuperatoTimeout(stepTout, TOUT_STEP) Then
						ValutaProssimaCondizione = False
						alm_Step_ToutR2_4200 = True
						'per poter fare ripartenza devo fare reset delle struct già assegnate
						'ResetDatiMembriStruttura("")
						'ResetDatiMembriStruttura("")
						'ResetDatiMembriStruttura("")
						StatoCicloScarico = 4195	'AttesaSegnaleRobotOccupato_settout
					End If
					If	[R2_STATUS:DISPONIBILE] And [R2_STATUS:IN_MISSIONE] And ValutaProssimaCondizione Then
						alm_Step_ToutR2_4200 = False
						StatoCicloScarico = 1000	'AttesaPezzi
					End If

				Case 6100	'FineRobot
					LogMsg "StatoCicloScarico = 6100	'FineRobot"
					'elimino quartina dal DB
					ret = FineRobot(MysSqlConnectionString, [R2_STATUS:ID_QUARTINA])
					If ret &lt;&gt; 0 Then
						'Alzo allarme
						alm_FineRobotR2 = True
						'StatoCicloScarico = 1000	'Attesa
					Else
						'[R2_STATUS:FINE_MISSIONE] = False 'azzero la condizione xchè ho già inserito il pezzo

						'segnalo all'estrattore che ho depositato il pezzo
						varname_estrattore = IIf([R2_STATUS:MAGAZZINO] = 1, "MAG1_ES2_ACT", "MAG2_ES2_ACT")
						SetVariableValue(varname_estrattore &amp; ":DEPO",  True)	'pezzo depositato

						'faccio richiesta di rientro estrattore
						rikEstrattore.ID_CASSETTO				= 0 'faccio rientrare il cassetto
						rikEstrattore.ID_QUARTINA 				= ""
						rikEstrattore.NOME_PEZZO_UNICO 			= ""
						rikEstrattore.POSIZIONE 				= 0
						rikEstrattore.DEPO						= False
						rikEstrattore.PRONTO					= False
						rikEstrattore.STROBE 					= True

						'aggiungo richiesta a coda estrattore
						If [R2_STATUS:MAGAZZINO] = 1  Then

							strEstrattore =Serializza_stEstrattore(rikEstrattore)
							DebugMsg("Case 6100	'FineRobot - codaMAG1_ES2.Enqueue(" &amp; strEstrattore &amp; ")")
							'codaMAG1_ES2.Enqueue(Serializza_stEstrattore(rikEstrattore))
							codaMAG1_ES2.Enqueue(strEstrattore)
						ElseIf [R2_STATUS:MAGAZZINO] = 2 Then
							strEstrattore =Serializza_stEstrattore(rikEstrattore)
							DebugMsg("Case 6100	'FineRobot - codaMAG2_ES2.Enqueue(" &amp; strEstrattore &amp; ")")
							'codaMAG2_ES2.Enqueue(Serializza_stEstrattore(rikEstrattore))
							codaMAG2_ES2.Enqueue(strEstrattore)

						End If

						'faccio reset dei membri pezzo
						If     [R2_STATUS:MAGAZZINO] = 1  Then
							ResetDatiMembriStruttura("SCAR_M1_PZ1")
							ResetDatiMembriStruttura("SCAR_M1_PZ2")
							ResetDatiMembriStruttura("SCAR_M1_PZ3")
							ResetDatiMembriStruttura("SCAR_M1_PZ4")
						ElseIf [R2_STATUS:MAGAZZINO] = 2 Then
							ResetDatiMembriStruttura("SCAR_M2_PZ1")
							ResetDatiMembriStruttura("SCAR_M2_PZ2")
							ResetDatiMembriStruttura("SCAR_M2_PZ3")
							ResetDatiMembriStruttura("SCAR_M2_PZ4")
						End If

						'passo i dati all'Assemblatrice
						If [R2_STATUS:MAGAZZINO] = 1  Then
							[Assemblatrice_In:ALTEZZA_FINESTRA]	= ([SCAR_M1_PZ1:MISURA_CAMERA_ESTERNA] - (2 * [SCAR_M1_PZ1:R2_OFFSET_PEZZO])) / 10 '(R2_AltezzaFinestra - AppOffset) \ 10
							[Assemblatrice_In:LARGHEZZA_FINESTRA]	= ([SCAR_M1_PZ2:MISURA_CAMERA_ESTERNA] - (2 * [SCAR_M1_PZ2:R2_OFFSET_PEZZO])) / 10 '(R2_LarghezzaFinestra - AppOffset) \ 10 '-&gt; pz2 riga 16 (riga in base 0)
							[Assemblatrice_In:APERTURA]			=  [SCAR_M1_PZ1:R2_APERTURA]	'Ass_AperturaOut = Ass_Apertura
						ElseIf [R2_STATUS:MAGAZZINO] = 2 Then
							[Assemblatrice_In:ALTEZZA_FINESTRA]	= ([SCAR_M2_PZ1:MISURA_CAMERA_ESTERNA] - (2 * [SCAR_M2_PZ1:R2_OFFSET_PEZZO])) / 10 '(R2_AltezzaFinestra - AppOffset) \ 10
							[Assemblatrice_In:LARGHEZZA_FINESTRA]	= ([SCAR_M2_PZ2:MISURA_CAMERA_ESTERNA] - (2 * [SCAR_M2_PZ2:R2_OFFSET_PEZZO])) / 10 '(R2_LarghezzaFinestra - AppOffset) \ 10 '-&gt; pz2 riga 16 (riga in base 0)
							[Assemblatrice_In:APERTURA]			=  [SCAR_M2_PZ1:R2_APERTURA]	'Ass_AperturaOut = Ass_Apertura)
						End If

						'azzero le altre variabili
						[R2_STATUS:MAGAZZINO] = 0
						[R2_STATUS:CASSETTO] = 0
						[R2_STATUS:ID_QUARTINA] = ""


						'aggiorno cassetti pieni e disponibili
					    AggiornaCassettiPieni(MysSqlConnectionString, 1)
						AggiornaCassettiPieni(MysSqlConnectionString, 2)
					    AggiornaCassettiDisponibili(MysSqlConnectionString, 1)
						AggiornaCassettiDisponibili(MysSqlConnectionString, 2)
						AggiornaCassettiInRiempimento(MysSqlConnectionString, 1)
						AggiornaCassettiInRiempimento(MysSqlConnectionString, 2)

						[R2_STATUS:FINE_MISSIONE_ACK] = True 'invio ack al robot
						StatoCicloScarico = 6500	'SetTimetAttesaFineMissione_false
					End If

				Case 6500	'SetTimetAttesaFineMissione_false
					LogMsg "StatoCicloScarico = 6500	'SetTimetAttesaFineMissione_false"
					stepTout = Timer()
					StatoCicloScarico = 6700	'AttesaFineMissione_false

				Case 6700	'AttesaFineMissione_false
					LogMsg "StatoCicloScarico = 6700	'AttesaFineMissione_false"

					If SuperatoTimeout(stepTout, TOUT_STEP) Then
						alm_Step_ToutR2_6700 = True
						StatoCicloScarico = 6500	'SetTimetAttesaFineMissione_false
					End If
					If [R2_STATUS:FINE_MISSIONE] = False Then
						[R2_STATUS:FINE_MISSIONE_ACK] =False
						alm_Step_ToutR2_6700 = False
						StatoCicloScarico = 1000	'Attesa
					End If

				Case 9100	'ErroreMissioneRobot
					LogMsg "StatoCicloScarico = 9100	'ErroreMissioneRobot"

					'elimino quartina dal DB
					ret = FineRobot(MysSqlConnectionString, [R2_STATUS:ID_QUARTINA])
					If ret &lt;&gt; 0 Then
						'Alzo allarme
						alm_FineRobotR2 = True
						'StatoCicloScarico = 1000	'Attesa
					Else
						'segnalo all'estrattore che ho depositato il pezzo
						varname_estrattore = IIf([R2_STATUS:MAGAZZINO] = 1, "MAG1_ES2_ACT", "MAG2_ES2_ACT")
						SetVariableValue(varname_estrattore &amp; ":DEPO",  True)	'pezzo depositato

						'faccio richiesta di rientro estrattore
						rikEstrattore.ID_CASSETTO				= 0 'faccio rientrare il cassetto
						rikEstrattore.ID_QUARTINA 				= ""
						rikEstrattore.NOME_PEZZO_UNICO 			= ""
						rikEstrattore.POSIZIONE 				= 0
						rikEstrattore.DEPO						= False
						rikEstrattore.PRONTO					= False
						rikEstrattore.STROBE 					= True

						'aggiungo richiesta a coda estrattore
						If [R2_STATUS:MAGAZZINO] = 1  Then
							strEstrattore =Serializza_stEstrattore(rikEstrattore)
							DebugMsg("Case 9100	'ErroreMissioneRobot - codaMAG1_ES2.Enqueue(" &amp; strEstrattore &amp; ")")
							'codaMAG1_ES2.Enqueue(Serializza_stEstrattore(rikEstrattore))
							codaMAG1_ES2.Enqueue(strEstrattore)
						ElseIf [R2_STATUS:MAGAZZINO] = 2 Then
							strEstrattore =Serializza_stEstrattore(rikEstrattore)
							DebugMsg("Case 9100	'ErroreMissioneRobot - codaMAG2_ES2.Enqueue(" &amp; strEstrattore &amp; ")")
							'codaMAG2_ES2.Enqueue(Serializza_stEstrattore(rikEstrattore))
							codaMAG2_ES2.Enqueue(strEstrattore)

						End If

						'faccio reset dei membri pezzo
						If     [R2_STATUS:MAGAZZINO] = 1  Then
							ResetDatiMembriStruttura("SCAR_M1_PZ1")
							ResetDatiMembriStruttura("SCAR_M1_PZ2")
							ResetDatiMembriStruttura("SCAR_M1_PZ3")
							ResetDatiMembriStruttura("SCAR_M1_PZ4")
						ElseIf [R2_STATUS:MAGAZZINO] = 2 Then
							ResetDatiMembriStruttura("SCAR_M2_PZ1")
							ResetDatiMembriStruttura("SCAR_M2_PZ2")
							ResetDatiMembriStruttura("SCAR_M2_PZ3")
							ResetDatiMembriStruttura("SCAR_M2_PZ4")
						End If

						'NON passo nessun dato all'Assemblatrice

						'azzero le altre variabili
						[R2_STATUS:MAGAZZINO] = 0
						[R2_STATUS:CASSETTO] = 0
						[R2_STATUS:ID_QUARTINA] = ""

						'aggiorno cassetti pieni e disponibili
					    AggiornaCassettiPieni(MysSqlConnectionString, 1)
						AggiornaCassettiPieni(MysSqlConnectionString, 2)
					    AggiornaCassettiDisponibili(MysSqlConnectionString, 1)
						AggiornaCassettiDisponibili(MysSqlConnectionString, 2)
						AggiornaCassettiInRiempimento(MysSqlConnectionString, 1)
						AggiornaCassettiInRiempimento(MysSqlConnectionString, 2)

						[R2_STATUS:FINE_MISSIONE_ACK] = True 'invio ack al robot
						stepTout = Timer()
						StatoCicloScarico = 9150	'SetTimetAttesaFineMissione_false
					End If

				Case 9150	'SetTimetAttesaFineMissione_false
					stepTout = Timer()
					StatoCicloScarico = 9200	'AttesaFineMissioneAck_false

				Case 9150	'AttesaFineMissioneAck_false
					LogMsg "StatoCicloScarico = 9200	'AttesaFineMissioneAck_false"
					If SuperatoTimeout(stepTout, TOUT_STEP) Then
						alm_Step_ToutR2_9150 = True
						StatoCicloScarico = 9150	'SetTimetAttesaFineMissione_false
					End If
					If [R2_STATUS:ERR_MISSIONE] = False Then
						[R2_STATUS:ERR_MISSIONE_ACK] =False
						alm_Step_ToutR2_9150 = False
						StatoCicloScarico = 1000	'Attesa
					End If

				Case Else
					LogMsg("Main() -&gt; Case StatoCicloScarico Else; StatoCicloScarico = " &amp; CStr(StatoCicloScarico))
					Throw New System.Exception("GestioneZonaR2.movbas -&gt; Main() ECCEZZIONE: StatoCicloScarico valore non ammesso: " &amp; CStr(StatoCicloScarico) &amp; ".")
			End Select
		End If
	DoEvents

	'abilito LogMsg solo su cambio valore di StatoCicloScarico
	If StatoCicloScarico_Old &lt;&gt; StatoCicloScarico Then
		enableLogMsg = True
		StatoCicloScarico_Old = StatoCicloScarico
	Else
		enableLogMsg = False
	End If
	Loop Until IsInStoppingMode

End Sub

Function LeggiDatiPezzo(connectionString As String, mag As Integer, cass As Integer) As Integer
	LeggiDatiPezzo = 0

	''#################
	Dim prefix_varname_pezzo As String
	Dim varname As String
	Dim posizionePezzo As Integer
	Dim vResult As Object
    Dim commandText As String

    Const ERR_GENERICO As Integer = -1 					'ERRORE GENERICO
    Const ERR_GENERIC_EXCEPION As Integer = -101	 	'ERRORE eccezzione generica
    Const ERR_ODBC_EXCEPTION As Integer = -102	 		'ERRORE ecezzione ODBC

    Select Case mag
		Case 1:
			prefix_varname_pezzo = "SCAR_M1_"
		Case 2:
			prefix_varname_pezzo = "SCAR_M2_"
		Case Else
			Throw New System.Exception("GestioneZonaR2.movbas -&gt; LeggiDatiPezzo(): parametro mag non ammesso: " &amp; CStr(mag) &amp; ".")
	End Select

    'reset variabili struttura pezzi
    ResetDatiMembriStruttura(prefix_varname_pezzo &amp; "PZ1")
    ResetDatiMembriStruttura(prefix_varname_pezzo &amp; "PZ2")
    ResetDatiMembriStruttura(prefix_varname_pezzo &amp; "PZ3")
    ResetDatiMembriStruttura(prefix_varname_pezzo &amp; "PZ4")

	'cerco nel db a quale cassetto è assegnata la quartina
	Try
        Using MyConnection As New System.Data.Odbc.OdbcConnection(connectionString)
            MyConnection.Open()
            commandText = "SELECT * FROM gualini.tutti_pezzi_profili_banchisquadrette " _
			&amp; " where " _
            &amp; " ID_CASSETTO = " &amp; CStr(cass) _
            &amp; " And magazzino_ID_MAGAZZINO = " &amp; CStr(mag) _
            &amp; ";"

            DebugMsg "GestioneZonaR2.movbas -&gt; LeggiDatiPezzo; commandText = " &amp; commandText

            Using MyCommand As New OdbcCommand()

				MyCommand.Connection = MyConnection
	            MyCommand.CommandText = commandText

				Using MyDataReader As OdbcDataReader
					MyDataReader = MyCommand.ExecuteReader

					'Debug.Print CStr(MyDataReader.HasRows)
					'Debug.Print CStr(MyDataReader.RecordsAffected)

					'se la quartina esiste nel DB leggo i dati di magazzino e cassetto
					If MyDataReader.HasRows Then
						MyDataReader.Read
						posizionePezzo		= MyDataReader("POSIZIONE")
						If posizionePezzo &gt; 1 And posizionePezzo &gt; 4 Then
								Throw New System.Exception("GestioneZonaR2.movbas -&gt;LeggiDatiPezzo(): valore POSIZIONE non ammesso: " &amp; CStr(posizionePezzo) &amp; ".")
						End If
						varname = prefix_varname_pezzo &amp; "PZ" &amp; CStr(posizionePezzo)

						'memorizzo da quale cassetto e magazzino provengono i pezzi
						SetVariableValue(varname &amp; ":CASSETTO_ASSEGNATO"		, cass)
						SetVariableValue(varname &amp; ":MAGAZZINO_ASSEGNATO"		, mag)


						SetVariableValue(varname &amp; ":NUOVO"						, True)	'questo dato potrebbe servire nell'assegnamento missione al robot: CondizioneAssegnaMissioneRobot()
						SetVariableValue(varname &amp; ":ID_QUARTINA"				, CStr(	MyDataReader("ID_QUARTINA")))
						SetVariableValue(varname &amp; ":POSIZIONE"					, CInt( MyDataReader("POSIZIONE")))
						SetVariableValue(varname &amp; ":NOME_PEZZO_UNICO"			, CStr(	MyDataReader("ID_PEZZO")))
						SetVariableValue(varname &amp; ":NOME_PEZZO_ESTERNO"		, CStr(	MyDataReader("NOME_PEZZO_ESTERNO")))
						SetVariableValue(varname &amp; ":ULTIMO_PEZZO"				, False)
						SetVariableValue(varname &amp; ":CODICE_PROFILO"			, CStr(	MyDataReader("CODICE_PROFILO")))
						SetVariableValue(varname &amp; ":SERIE_PROFILO"				, CStr(	MyDataReader("SERIE_PROFILO")))
						SetVariableValue(varname &amp; ":MAX_LUNGHEZZA"				, CInt( MyDataReader("MAX_LUNGHEZZA")))
						SetVariableValue(varname &amp; ":TOTALE_PEZZI_QUARTINA"		, CInt( MyDataReader("TOTALE_PEZZI_QUARTINA")))
						SetVariableValue(varname &amp; ":NUM_SQUADRETTE1"			, CInt( MyDataReader("NUM_SQUADRETTE1")))
						SetVariableValue(varname &amp; ":COD_SQUADRETTA1"			, CStr(	MyDataReader("COD_SQUADRETTA1")))
						SetVariableValue(varname &amp; ":NUM_SQUADRETTE2"			, CInt( MyDataReader("NUM_SQUADRETTE2")))
						SetVariableValue(varname &amp; ":COD_SQUADRETTA2"			, CStr(	MyDataReader("COD_SQUADRETTA2")))
						SetVariableValue(varname &amp; ":ALTEZZA_PROFILO"			, CInt( MyDataReader("ALTEZZA_PROFILO")))
						SetVariableValue(varname &amp; ":LARGHEZZA_PROFILO"			, CInt( MyDataReader("LARGHEZZA_PROFILO")))
						SetVariableValue(varname &amp; ":MISURA_CAMERA_ESTERNA"		, CInt( MyDataReader("MISURA_CAMERA_ESTERNA")))
						SetVariableValue(varname &amp; ":ID_QUARTINA_SUCCESSIVA"	, "")
						SetVariableValue(varname &amp; ":NOME_COMMESSA"				, CStr(	MyDataReader("NOME_COMMESSA")))
						SetVariableValue(varname &amp; ":APPOGGIO_PEZZO"			, CInt( MyDataReader("APPOGGIO_PEZZO")))
						SetVariableValue(varname &amp; ":POSIZIONE_PEZZO_ESTERNO"	, CInt( MyDataReader("POSIZIONE_PEZZO_ESTERNO")))
						SetVariableValue(varname &amp; ":ID_PEZZO_ESTERNO"			, CStr(	MyDataReader("ID_PEZZO_ESTERNO")))
						SetVariableValue(varname &amp; ":LUNGHEZZA_PEZZO_ESTERNO"	, CInt( MyDataReader("LUNGHEZZA_PEZZO_ESTERNO")))
						SetVariableValue(varname &amp; ":FILE_XML"					, CStr(	MyDataReader("FILE_XML")))
						SetVariableValue(varname &amp; ":DATA"						, CStr(	MyDataReader("DATA")))
						SetVariableValue(varname &amp; ":ORA"						, CStr(	MyDataReader("ORA")))


						SetVariableValue(varname &amp; ":R2_BANCO_SQ1"				, IIf( IsDBNull(MyDataReader("BANCO_SQ1"))	, 0,  MyDataReader("BANCO_SQ1"))	)'CInt( MyDataReader("BANCO_SQ1")))
						SetVariableValue(varname &amp; ":R2_BANCO_SQ2"				, IIf( IsDBNull(MyDataReader("BANCO_SQ2"))	, 0,  MyDataReader("BANCO_SQ2"))	)'CInt( MyDataReader("BANCO_SQ2")))
						SetVariableValue(varname &amp; ":R2_FILA_SQ1"				, IIf( IsDBNull(MyDataReader("FILA_SQ1" ))	, 0,  MyDataReader("FILA_SQ1"))		)'CInt( MyDataReader("FILA_SQ1")))
						SetVariableValue(varname &amp; ":R2_FILA_SQ2"				, IIf( IsDBNull(MyDataReader("FILA_SQ2" ))	, 0,  MyDataReader("FILA_SQ2"))		)'CInt(	MyDataReader("FILA_SQ2")))
						SetVariableValue(varname &amp; ":R2_CODICE_PRG"				, IIf( IsDBNull(MyDataReader("CodiceRobot")), 0,  MyDataReader("CodiceRobot"))	)'CInt( MyDataReader("CodiceRobot")))
						SetVariableValue(varname &amp; ":R2_COLLA"					, IIf( IsDBNull(MyDataReader("Colla"))      , 0,  MyDataReader("Colla"))		)'CInt(	MyDataReader("Colla")))
						SetVariableValue(varname &amp; ":R2_APERTURA"				, IIf( IsDBNull(MyDataReader("Apertura"))	, 0,  MyDataReader("Apertura"))		)'CInt(	MyDataReader("Apertura")))
						SetVariableValue(varname &amp; ":R2_ATTREZZATURA"			, IIf( IsDBNull(MyDataReader("Attrezzatura")), 0,  MyDataReader("Attrezzatura")))'CInt(	MyDataReader("Attrezzatura")))
						SetVariableValue(varname &amp; ":R2_OFFSET_PEZZO"			, IIf( IsDBNull(MyDataReader("OffsetPezzo")), 0,  MyDataReader("OffsetPezzo"))	)'CInt(	MyDataReader("OffsetPezzo")))

						'TODO
						'gestire R2_RUOTA_PEZZO


'promemoria campi vista tutti_pezzi
' Select `tutti_pezzi`.`ID_CASSETTO`,
    ' `tutti_pezzi`.`DISPONIBILE`,
    ' `tutti_pezzi`.`STATO`,
    ' `tutti_pezzi`.`POSIZIONE_CASSETTO`,
    ' `tutti_pezzi`.`magazzino_ID_MAGAZZINO`,
    ' `tutti_pezzi`.`lastupdate`,
    ' `tutti_pezzi`.`lastupdate_milli`,
    ' `tutti_pezzi`.``,
    ' `tutti_pezzi`.``,
    ' `tutti_pezzi`.``,
    ' `tutti_pezzi`.``,
    ' `tutti_pezzi`.``,
    ' `tutti_pezzi`.``,
    ' `tutti_pezzi`.``,
    ' `tutti_pezzi`.`cassetto_ID_CASSETTO`,
    ' `tutti_pezzi`.`cassetto_magazzino_ID_MAGAZZINO`,
    ' `tutti_pezzi`.``,
    ' `tutti_pezzi`.``,
    ' `tutti_pezzi`.``,
    ' `tutti_pezzi`.``,
    ' `tutti_pezzi`.``,
    ' `tutti_pezzi`.``,
    ' `tutti_pezzi`.``,
    ' `tutti_pezzi`.``,
    ' `tutti_pezzi`.``,
    ' `tutti_pezzi`.``,
    ' `tutti_pezzi`.``,
    ' `tutti_pezzi`.``,
    ' `tutti_pezzi`.``,
    ' `tutti_pezzi`.``,
    ' `tutti_pezzi`.``,
    ' `tutti_pezzi`.``,
    ' `tutti_pezzi`.`quartina_ID_QUARTINA`,
    ' `tutti_pezzi`.`PRELEVATO`
	' `tutti_pezzi_profili_banchisquadrette`.`SerieProfilo`,
    ' `tutti_pezzi_profili_banchisquadrette`.`CodiceProfilo`,
    ' `tutti_pezzi_profili_banchisquadrette`.``,
    ' `tutti_pezzi_profili_banchisquadrette`.``,
    ' `tutti_pezzi_profili_banchisquadrette`.`OffsetPezzo`,
    ' `tutti_pezzi_profili_banchisquadrette`.`OffsetSuadretta1`,
    ' `tutti_pezzi_profili_banchisquadrette`.`OffsetSuadretta2`,
    ' `tutti_pezzi_profili_banchisquadrette`.`Colla`,
    ' `tutti_pezzi_profili_banchisquadrette`.``,
    ' `tutti_pezzi_profili_banchisquadrette`.``,
    ' `tutti_pezzi_profili_banchisquadrette`.``,
    ' `tutti_pezzi_profili_banchisquadrette`.``,
    ' `tutti_pezzi_profili_banchisquadrette`.``
' FROM `gualini`.`tutti_pezzi`;


					Else
						'non trovo nulla allora torno errore
						LeggiDatiPezzo = -10
					End If
				End Using	'MyDataReader.Close
			End Using	'MyCommand.Dispose
        End Using	'MyConnection.Close


	  'Catch program exception
	Catch MyException As Exception
		DebugMsg(MyException.ToString)
		MsgBox("GestioneZonaR2.movbas -&gt; LeggiDatiPezzo() - ERRORE: Exception." &amp; vbCrLf &amp; _
					 MyException.ToString &amp; ".")
		LogMsg(" LeggiDatiPezzo() - ERRORE: Exception."   &amp; _
					 MyException.ToString &amp; ".")

		'alzare alarme
		alm_ZonaR2_ODBC_txt = "ERR_GENERIC_EXCEPION" &amp; " -- GestioneZonaR2.movbas -&gt; LeggiDatiPezzo() - ERRORE: Exception."   &amp; _
					 MyException.ToString &amp; "." 'ERR_GENERIC_EXCEPION 'ERRORE eccezzione generic
		alm_ZonaR2_ODBC = True
		Exit Function

	  'Catch ODBC Exception
	Catch MyOdbcException As OdbcException
		DebugMsg(MyOdbcException.ToString)
		MsgBox("GestioneZonaR2.movbas -&gt; LeggiDatiPezzo() - ERRORE ODBC: OdbcException." &amp; vbCrLf &amp; _
					MyOdbcException.ToString  &amp; ".")
		LogMsg("LeggiDatiPezzo() - ERRORE ODBC: OdbcException."   &amp; _
					MyOdbcException.ToString  &amp; ".")
		'TODO
		'alzare alarme
		alm_ZonaR2_ODBC_txt = "ERR_ODBC_EXCEPTION" &amp; " -- GestioneZonaR2.movbas -&gt; LeggiDatiPezzo() - ERRORE: Exception."   &amp; _
					 MyException.ToString &amp; "." 'ERR_ODBC_EXCEPTION 'ERRORE ecezzione ODBC
		alm_ZonaR2_ODBC = True
		Exit Function

    End Try

End Function


Function CondizioneRikCassettoMagazzino() As Integer
	CondizioneRikCassettoMagazzino = 0

	Dim richiedibileM1 As Boolean = False
	Dim richiedibileM2 As Boolean = False

	'controllo se un cassetto è richiedibile da M1
	If      [loc_ImpostazioniImpianto:M1_CASS_PIENI] &gt; 0 _
		And [loc_ImpostazioniImpianto:M1_ABIL] _
		And [loc_ImpostazioniImpianto:ScaricoAbilitaZona] _
		And [MAG1_ES2_ACT:PRONTO] _
		And ([MAG1_ES2_ACT:DEPO] Or [MAG1_ES2_ACT:ID_CASSETTO] = 0 Or [MAG1_ES2_ACT:NOME_PEZZO_UNICO] = "") _
		And Not [MAG1_ES2_RIK:STROBE] _
		Then

		richiedibileM1 = True
	End If

	'controllo se un cassetto è richiedibile da M2
	If      [loc_ImpostazioniImpianto:M2_CASS_PIENI] &gt; 0 _
		And [loc_ImpostazioniImpianto:M2_ABIL] _
		And [loc_ImpostazioniImpianto:ScaricoAbilitaZona] _
		And [MAG2_ES2_ACT:PRONTO] _
		And ([MAG2_ES2_ACT:DEPO] Or [MAG2_ES2_ACT:ID_CASSETTO] = 0 Or [MAG2_ES2_ACT:NOME_PEZZO_UNICO] = "") _
		And Not [MAG2_ES2_RIK:STROBE] _
		Then

		richiedibileM2 = True
	End If

	If richiedibileM1 And richiedibileM2 Then
		CondizioneRikCassettoMagazzino = MovimentatoPiuVecchio()
	Else
		'ho solo un estrattore richiedibile
		If richiedibileM1 Then
			CondizioneRikCassettoMagazzino = 1
		End If
		If richiedibileM2 Then
			CondizioneRikCassettoMagazzino = 2
		End If
		'se nessun estrattore disponibile CondizioneRikCassettoMagazzino = 0
	End If
End Function

Function CondizioneAssegnaMissioneRobot() As PosQuartina
	CondizioneAssegnaMissioneRobot.mag = 0
	CondizioneAssegnaMissioneRobot.cass = 0

	Dim cassettoDaM1 As Integer
	Dim cassettoDaM2 As Integer
	Dim magPiuVecchio As Integer
	Dim assegnabileM1 As Boolean = False
	Dim assegnabileM2 As Boolean = False

	'posso assegnare una missione
	'se il robot è disponibilr
	'e se il robot non è in missione
	'e se l'estrattore è pronto
	'e se il cassetto assegnato al pezzo è uguale al cassetto nell'estrattore 2 del magazzino corrispondente
	'e se il pezzo ha il campo SCAR_Mxx_PZ1:NUOVO a true (questo serve per poter intercettare correttamente la condizione di fine Robot nel Main

	'controllo se una missione è assegnabile per M1
	If      [R2_STATUS:DISPONIBILE] _
		And [R2_STATUS:RIK_MISSIONE] _
		And Not [R2_STATUS:IN_MISSIONE] _
		And Not [R2_STATUS:NUOVA_MISSIONE] _
		And [MAG1_ES2_ACT:PRONTO] _
		And ([MAG1_ES2_ACT:ID_CASSETTO] = [SCAR_M1_PZ1:CASSETTO_ASSEGNATO]) _
		And [SCAR_M1_PZ1:CASSETTO_ASSEGNATO] &lt;&gt; 0 _
		Then

		cassettoDaM1= [SCAR_M1_PZ1:CASSETTO_ASSEGNATO]
		assegnabileM1 = True
	End If

	'controllo se una missione è assegnabile per M2
	If      [R2_STATUS:DISPONIBILE] _
		And [R2_STATUS:RIK_MISSIONE] _
		And Not [R2_STATUS:IN_MISSIONE] _
		And Not [R2_STATUS:NUOVA_MISSIONE] _
		And [MAG2_ES2_ACT:PRONTO] _
		And ([MAG2_ES2_ACT:ID_CASSETTO] = [SCAR_M2_PZ1:CASSETTO_ASSEGNATO]) _
		And [SCAR_M2_PZ1:CASSETTO_ASSEGNATO] &lt;&gt; 0 _
		Then

		cassettoDaM2 = [SCAR_M2_PZ1:CASSETTO_ASSEGNATO]
		assegnabileM2 = True
	End If

	If assegnabileM1 And assegnabileM2 Then
		magPiuVecchio = MovimentatoPiuVecchio()
		If magPiuVecchio = 1 Then
			CondizioneAssegnaMissioneRobot.mag = 1
			CondizioneAssegnaMissioneRobot.cass = cassettoDaM1
		End If
		If magPiuVecchio = 2 Then
			CondizioneAssegnaMissioneRobot.mag = 2
			CondizioneAssegnaMissioneRobot.cass = cassettoDaM2
		End If
	Else
		'ho solo una missione assegnabile
		If assegnabileM1 Then
			CondizioneAssegnaMissioneRobot.mag = 1
			CondizioneAssegnaMissioneRobot.cass = cassettoDaM1
		End If
		If assegnabileM2 Then
			CondizioneAssegnaMissioneRobot.mag = 2
			CondizioneAssegnaMissioneRobot.cass = cassettoDaM2
		End If
		'se nessun missione assegnabile CondizioneAssegnaMissioneRobot.mag = 0,  CondizioneAssegnaMissioneRobot.cass = 0
	End If

End Function

Function FineRobot(connectionString As String, quartina As String) As Integer
	'operazioni da fare nella function
	'eliminare i dati del pezzo dal DB


    Dim commandText As String
    Dim excp As Boolean

    Const ERR_GENERICO As Integer = -1 					'ERRORE GENERICO
    Const ERR_GENERIC_EXCEPION As Integer = -101	 	'ERRORE eccezzione generica
    Const ERR_ODBC_EXCEPTION As Integer = -102	 		'ERRORE ecezzione ODBC

    FineRobot = ERR_GENERICO	'inizializzzo a ERR_GENERICO

	'devo eliminare i dati del pezzo dal DB
	excp = False
	Try
        Using MyConnection As New System.Data.Odbc.OdbcConnection(connectionString)
            MyConnection.Open()

            commandText = "delete from `gualini`.`quartina` " &amp; _
            "WHERE `ID_QUARTINA` = " &amp; """" &amp; quartina &amp; """" _
			&amp; ";"

            DebugMsg "GestioneZonaR2.movbas -&gt; FineRobot(); commandText = " &amp; commandText

            Using MyCommand As New OdbcCommand()
				MyCommand.Connection = MyConnection

	            Dim rCount As Integer

	            'inserisco o aggiorno i dati di quartina
	            MyCommand.CommandText = commandText
	            rCount = MyCommand.ExecuteNonQuery()
	            If rCount = 0 Then
	            	LogMsg(" FineRobot() - WARNING : Delete ID_QUARTINA = " &amp; quartina &amp; " non riuscito")
	            	FineRobot = 1 'torno errore
	            End If
			End Using	'MyCommand.Dispose
        End Using	'MyConnection.Close

	  'Catch program exception
	Catch MyException As Exception
		excp = True
		DebugMsg(MyException.ToString)
		MsgBox("GestioneZonaR2.movbas -&gt; FineRobot() - ERRORE: Exception." &amp; vbCrLf &amp; _
					 MyException.ToString &amp; ".")
		LogMsg(" FineRobot() - ERRORE: Exception." &amp; MyException.ToString &amp; ".")

		'alzare alarme
		alm_ZonaR2_ODBC_txt = "ERR_GENERIC_EXCEPION" &amp; " -- GestioneZonaR2.movbas -&gt; FineRobot() - ERRORE: Exception." _
								&amp; MyException.ToString &amp; "." 'ERR_GENERIC_EXCEPION 'ERRORE eccezzione generic
		alm_ZonaR2_ODBC = True
		FineRobot = ERR_GENERIC_EXCEPION
		'Exit Function

	  'Catch ODBC Exception
	Catch MyOdbcException As OdbcException
		excp = True
		DebugMsg(MyOdbcException.ToString)
		MsgBox("GestioneZonaR2.movbas -&gt; FineRobot() - ERRORE ODBC: OdbcException." &amp; vbCrLf &amp; _
					MyOdbcException.ToString  &amp; ".")
		LogMsg("FineRobot() - ERRORE ODBC: OdbcException." &amp; _
					MyOdbcException.ToString  &amp; ".")
		'TODO
		'alzare alarme
		alm_ZonaR2_ODBC_txt = "ERR_ODBC_EXCEPTION" &amp; " -- GestioneZonaR2.movbas -&gt; FineRobot() - ERRORE: Exception." &amp; _
					 MyException.ToString &amp; "." 'ERR_ODBC_EXCEPTION 'ERRORE ecezzione ODBC
		alm_ZonaR2_ODBC = True
		FineRobot = ERR_ODBC_EXCEPTION
	Finally
		If excp Then
			Exit Function
		End If
    End Try

    'tutto Ok
    FineRobot = 0
End Function

Function RilevaCassettoPiuVicino(connectionString As String, mag As Integer, commessa As String, esclusivo As Boolean) As PosQuartina
	Dim pos As PosQuartina
	pos.cass = 0
	pos.mag = 0
	RilevaCassettoPiuVicino = pos

	Dim vResult As Object
    Dim commandText As String

    Const ERR_GENERICO As Integer = -1 					'ERRORE GENERICO
    Const ERR_GENERIC_EXCEPION As Integer = -101	 	'ERRORE eccezzione generica
    Const ERR_ODBC_EXCEPTION As Integer = -102	 		'ERRORE ecezzione ODBC

	'cerco nel db a quale cassetto è assegnata la quartina
	Try
        Using MyConnection As New System.Data.Odbc.OdbcConnection(connectionString)
            MyConnection.Open()
            commandText = "CALL `gualini`.`ScaricoCassettoPiuVicino`( " _
            				&amp; CStr(mag) _
            				&amp; ", " &amp; """" &amp; commessa &amp; """" _
            				&amp; ", " &amp; CStr(esclusivo) _
            				&amp; "); "
            DebugMsg "GestioneZonaR2.movbas -&gt; RilevaCassettoPiuVicino; commandText = " &amp; commandText

            Using MyCommand As New OdbcCommand()

				MyCommand.Connection = MyConnection
	            MyCommand.CommandText = commandText

				Using MyDataReader As OdbcDataReader
					MyDataReader = MyCommand.ExecuteReader

					'Debug.Print CStr(MyDataReader.HasRows)
					'Debug.Print CStr(MyDataReader.RecordsAffected)

					'se la quartina esiste nel DB leggo i dati di magazzino e cassetto
					If MyDataReader.HasRows Then
						MyDataReader.Read

						pos.mag = MyDataReader("MAGAZZINO")
						pos.cass = MyDataReader("CASSETTO")
					End If
				End Using	'MyDataReader.Close
			End Using	'MyCommand.Dispose
        End Using	'MyConnection.Close

        'torno il valore trovato
        RilevaCassettoPiuVicino = pos
		DebugMsg( "GestioneZonaR2.movbas -&gt; RilevaCassettoPiuVicino; pos.mag = " &amp; CStr(pos.mag) &amp; " pos.cass = " &amp; CStr(pos.cass)  &amp; ".")

	  'Catch program exception
	Catch MyException As Exception
		DebugMsg(MyException.ToString)
		MsgBox("GestioneZonaR2.movbas -&gt; RilevaCassettoPiuVicino() - ERRORE: Exception." &amp; vbCrLf &amp; _
					 MyException.ToString &amp; ".")
		LogMsg(" RilevaCassettoPiuVicino() - ERRORE: Exception." &amp; _
					 MyException.ToString &amp; ".")

		'alzare alarme
		alm_ZonaR2_ODBC_txt = "ERR_GENERIC_EXCEPION" &amp; " -- GestioneZonaR2.movbas -&gt; RilevaCassettoPiuVicino() - ERRORE: Exception."   &amp; _
					 MyException.ToString &amp; "." 'ERR_GENERIC_EXCEPION 'ERRORE eccezzione generic
		alm_ZonaR2_ODBC = True
		Exit Function

	  'Catch ODBC Exception
	Catch MyOdbcException As OdbcException
		DebugMsg(MyOdbcException.ToString)
		MsgBox("GestioneZonaR2.movbas -&gt; RilevaCassettoPiuVicino() - ERRORE ODBC: OdbcException." &amp; vbCrLf &amp; _
					MyOdbcException.ToString  &amp; ".")
		LogMsg("RilevaCassettoPiuVicino() - ERRORE ODBC: OdbcException."   &amp; _
					MyOdbcException.ToString  &amp; ".")
		'TODO
		'alzare alarme
		alm_ZonaR2_ODBC_txt = "ERR_ODBC_EXCEPTION" &amp; " -- GestioneZonaR2.movbas -&gt; RilevaCassettoPiuVicino() - ERRORE: Exception."   &amp; _
					 MyException.ToString &amp; "." 'ERR_ODBC_EXCEPTION 'ERRORE ecezzione ODBC
		alm_ZonaR2_ODBC = True
		Exit Function

    End Try

End Function

Sub DecodificaMissioniPezziR2_Mag1()
	DecodificaMissioneRobot("SCAR_M1_PZ1")
	DecodificaMissioneRobot("SCAR_M1_PZ2")
	DecodificaMissioneRobot("SCAR_M1_PZ3")
	DecodificaMissioneRobot("SCAR_M1_PZ4")
End Sub

Sub DecodificaMissioniPezziR2_Mag2()
	DecodificaMissioneRobot("SCAR_M2_PZ1")
	DecodificaMissioneRobot("SCAR_M2_PZ2")
	DecodificaMissioneRobot("SCAR_M2_PZ3")
	DecodificaMissioneRobot("SCAR_M2_PZ4")
End Sub

Sub DecodificaMissioneRobot(StrucDatiPezzo As String)', StructRobot As String)
	Dim stPzz As String
	Dim stRbt As String

	Dim objVarPzz As DBVarObjCmdTarget
	Dim typeVarPzz As movicon.eVariableType

	stPzz = StrucDatiPezzo

	objVarPzz = GetVariableObject(stPzz)
	typeVarPzz = objVarPzz.GetType()

	If typeVarPzz &lt;&gt; movicon.eVariableType.enum_VAR_TYPE_STRUCT Then
		LogMsg 		"DecodificaMissioniPezziR2() -&gt; Variabile = " 	&amp; stPzz 	&amp; " NON è una Struct."
		Exit Sub
	End If

	'decodifica del codice robot
	If GetVariableValue(stPzz &amp; ":SERIE_PROFILO") = "K-FINEST" And GetVariableValue(stPzz &amp; ":CODICE_PROFILO") = "K1900" Then
		SetVariableValue(stPzz &amp; ":R2_CODICE_PRG",  1)
	End If
	If GetVariableValue(stPzz &amp; ":SERIE_PROFILO") = "K-FINEST" And GetVariableValue(stPzz &amp; ":CODICE_PROFILO") = "K1901" Then
		SetVariableValue(stPzz &amp; ":R2_CODICE_PRG",  2)
	End If
	If GetVariableValue(stPzz &amp; ":SERIE_PROFILO") = "K-FINEST" And GetVariableValue(stPzz &amp; ":CODICE_PROFILO") = "K1911" Then
		SetVariableValue(stPzz &amp; ":R2_CODICE_PRG",  3)
	End If
	If GetVariableValue(stPzz &amp; ":SERIE_PROFILO") = "AWS65" And GetVariableValue(stPzz &amp; ":CODICE_PROFILO") = "363890" Then
		SetVariableValue(stPzz &amp; ":R2_CODICE_PRG",  4)
	End If
	If GetVariableValue(stPzz &amp; ":SERIE_PROFILO") = "AWS70" And GetVariableValue(stPzz &amp; ":CODICE_PROFILO") = "358140" Then
		SetVariableValue(stPzz &amp; ":R2_CODICE_PRG",  5)
	End If
	If GetVariableValue(stPzz &amp; ":SERIE_PROFILO") = "AWS65" And GetVariableValue(stPzz &amp; ":CODICE_PROFILO") = "364110" Then
		SetVariableValue(stPzz &amp; ":R2_CODICE_PRG",  6)
	End If
	If GetVariableValue(stPzz &amp; ":SERIE_PROFILO") = "AWS70" And GetVariableValue(stPzz &amp; ":CODICE_PROFILO") = "358340" Then
		SetVariableValue(stPzz &amp; ":R2_CODICE_PRG",  7)
	End If
	If GetVariableValue(stPzz &amp; ":SERIE_PROFILO") = "AWS65" And GetVariableValue(stPzz &amp; ":CODICE_PROFILO") = "363980" Then
		SetVariableValue(stPzz &amp; ":R2_CODICE_PRG",  8)
	End If
	If GetVariableValue(stPzz &amp; ":SERIE_PROFILO") = "AWS70" And GetVariableValue(stPzz &amp; ":CODICE_PROFILO") = "358240" Then
		SetVariableValue(stPzz &amp; ":R2_CODICE_PRG",  9)
	End If
	If GetVariableValue(stPzz &amp; ":SERIE_PROFILO") = "AWS65" And GetVariableValue(stPzz &amp; ":CODICE_PROFILO") = "364650" Then
		SetVariableValue(stPzz &amp; ":R2_CODICE_PRG",  10)
	End If
	If GetVariableValue(stPzz &amp; ":SERIE_PROFILO") = "AWS70" And GetVariableValue(stPzz &amp; ":CODICE_PROFILO") = "358610" Then
		SetVariableValue(stPzz &amp; ":R2_CODICE_PRG",  11)
	End If
	If GetVariableValue(stPzz &amp; ":SERIE_PROFILO") = "R72TT" And GetVariableValue(stPzz &amp; ":CODICE_PROFILO") = "R72C44" Then
		SetVariableValue(stPzz &amp; ":R2_CODICE_PRG",  12)
	End If
	If GetVariableValue(stPzz &amp; ":SERIE_PROFILO") = "R72TT" And GetVariableValue(stPzz &amp; ":CODICE_PROFILO") = "R72C41" Then
		SetVariableValue(stPzz &amp; ":R2_CODICE_PRG",  13)
	End If
	If GetVariableValue(stPzz &amp; ":SERIE_PROFILO") = "R72TT" And GetVariableValue(stPzz &amp; ":CODICE_PROFILO") = "R72C45" Then
		SetVariableValue(stPzz &amp; ":R2_CODICE_PRG",  14)
	End If
	If GetVariableValue(stPzz &amp; ":SERIE_PROFILO") = "R72TT" And GetVariableValue(stPzz &amp; ":CODICE_PROFILO") = "R72C113" Then
		SetVariableValue(stPzz &amp; ":R2_CODICE_PRG",  15)
	End If
	If GetVariableValue(stPzz &amp; ":SERIE_PROFILO") = "AWS90" And GetVariableValue(stPzz &amp; ":CODICE_PROFILO") = "441050" Then
		SetVariableValue(stPzz &amp; ":R2_CODICE_PRG",  16)
	End If
	If GetVariableValue(stPzz &amp; ":SERIE_PROFILO") = "AWS90" And GetVariableValue(stPzz &amp; ":CODICE_PROFILO") = "441780" Then
		SetVariableValue(stPzz &amp; ":R2_CODICE_PRG",  17)
	End If

End Sub



Sub ProcessaCodaEstrattori_ZONA_R2()
	'ProcessaCodaEstrattore(1,1)	'ProcessaCodaEstrattore(mag As Integer, estrattore As Integer)
	'ProcessaCodaEstrattore(2,1) 'ProcessaCodaEstrattore(mag As Integer, estrattore As Integer)

	'NOTA
	'nel caso di R2, salvo errori, non posso avere più di una richiesta in coda per ogni estrattore
	'per cui tutte le volte che processo vuoto tutta la coda

	Dim tmpEs As stEstrattore
	Dim strEs As String

	'abilito LogMsg
	enableLogMsg = True

	If codaMAG1_ES2.Count &gt; 0 Then
		If Not [MAG1_ES2_RIK:STROBE] _
				And ( [MAG1_ES1_ACT:DEPO] Or [MAG1_ES2_ACT:ID_CASSETTO] = 0 Or [MAG1_ES2_ACT:NOME_PEZZO_UNICO] = "") _
			Then

				If codaMAG1_ES2.Count &gt; 0 Then
					LogMsg("ProcessaCodaEstrattori_ZONA_R2() -&gt; codaMAG1_ES2 -&gt; count = " &amp; CStr(codaMAG1_ES2.Count) &amp; "; peek = " &amp; codaMAG1_ES2.Peek())
				End If
				'strEs = codaMAG1_ES2.Dequeue()
				For Each element1 As String In codaMAG1_ES2
					strEs = element1
					'codaMAG1_ES2.Dequeue()
				Next
				If codaMAG1_ES2.Count &gt; 0 Then
					DebugMsg("ProcessaCodaEstrattori_ZONA_R2() codaMAG1_ES2.Count = " &amp; CStr(codaMAG1_ES2.Count ) &amp; "; CLEAR")
					codaMAG1_ES2.Clear()
				End If

				DebugMsg("ProcessaCodaEstrattori_ZONA_R2() -&gt; codaMAG1_ES2.Count = " &amp; CStr(codaMAG1_ES2.Count) &amp; "Deserializza")
				Deserializza_stEstrattore(tmpEs, strEs)

				[MAG1_ES2_RIK:ID_CASSETTO] 				= tmpEs.ID_CASSETTO
				[MAG1_ES2_RIK:ID_QUARTINA] 				= tmpEs.ID_QUARTINA
				[MAG1_ES2_RIK:NOME_PEZZO_UNICO] 		= tmpEs.NOME_PEZZO_UNICO
				[MAG1_ES2_RIK:POSIZIONE] 				= tmpEs.POSIZIONE

				'[MAG1_ES2_RIK:PRONTO] 					= tmpEs.PRONTO
				[MAG1_ES2_RIK:DEPO] 					= tmpEs.DEPO

				[MAG1_ES2_RIK:STROBE] 					= tmpEs.STROBE

		End If
	End If

	If codaMAG2_ES2.Count &gt; 0 Then
		If Not [MAG2_ES2_RIK:STROBE] _
				And ( [MAG2_ES2_ACT:DEPO] Or [MAG2_ES2_ACT:ID_CASSETTO] = 0 Or [MAG2_ES2_ACT:NOME_PEZZO_UNICO] = "") _
			Then

				If codaMAG2_ES2.Count &gt; 0 Then
					LogMsg("ProcessaCodaEstrattori_ZONA_R2() -&gt; codaMAG2_ES2 -&gt; count = " &amp; CStr(codaMAG2_ES2.Count) &amp; "; peek = " &amp; codaMAG2_ES2.Peek())
				End If

				'strEs = codaMAG2_ES2.Dequeue()
				For Each element2 As String In codaMAG2_ES2
					strEs = element2
					'codaMAG2_ES2.Dequeue()
				Next
				If codaMAG2_ES2.Count &gt; 0 Then
					DebugMsg("ProcessaCodaEstrattori_ZONA_R2() codaMAG2_ES2.Count = " &amp; CStr(codaMAG2_ES2.Count ) &amp; "; CLEAR")
					codaMAG2_ES2.Clear()
				End If

				DebugMsg("ProcessaCodaEstrattori_ZONA_R2() -&gt; codaMAG2_ES2.Count = " &amp; CStr(codaMAG2_ES2.Count) &amp; "Deserializza")
				Deserializza_stEstrattore(tmpEs, strEs)

				[MAG2_ES2_RIK:ID_CASSETTO] 				= tmpEs.ID_CASSETTO
				[MAG2_ES2_RIK:ID_QUARTINA] 				= tmpEs.ID_QUARTINA
				[MAG2_ES2_RIK:NOME_PEZZO_UNICO] 		= tmpEs.NOME_PEZZO_UNICO
				[MAG2_ES2_RIK:POSIZIONE] 				= tmpEs.POSIZIONE

				'[MAG2_ES2_RIK:PRONTO] 					= tmpEs.PRONTO
				[MAG2_ES2_RIK:DEPO] 					= tmpEs.DEPO

				[MAG2_ES2_RIK:STROBE] 					= tmpEs.STROBE

		End If
	End If

	'disabilito LogMsg
	enableLogMsg = False
End Sub

Function Serializza_stEstrattore (st As stEstrattore) As String
	Dim sep As String = ";"
	Serializza_stEstrattore = CStr(st.DEPO)+";" + CStr(st.ID_CASSETTO)+";" + CStr(st.ID_QUARTINA)+";" + CStr(st.NOME_PEZZO_UNICO)+";" _
	    		+ CStr(st.POSIZIONE)+";" + CStr(st.PRONTO)+";" + CStr(st.STROBE)+";"
	LogMsg("Serializza_stEstrattore(st) = " &amp; Serializza_stEstrattore)
End Function

Function Deserializza_stEstrattore (ByRef st As stEstrattore, element As String) As Integer
	Deserializza_stEstrattore = 0

	DebugMsg("Deserializza_stEstrattore() -&gt; " &amp; element)
	Dim x() As String
	x = Split(element,";")

	For count As Integer = 0 To UBound(x) -1
        'Debug.Print "countLoop " + CStr(count) + "   " + x(count)
        Select Case count
        Case 0
        	st.DEPO 			= CBool(x(count))
        Case 1
        	st.ID_CASSETTO 		= CInt(x(count))
        Case 2
        	st.ID_QUARTINA 		= CStr(x(count))
        Case 3
        	st.NOME_PEZZO_UNICO = CStr(x(count))
        Case 4
        	st.POSIZIONE 		= CInt(x(count))
        Case 5
        	st.PRONTO 			= CBool(x(count))
        Case 6
        	st.STROBE 			= CBool(x(count))
        Case Else
			Throw New System.Exception("GestioneZonaR2.movbas -&gt; Deserializza_stEstrattore() ECCEZZIONE valore Case ")
        End Select
    Next

End Function

Sub AggiornaPosizioniEstrattori_ZONA_R2_ES2(connectionString As String )
	AggiornaPosizioneEstrattore(1 , 2,connectionString)
	AggiornaPosizioneEstrattore(2 , 2,connectionString)
End Sub

Sub AggiornaPosizioneEstrattore(mag As Integer, estr As Integer, connectionString As String )
	Dim varEstrattore As String
	Dim varEstrattoreOld As String
	Dim cass As Integer
	Dim cassOld As Integer
	Dim query As String
	Dim ret As Integer

	'abilito LogMsg
	enableLogMsg = True

	varEstrattore 		= "MAG" &amp; CStr(mag) &amp; "_ES" &amp; CStr(estr) &amp; "_ACT"
	varEstrattoreOld 	= "MAG" &amp; CStr(mag) &amp; "_ES" &amp; CStr(estr) &amp; "_ACT_OLD"

	cass 		= GetVariableValue(varEstrattore 		&amp; ":ID_CASSETTO")
	cassOld 	= GetVariableValue(varEstrattoreOld 	&amp; ":ID_CASSETTO")

	If (cass = 0 And (cassOld &lt;&gt; cass)) Or cassOld = UPDATE_ESTRATTORI Then
		'ho chiamoto guori il cassetto 0
		'devo resettare le variabili struct dei pezzi in scarico
		If mag = 1 Then
			ResetDatiMembriStruttura("SCAR_M1_PZ1")
			ResetDatiMembriStruttura("SCAR_M1_PZ2")
			ResetDatiMembriStruttura("SCAR_M1_PZ3")
			ResetDatiMembriStruttura("SCAR_M1_PZ4")
		Else
			ResetDatiMembriStruttura("SCAR_M2_PZ1")
			ResetDatiMembriStruttura("SCAR_M2_PZ2")
			ResetDatiMembriStruttura("SCAR_M2_PZ3")
			ResetDatiMembriStruttura("SCAR_M2_PZ4")

		End If
	End If

	If (cass &lt;&gt; cassOld) And (cass &lt;&gt; 0) Then
		'devo aggiornare il DB

		'per prima cosa metto dentro eventuali pezzi che sono nell'estrattore
		query = "UPDATE `gualini`.`cassetto` " &amp; _
			"Set " &amp; _
			"`POSIZIONE` =  " 			&amp; CStr(0) 	&amp; _
			" WHERE "	&amp; _
			"`POSIZIONE` =  " 						&amp; CStr(estr) &amp; " And " &amp; _
			"`magazzino_ID_MAGAZZINO` =  " &amp; CStr(mag) &amp; _
			";"

		ret = SqlExecuteNonQuery(MysSqlConnectionString, query)
		If ret &lt; 0 Then
			LogMsg		"AggiornaPosizioneEstrattore() -&gt; SqlExecuteNonQuery ERROR: errorcode = " &amp; CStr(ret)	&amp; "; query= " &amp; query &amp; ";"
		ElseIf ret = 0 Then
			LogMsg		"AggiornaPosizioneEstrattore() -&gt; SqlExecuteNonQuery no Row updated " &amp; CStr(ret)	&amp; "; query= " &amp; query &amp; ";"
		ElseIf ret &gt; 0 Then
			LogMsg		"AggiornaPosizioneEstrattore() -&gt; SqlExecuteNonQuery NumRow  = " &amp; CStr(ret)	&amp; "; query= " &amp; query &amp; ";"
		End If

		'poi metto fuori il pezzo che è realmente nell'estrattore, se ce ne è uno
		If cass &gt; 0 Then
			query = "UPDATE `gualini`.`cassetto` " &amp; _
				"Set " &amp; _
				"`POSIZIONE` =  " 			&amp; CStr(estr) 	&amp; _
				" WHERE "	&amp; _
				"`ID_CASSETTO` =  " 					&amp; CStr(cass) &amp; " And " &amp; _
				"`magazzino_ID_MAGAZZINO` =  " &amp; CStr(mag) &amp; _
				";"

			ret = SqlExecuteNonQuery(MysSqlConnectionString, query)
			If ret &lt; 0 Then
				LogMsg		"AggiornaPosizioneEstrattore() -&gt; SqlExecuteNonQuery ERROR: errorcode = " &amp; CStr(ret)	&amp; "; query= " &amp; query &amp; ";"
			ElseIf ret = 0 Then
				LogMsg		"AggiornaPosizioneEstrattore() -&gt; SqlExecuteNonQuery no Row updated " 	&amp; CStr(ret)	&amp; "; query= " &amp; query &amp; ";"
			ElseIf ret &gt; 0 Then
				LogMsg		"AggiornaPosizioneEstrattore() -&gt; SqlExecuteNonQuery NumRow  = " &amp; CStr(ret)	&amp; "; query= " &amp; query &amp; ";"
			End If
		End If

		'poi metto i dati dei singoli pezzi nelle variabili Mx_SCAR_PZx
		ret = AggiornaDatiPezziInEstrattore2(connectionString, mag, cass)
		If ret &lt;&gt; 0 Then
			'alzo allarme Errore aggiornamento dati Estrattore2
			If mag = 1 Then
				alm_M1_ES2_ErrDatiDaDB = True
			End If
			If mag = 2 Then
				alm_M2_ES2_ErrDatiDaDB = True
			End If
		End If

		'alla fine aggiorno la variabile Old
		AggiornaMembri(varEstrattore, varEstrattoreOld)
	End If

	'disabilito LogMsg
	enableLogMsg = False
End Sub

Function AggiornaDatiPezziInEstrattore2(connectionString, mag, cass) As Integer
	Dim ret As Integer
	Dim count As Integer
	Dim prefixStruct As String
	Dim varEstrattore As String
	Dim struct As String

	AggiornaDatiPezziInEstrattore2 = 0	'inizializzo

	If mag = 1 Then
		prefixStruct = "SCAR_M1_PZ"
		varEstrattore = "MAG1_ES2_ACT"
	ElseIf mag = 2 Then
		prefixStruct = "SCAR_M2_PZ"
		varEstrattore = "MAG2_ES2_ACT"
	Else
		LogMsg("GestioneZonaR2.movbas -&gt; AggiornaDatiPezziInEstrattore2() ECCEZZIONE: valore parametro mag non ammesso: " &amp; CStr(mag) &amp; ".")
		Throw New System.Exception("GestioneZonaR2.movbas -&gt; AggiornaDatiPezziInEstrattore2() ECCEZZIONE: valore parametro mag non ammesso: " &amp; CStr(mag) &amp; ".")
	End If

	'reset dei dati membri
	For count = 1 To 4 Step 1
		struct = prefixStruct &amp; CStr(count)
		ResetDatiMembriStruttura(struct)
	Next
	For count = 1 To 4 Step 1
		struct = prefixStruct &amp; CStr(count)
		ret = AggiornaDatiPezziInScarico(connectionString, struct, mag, cass , count)
		If ret &lt;&gt; 0 Then
			'torno errore
			AggiornaDatiPezziInEstrattore2 = -1
		End If
	Next
	'alla fine aggiorno i riferimenti nell'estrattore
	SetVariableValue(varEstrattore &amp; ":ID_QUARTINA"		, GetVariableValue(prefixStruct &amp; "1" &amp; ":ID_QUARTINA"))
	SetVariableValue(varEstrattore &amp; ":NOME_PEZZO_UNICO", GetVariableValue(prefixStruct &amp; "1" &amp; ":NOME_PEZZO_UNICO"))

End Function

Function AggiornaDatiPezziInScarico(connectionString As String, structname As String, mag As Integer, cass As Integer, pz As Integer) As Integer
	AggiornaDatiPezziInScarico = 0 	'inizializzzo

    Dim commandText As String

    Dim tipoprofilo As String
	Dim countz As Integer

    If mag &lt;&gt; 1 And mag &lt;&gt; 2 Then
    	LogMsg("GestioneZonaR2.movbas -&gt; AggiornaDatiPezziInScarico() ECCEZZIONE: valore parametro mag non ammesso: " &amp; CStr(mag) &amp; ".")
		Throw New System.Exception("GestioneZonaR2.movbas -&gt; AggiornaDatiPezziInScarico() ECCEZZIONE: valore parametro mag non ammesso: " &amp; CStr(mag) &amp; ".")
    End If

    Const ERR_GENERICO As Integer = -1 					'ERRORE GENERICO
    Const ERR_PEZZI_NON_TROVATI As Integer = -2 		'ERRORE Nessun pezzo nell'estrattore 2
    Const ERR_VALORI_NULLI_PRESENTI As Integer = -3 	'ERRORE Trovati valori nulli nei dati pezzo
    Const ERR_GENERIC_EXCEPION As Integer = -101	 	'ERRORE eccezzione generica
    Const ERR_ODBC_EXCEPTION As Integer = -102	 		'ERRORE ecezzione ODBC


	'cerco nel db a quale cassetto è assegnata la quartina
	Try
        Using MyConnection As New System.Data.Odbc.OdbcConnection(connectionString)
            MyConnection.Open()
            commandText = "Select * FROM gualini.tutti_pezzi_count_profili WHERE " _
            				&amp; " magazzino_ID_MAGAZZINO = " &amp; CStr(mag) _
            				&amp; " AND cassetto_ID_CASSETTO = " &amp; CStr(cass) _
            				&amp; " AND POSIZIONE = " &amp; CStr(pz) _
            				&amp; " And POSIZIONE_CASSETTO = 2 ;"

            DebugMsg "GestioneZonaR2.movbas -&gt; AggiornaDatiPezziInScarico(); commandText = " &amp; commandText

            Using MyCommand As New OdbcCommand()

				MyCommand.Connection = MyConnection
	            MyCommand.CommandText = commandText

				Using MyDataReader As OdbcDataReader
					MyDataReader = MyCommand.ExecuteReader

					If MyDataReader.HasRows Then
						MyDataReader.Read

						'memo del cassetto assegnato per procedura CondizioneAssegnaMissioneRobot()
						SetVariableValue(structname &amp; ":CASSETTO_ASSEGNATO"				, MyDataReader("ID_CASSETTO"))
						
						SetVariableValue(structname &amp; ":ID_QUARTINA"					, MyDataReader("ID_QUARTINA"))
						SetVariableValue(structname &amp; ":TOTALE_PEZZI_QUARTINA"			, MyDataReader("TOTALE_PEZZI_QUARTINA"))
						SetVariableValue(structname &amp; ":NUM_SQUADRETTE1"				, MyDataReader("NUM_SQUADRETTE1"))
						SetVariableValue(structname &amp; ":COD_SQUADRETTA1"				, MyDataReader("COD_SQUADRETTA1"))
						SetVariableValue(structname &amp; ":NUM_SQUADRETTE2"				, MyDataReader("NUM_SQUADRETTE2"))
						SetVariableValue(structname &amp; ":COD_SQUADRETTA2"				, MyDataReader("COD_SQUADRETTA2"))
						SetVariableValue(structname &amp; ":NOME_COMMESSA"					, MyDataReader("NOME_COMMESSA"))
						SetVariableValue(structname &amp; ":POSIZIONE"						, MyDataReader("POSIZIONE"))
						SetVariableValue(structname &amp; ":NOME_PEZZO_UNICO"				, MyDataReader("ID_PEZZO"))
						SetVariableValue(structname &amp; ":NOME_PEZZO_ESTERNO"				, MyDataReader("NOME_PEZZO_ESTERNO"))
						SetVariableValue(structname &amp; ":CODICE_PROFILO"					, MyDataReader("CODICE_PROFILO"))
						SetVariableValue(structname &amp; ":SERIE_PROFILO"					, MyDataReader("SERIE_PROFILO"))
						SetVariableValue(structname &amp; ":MAX_LUNGHEZZA"					, MyDataReader("MAX_LUNGHEZZA"))
						SetVariableValue(structname &amp; ":ALTEZZA_PROFILO"				, MyDataReader("ALTEZZA_PROFILO"))
						SetVariableValue(structname &amp; ":LARGHEZZA_PROFILO"				, MyDataReader("LARGHEZZA_PROFILO"))
						SetVariableValue(structname &amp; ":MISURA_CAMERA_ESTERNA"			, MyDataReader("MISURA_CAMERA_ESTERNA"))
						SetVariableValue(structname &amp; ":APPOGGIO_PEZZO"					, MyDataReader("APPOGGIO_PEZZO"))
						SetVariableValue(structname &amp; ":POSIZIONE_PEZZO_ESTERNO"		, MyDataReader("POSIZIONE_PEZZO_ESTERNO"))
						SetVariableValue(structname &amp; ":ID_PEZZO_ESTERNO"				, MyDataReader("ID_PEZZO_ESTERNO"))
						SetVariableValue(structname &amp; ":LUNGHEZZA_PEZZO_ESTERNO"		, MyDataReader("LUNGHEZZA_PEZZO_ESTERNO"))
						SetVariableValue(structname &amp; ":FILE_XML"						, MyDataReader("FILE_XML"))
						SetVariableValue(structname &amp; ":DATA"							, MyDataReader("DATA"))
						SetVariableValue(structname &amp; ":ORA"							, MyDataReader("ORA"))

						'idati seguenti sono il risultato di una join per cui devo verificare che non siano NULL

						SetVariableValue(structname &amp; ":R2_TIPO_PROFILO"				, IIf(IsDBNull(MyDataReader("TIPO_PROFILO")), "NULL", MyDataReader("TIPO_PROFILO")))	'MyDataReader("TIPO_PROFILO")
						SetVariableValue(structname &amp; ":R2_TELAIO"						, IIf(IsDBNull(MyDataReader("TELAIO")), "NULL", MyDataReader("TELAIO"))) 				'MyDataReader("TELAIO"))
						SetVariableValue(structname &amp; ":R2_COUNT_Z"						, IIf(IsDBNull(MyDataReader("TELAIO")), 0, MyDataReader("COUNT_Z"))) 					'MyDataReader("COUNT_Z"))

						SetVariableValue(structname &amp; ":R2_BANCO_SQ1"					, IIf(IsDBNull(MyDataReader("BANCO_SQ1")), 0, MyDataReader("BANCO_SQ1"))) 				'MyDataReader("BANCO_SQ1"))
						SetVariableValue(structname &amp; ":R2_FILA_SQ1"					, IIf(IsDBNull(MyDataReader("FILA_SQ1")), 0, MyDataReader("FILA_SQ1"))) 				'MyDataReader("FILA_SQ1"))
						SetVariableValue(structname &amp; ":R2_BANCO_SQ2"					, IIf(IsDBNull(MyDataReader("BANCO_SQ2")), 0, MyDataReader("BANCO_SQ2"))) 				'MyDataReader("BANCO_SQ2"))
						SetVariableValue(structname &amp; ":R2_FILA_SQ2"					, IIf(IsDBNull(MyDataReader("FILA_SQ2")), 0, MyDataReader("FILA_SQ2"))) 				'MyDataReader("FILA_SQ2"))
						SetVariableValue(structname &amp; ":R2_COLLA"						, IIf(IsDBNull(MyDataReader("Colla")), 0, MyDataReader("Colla"))) 						'MyDataReader("Colla"))
						SetVariableValue(structname &amp; ":R2_ATTREZZATURA"				, IIf(IsDBNull(MyDataReader("Attrezzatura")), 0, MyDataReader("Attrezzatura"))) 		'MyDataReader("Attrezzatura"))
						SetVariableValue(structname &amp; ":R2_APERTURA"					, IIf(IsDBNull(MyDataReader("Apertura")), 0, MyDataReader("Apertura"))) 				'MyDataReader("Apertura"))
						SetVariableValue(structname &amp; ":R2_OFFSET_PEZZO"				, IIf(IsDBNull(MyDataReader("OffsetPezzo")), 0, MyDataReader("OffsetPezzo"))) 			'MyDataReader("OffsetPezzo"))
						'SetVariableValue(structname &amp; ":R2_OFFSET_SQ1"					, IIf(IsDBNull(MyDataReader("OffsetSuadretta1")), 0, MyDataReader("OffsetSuadretta1"))) 'MyDataReader("OffsetSuadretta1"))
						'SetVariableValue(structname &amp; ":R2_OFFSET_SQ2"					, IIf(IsDBNull(MyDataReader("OffsetSuadretta2")), 0, MyDataReader("OffsetSuadretta2"))) 'MyDataReader("OffsetSuadretta2"))
						SetVariableValue(structname &amp; ":R2_CODICE_PRG"					, IIf(IsDBNull(MyDataReader("CodiceRobot")), 0, MyDataReader("CodiceRobot"))) 			'MyDataReader("CodiceRobot"))

						'SetVariableValue(structname &amp; ":xx"				, MyDataReader("xx"))

						'se trovo valori nulli significa che si sono verificate incongruenze nei file inseriti dalle quadra, allora segnalo
						If GetVariableValue(structname &amp; ":R2_CODICE_PRG") = 0 Then
							AggiornaDatiPezziInScarico = ERR_VALORI_NULLI_PRESENTI
							LogMsg(" AggiornaDatiPezziInScarico() - ERRORE: ERR_VALORI_NULLI_PRESENTI.")
						End If

						tipoprofilo = GetVariableValue(structname &amp; ":R2_TIPO_PROFILO")
						countz 		= GetVariableValue(structname &amp; ":R2_COUNT_Z")

						If tipoprofilo = "L" And countz &lt; 4 Then
							SetVariableValue(structname &amp; ":R2_RUOTA_PEZZO"	, True)
						Else
							SetVariableValue(structname &amp; ":R2_RUOTA_PEZZO"	, False)
						End If

						'#### altri campi disponibili
'Select `tutti_pezzi_count_profili`.``,
'    `tutti_pezzi_count_profili`.`DISPONIBILE`,
'    `tutti_pezzi_count_profili`.`STATO`,
'    `tutti_pezzi_count_profili`.`POSIZIONE_CASSETTO`,
'    `tutti_pezzi_count_profili`.`magazzino_ID_MAGAZZINO`,
'    `tutti_pezzi_count_profili`.`lastupdate`,
'    `tutti_pezzi_count_profili`.`lastupdate_milli`,
'    `tutti_pezzi_count_profili`.`cassetto_ID_CASSETTO`,
'    `tutti_pezzi_count_profili`.`cassetto_magazzino_ID_MAGAZZINO`,
'    `tutti_pezzi_count_profili`.`quartina_ID_QUARTINA`,
'    `tutti_pezzi_count_profili`.`PRELEVATO`,
						'####
					Else
						AggiornaDatiPezziInScarico = ERR_PEZZI_NON_TROVATI
					End If
				End Using	'MyDataReader.Close
			End Using	'MyCommand.Dispose
        End Using	'MyConnection.Close

	  'Catch program exception
	Catch MyException As Exception
		DebugMsg(MyException.ToString)
		MsgBox("GestioneZonaR2.movbas -&gt; AggiornaDatiPezziInScarico() - ERRORE: Exception." &amp; vbCrLf &amp; _
					 MyException.ToString &amp; ".")
		LogMsg(" AggiornaDatiPezziInScarico() - ERRORE: Exception."  &amp; _
					 MyException.ToString &amp; ".")

		'alzare alarme
		alm_ZonaR2_ODBC_txt = "ERR_GENERIC_EXCEPION" &amp; " -- GestioneZonaR2.movbas -&gt; AggiornaDatiPezziInScarico() - ERRORE: Exception."  &amp; _
					 MyException.ToString &amp; "." 'ERR_GENERIC_EXCEPION 'ERRORE eccezzione generic
		alm_ZonaR2_ODBC = True
		AggiornaDatiPezziInScarico = ERR_GENERIC_EXCEPION 'torno errore
		Exit Function

	  'Catch ODBC Exception
	Catch MyOdbcException As OdbcException
		DebugMsg(MyOdbcException.ToString)
		MsgBox("GestioneZonaR2.movbas -&gt; AggiornaDatiPezziInScarico() - ERRORE ODBC: OdbcException." &amp; vbCrLf &amp; _
					MyOdbcException.ToString  &amp; ".")
		LogMsg("AggiornaDatiPezziInScarico() - ERRORE ODBC: OdbcException."  &amp; _
					MyOdbcException.ToString  &amp; ".")
		'TODO
		'alzare alarme
		alm_ZonaR2_ODBC_txt = "ERR_ODBC_EXCEPTION" &amp; " -- GestioneZonaR2.movbas -&gt; AggiornaDatiPezziInScarico() - ERRORE: Exception."  &amp; _
					 MyException.ToString &amp; "." 'ERR_ODBC_EXCEPTION 'ERRORE ecezzione ODBC
		alm_ZonaR2_ODBC = True
		AggiornaDatiPezziInScarico = ERR_ODBC_EXCEPTION 'torno errore
		Exit Function
    End Try
End Function



Function AggiornaCassettiPieni( connectionString As String, mag As Integer) As Integer
	AggiornaCassettiPieni = 0 	'inizializzzo

    Dim commandText As String
    Dim varname As String
    'Dim cassetti As Integer

    Select Case mag
		Case 1
			varname = "loc_ImpostazioniImpianto:M1_CASS_PIENI"
		Case 2
			varname = "loc_ImpostazioniImpianto:M2_CASS_PIENI"
		Case Else
			Throw New System.Exception("GestioneZonaR2.movbas -&gt; AggiornaCassettiPieni() ECCEZZIONE: valore parametro mag non ammesso: " &amp; CStr(mag) &amp; ".")
    End Select

    Const ERR_GENERICO As Integer = -1 					'ERRORE GENERICO
    Const ERR_GENERIC_EXCEPION As Integer = -101	 	'ERRORE eccezzione generica
    Const ERR_ODBC_EXCEPTION As Integer = -102	 		'ERRORE ecezzione ODBC


	'cerco nel db a quale cassetto è assegnata la quartina
	Try
        Using MyConnection As New System.Data.Odbc.OdbcConnection(connectionString)
            MyConnection.Open()
            commandText = "SELECT COUNT(*) AS PIENI " &amp; _
                      	" FROM  `gualini`.`cassetti_pieni` " &amp; _
            			" WHERE ID_MAGAZZINO = " &amp; CStr(mag) &amp;  _
            			" AND POSIZIONE = 0;"

            DebugMsg "GestioneZonaR2.movbas -&gt; AggiornaCassettiPieni(); commandText = " &amp; commandText

            Using MyCommand As New OdbcCommand()

				MyCommand.Connection = MyConnection
	            MyCommand.CommandText = commandText

				Using MyDataReader As OdbcDataReader
					MyDataReader = MyCommand.ExecuteReader

					If MyDataReader.HasRows Then
						MyDataReader.Read
						SetVariableValue(varname, MyDataReader("PIENI"))
					Else
						SetVariableValue(varname, 0)
					End If
				End Using	'MyDataReader.Close
			End Using	'MyCommand.Dispose
        End Using	'MyConnection.Close

	  'Catch program exception
	Catch MyException As Exception
		DebugMsg(MyException.ToString)
		MsgBox("GestioneZonaR2.movbas -&gt; AggiornaCassettiPieni() - ERRORE: Exception." &amp; vbCrLf &amp; _
					 MyException.ToString &amp; ".")
		LogMsg(" AggiornaCassettiPieni() - ERRORE: Exception."  &amp; _
					 MyException.ToString &amp; ".")

		'alzare alarme
		alm_ZonaR2_ODBC_txt = "ERR_GENERIC_EXCEPION" &amp; " -- GestioneZonaR2.movbas -&gt; AggiornaCassettiPieni() - ERRORE: Exception."  &amp; _
					 MyException.ToString &amp; "." 'ERR_GENERIC_EXCEPION 'ERRORE eccezzione generic
		alm_ZonaR2_ODBC = True
		AggiornaCassettiPieni = 100 'torno errore
		Exit Function

	  'Catch ODBC Exception
	Catch MyOdbcException As OdbcException
		DebugMsg(MyOdbcException.ToString)
		MsgBox("GestioneZonaR2.movbas -&gt; AggiornaCassettiPieni() - ERRORE ODBC: OdbcException." &amp; vbCrLf &amp; _
					MyOdbcException.ToString  &amp; ".")
		LogMsg("AggiornaCassettiPieni() - ERRORE ODBC: OdbcException."  &amp; _
					MyOdbcException.ToString  &amp; ".")
		'TODO
		'alzare alarme
		alm_ZonaR2_ODBC_txt = "ERR_ODBC_EXCEPTION" &amp; " -- GestioneZonaR2.movbas -&gt; AggiornaCassettiPieni() - ERRORE: Exception."  &amp; _
					 MyException.ToString &amp; "." 'ERR_ODBC_EXCEPTION 'ERRORE ecezzione ODBC
		alm_ZonaR2_ODBC = True
		AggiornaCassettiPieni = 101 'torno errore
		Exit Function
    End Try
End Function

Function AggiornaCassettiDisponibili( connectionString As String, mag As Integer) As Integer
	AggiornaCassettiDisponibili = 0 	'inizializzzo

    Dim commandText As String
    Dim varname As String
    'Dim cassetti As Integer

    Select Case mag
		Case 1
			varname = "loc_ImpostazioniImpianto:M1_CASS_DISPONIBILI"
		Case 2
			varname = "loc_ImpostazioniImpianto:M2_CASS_DISPONIBILI"
		Case Else
			Throw New System.Exception("GestioneZonaR2.movbas -&gt; AggiornaCassettiDisponibili() ECCEZZIONE: valore parametro mag non ammesso: " &amp; CStr(mag) &amp; ".")
    End Select

    Const ERR_GENERICO As Integer = -1 					'ERRORE GENERICO
    Const ERR_GENERIC_EXCEPION As Integer = -101	 	'ERRORE eccezzione generica
    Const ERR_ODBC_EXCEPTION As Integer = -102	 		'ERRORE ecezzione ODBC


	'cerco nel db a quale cassetto è assegnata la quartina
	Try
        Using MyConnection As New System.Data.Odbc.OdbcConnection(connectionString)
            MyConnection.Open()
            commandText = "SELECT COUNT(*) AS PIENI " &amp; _
                      	" FROM  `gualini`.`cassetti_disponibili` " &amp; _
            			" WHERE ID_MAGAZZINO = " &amp; CStr(mag) &amp; _
            			" AND POSIZIONE = 0 " &amp; ";"

            DebugMsg "GestioneZonaR2.movbas -&gt; AggiornaCassettiDisponibili(); commandText = " &amp; commandText

            Using MyCommand As New OdbcCommand()

				MyCommand.Connection = MyConnection
	            MyCommand.CommandText = commandText

				Using MyDataReader As OdbcDataReader
					MyDataReader = MyCommand.ExecuteReader

					If MyDataReader.HasRows Then
						MyDataReader.Read
						SetVariableValue(varname, MyDataReader("PIENI"))
					Else
						SetVariableValue(varname, 0)
					End If
				End Using	'MyDataReader.Close
			End Using	'MyCommand.Dispose
        End Using	'MyConnection.Close

	  'Catch program exception
	Catch MyException As Exception
		DebugMsg(MyException.ToString)
		MsgBox("GestioneZonaR2.movbas -&gt; AggiornaCassettiDisponibili() - ERRORE: Exception." &amp; vbCrLf &amp; _
					 MyException.ToString &amp; ".")
		LogMsg(" AggiornaCassettiDisponibili() - ERRORE: Exception."  &amp; _
					 MyException.ToString &amp; ".")

		'alzare alarme
		alm_ZonaR2_ODBC_txt = "ERR_GENERIC_EXCEPION" &amp; " -- GestioneZonaR2.movbas -&gt; AggiornaCassettiDisponibili() - ERRORE: Exception."  &amp; _
					 MyException.ToString &amp; "." 'ERR_GENERIC_EXCEPION 'ERRORE eccezzione generic
		alm_ZonaR2_ODBC = True
		AggiornaCassettiDisponibili = 100 'torno errore
		Exit Function

	  'Catch ODBC Exception
	Catch MyOdbcException As OdbcException
		DebugMsg(MyOdbcException.ToString)
		MsgBox("GestioneZonaR2.movbas -&gt; AggiornaCassettiDisponibili() - ERRORE ODBC: OdbcException." &amp; vbCrLf &amp; _
					MyOdbcException.ToString  &amp; ".")
		LogMsg("AggiornaCassettiDisponibili() - ERRORE ODBC: OdbcException."  &amp; _
					MyOdbcException.ToString  &amp; ".")
		'TODO
		'alzare alarme
		alm_ZonaR2_ODBC_txt = "ERR_ODBC_EXCEPTION" &amp; " -- GestioneZonaR2.movbas -&gt; AggiornaCassettiDisponibili() - ERRORE: Exception."  &amp; _
					 MyException.ToString &amp; "." 'ERR_ODBC_EXCEPTION 'ERRORE ecezzione ODBC
		alm_ZonaR2_ODBC = True
		AggiornaCassettiDisponibili = 101 'torno errore
		Exit Function
    End Try
End Function

Function AggiornaCassettiInRiempimento( connectionString As String, mag As Integer) As Integer
	AggiornaCassettiInRiempimento = 0 	'inizializzzo

    Dim commandText As String
    Dim varname As String
    'Dim cassetti As Integer

    Select Case mag
		Case 1
			varname = "loc_ImpostazioniImpianto:M1_CASS_IN_RIEMPIMENTO"
		Case 2
			varname = "loc_ImpostazioniImpianto:M2_CASS_IN_RIEMPIMENTO"
		Case Else
			Throw New System.Exception("GestioneZonaR2.movbas -&gt; AggiornaCassettiInRiempimento() ECCEZZIONE: valore parametro mag non ammesso: " &amp; CStr(mag) &amp; ".")
    End Select

    Const ERR_GENERICO As Integer = -1 					'ERRORE GENERICO
    Const ERR_GENERIC_EXCEPION As Integer = -101	 	'ERRORE eccezzione generica
    Const ERR_ODBC_EXCEPTION As Integer = -102	 		'ERRORE ecezzione ODBC


	'cerco nel db a quale cassetto è assegnata la quartina
	Try
        Using MyConnection As New System.Data.Odbc.OdbcConnection(connectionString)
            MyConnection.Open()
            commandText = "SELECT COUNT(*) AS INRIEMP " &amp; _
                      	" FROM  `gualini`.`cassetti_in_riempimento` " &amp; _
            			" WHERE ID_MAGAZZINO = " &amp; CStr(mag) &amp; ";"

            DebugMsg "GestioneZonaR2.movbas -&gt; AggiornaCassettiInRiempimento(); commandText = " &amp; commandText

            Using MyCommand As New OdbcCommand()

				MyCommand.Connection = MyConnection
	            MyCommand.CommandText = commandText

				Using MyDataReader As OdbcDataReader
					MyDataReader = MyCommand.ExecuteReader

					If MyDataReader.HasRows Then
						MyDataReader.Read
						SetVariableValue(varname, MyDataReader("INRIEMP"))
					Else
						SetVariableValue(varname, 0)
					End If
				End Using	'MyDataReader.Close
			End Using	'MyCommand.Dispose
        End Using	'MyConnection.Close

	  'Catch program exception
	Catch MyException As Exception
		DebugMsg(MyException.ToString)
		MsgBox("GestioneZonaR2.movbas -&gt; AggiornaCassettiInRiempimento() - ERRORE: Exception." &amp; vbCrLf &amp; _
					 MyException.ToString &amp; ".")
		LogMsg(" AggiornaCassettiInRiempimento() - ERRORE: Exception."  &amp; _
					 MyException.ToString &amp; ".")

		'alzare alarme
		alm_ZonaR2_ODBC_txt = "ERR_GENERIC_EXCEPION" &amp; " -- GestioneZonaR2.movbas -&gt; AggiornaCassettiInRiempimento() - ERRORE: Exception."  &amp; _
					 MyException.ToString &amp; "." 'ERR_GENERIC_EXCEPION 'ERRORE eccezzione generic
		alm_ZonaR2_ODBC = True
		AggiornaCassettiInRiempimento = 100 'torno errore
		Exit Function

	  'Catch ODBC Exception
	Catch MyOdbcException As OdbcException
		DebugMsg(MyOdbcException.ToString)
		MsgBox("GestioneZonaR2.movbas -&gt; AggiornaCassettiInRiempimento() - ERRORE ODBC: OdbcException." &amp; vbCrLf &amp; _
					MyOdbcException.ToString  &amp; ".")
		LogMsg("AggiornaCassettiInRiempimento() - ERRORE ODBC: OdbcException."  &amp; _
					MyOdbcException.ToString  &amp; ".")
		'TODO
		'alzare alarme
		alm_ZonaR2_ODBC_txt = "ERR_ODBC_EXCEPTION" &amp; " -- GestioneZonaR2.movbas -&gt; AggiornaCassettiInRiempimento() - ERRORE: Exception."  &amp; _
					 MyException.ToString &amp; "." 'ERR_ODBC_EXCEPTION 'ERRORE ecezzione ODBC
		alm_ZonaR2_ODBC = True
		AggiornaCassettiInRiempimento = 101 'torno errore
		Exit Function
    End Try
End Function


Function SuperatoTimeout(ByRef lastcheck As Double, tout As Integer) As Boolean
	Dim tempo As Double
	tempo = Abs(lastcheck - Timer)
	If tempo &gt; tout Then
		SuperatoTimeout = True
	Else
		SuperatoTimeout = False
	End If

End Function


Sub DebugMsg(msg As String)
	Dim prefix As String
	If [loc_ImpostazioniImpianto:AbilitaDbgMsg] Then
		prefix = "GestioneZonaR2.movbas -&gt; "
		Debug.Print prefix &amp; msg
	End If
End Sub

Sub LogMsg(msg As String)
	If enableLogMsg Then
		Dim prefix As String
		prefix = "GestioneZonaR2.movbas -&gt; "
		Debug.Print prefix &amp; msg
	End If
End Sub

Function SqlExecuteNonQuery(connectionString As String, query As String) As Integer
	'ExecuteNonQuery used for executing queries that does not return any data. It is used to execute the sql statements like update, insert, delete etc.
	'ExecuteNonQuery executes the command and returns the number of rows affected

    Dim commandText As String
    Dim excp As Boolean
    Dim rCount As Integer

    Const ERR_GENERICO As Integer = -1 					'ERRORE GENERICO
    Const ERR_GENERIC_EXCEPION As Integer = -101	 	'ERRORE eccezzione generica
    Const ERR_ODBC_EXCEPTION As Integer = -102	 		'ERRORE ecezzione ODBC

    SqlExecuteNonQuery = ERR_GENERICO	'inizializzzo a ERR_GENERICO

	commandText = query
	excp = False
	rCount = 0
	Try
        Using MyConnection As New System.Data.Odbc.OdbcConnection(connectionString)
            MyConnection.Open()

            DebugMsg "GestioneZonaR2.movbas -&gt; SqlExecuteNonQuery(); commandText = " &amp; commandText

            Using MyCommand As New OdbcCommand()
				MyCommand.Connection = MyConnection
	            MyCommand.CommandText = commandText
	            rCount = MyCommand.ExecuteNonQuery()
				Debug.Print	"rCout = MyCommand.ExecuteNonQuery() = " &amp; rCount
			End Using	'MyCommand.Dispose
        End Using	'MyConnection.Close

	  'Catch program exception
	Catch MyException As Exception
		excp = True
		DebugMsg(MyException.ToString)
		MsgBox("GestioneZonaR2.movbas -&gt; SqlExecuteNonQuery() - ERRORE: Exception." &amp; vbCrLf &amp; _
					 MyException.ToString &amp; ".")
		LogMsg(" SqlExecuteNonQuery() - ERRORE: Exception."   &amp; _
					 MyException.ToString &amp; ".")

		'alzare alarme
		alm_ZonaR2_ODBC_txt = "ERR_GENERIC_EXCEPION" &amp; " -- GestioneZonaR2.movbas -&gt; SqlExecuteNonQuery() - ERRORE: Exception."   &amp; _
					 MyException.ToString &amp; "." 'ERR_GENERIC_EXCEPION 'ERRORE eccezzione generic
		alm_ZonaR2_ODBC = True
		SqlExecuteNonQuery = ERR_GENERIC_EXCEPION
		'Exit Function

	  'Catch ODBC Exception
	Catch MyOdbcException As OdbcException
		excp = True
		DebugMsg(MyOdbcException.ToString)
		MsgBox("GestioneZonaR2.movbas -&gt; SqlExecuteNonQuery() - ERRORE ODBC: OdbcException." &amp; vbCrLf &amp; _
					MyOdbcException.ToString  &amp; ".")
		LogMsg("SqlExecuteNonQuery() - ERRORE ODBC: OdbcException."   &amp; _
					MyOdbcException.ToString  &amp; ".")
		'TODO
		'alzare alarme
		alm_ZonaR2_ODBC_txt = "ERR_ODBC_EXCEPTION" &amp; " -- GestioneZonaR2.movbas -&gt; SqlExecuteNonQuery() - ERRORE: Exception."   &amp; _
					 MyException.ToString &amp; "." 'ERR_ODBC_EXCEPTION 'ERRORE ecezzione ODBC
		alm_ZonaR2_ODBC = True
		SqlExecuteNonQuery = ERR_ODBC_EXCEPTION
	Finally
		If excp Then
			Exit Function
		End If
    End Try

    'tutto Ok
    SqlExecuteNonQuery = rCount
End Function

Sub AggiornaMembri(source As String, dest As String)
	Dim objDest As DBVarObjCmdTarget
	Dim objSource As DBVarObjCmdTarget
	Dim MemberDest As DBVarObjCmdTarget
	Dim MemberSource As DBVarObjCmdTarget

	Dim memberCount As Integer	'contatore dei membri

	Dim etSource As movicon.eVariableType
	Dim etDest As movicon.eVariableType

	DebugMsg("AggiornaMembri(source As String, dest As String) : " &amp; source &amp; "," &amp; dest)
	objSource 	= GetVariableObject(source)
	objDest 	= GetVariableObject(dest)

	If  objSource Is Nothing Or  objDest Is Nothing Then
		Throw New System.Exception("GestioneZonaR2.movbas -&gt; AggiornaMembri() objSource Is Nothing Or  objDest Is Nothing")
	End If

	'guardo se le var hanno tipo identico e sono struct Var
	etSource 	= objSource.GetType()
	etDest 		= objDest.GetType()

	If Not etSource = movicon.eVariableType.enum_VAR_TYPE_STRUCT Then
		Throw New System.Exception("GestioneZonaR2.movbas -&gt; AggiornaMembri() Not etSource = movicon.eVariableType.enum_VAR_TYPE_STRUCT")
		Exit Sub
	End If
	If Not etDest = movicon.eVariableType.enum_VAR_TYPE_STRUCT Then
		Throw New System.Exception("GestioneZonaR2.movbas -&gt; AggiornaMembri() Not etDest = movicon.eVariableType.enum_VAR_TYPE_STRUCT")
		Exit Sub
	End If

	memberCount = 0	'inizializzo a 0
	MemberSource 	= objSource.GetMemberObjectFromIndex(memberCount)
	MemberDest 		= objDest.GetMemberObjectFromIndex(memberCount)

	If (etSource = etDest) Then
		While (Not MemberSource Is Nothing) And (Not MemberDest Is Nothing )
			'DebugMsg "AggiorrnaMembri() -&gt; MemberSource name = " 	&amp; MemberSource.GetName 	&amp; "; value = " &amp; CStr(MemberSource.Value) 	&amp; "; Tipo = " &amp; CStr(MemberSource.GetType())
			'DebugMsg "AggiorrnaMembri() -&gt; MemberDest name = " 		&amp; MemberDest.GetName 	&amp; "; value = " &amp; CStr(MemberDest.Value) 	&amp; "; Tipo = " &amp; CStr(MemberDest.GetType())

			etSource 	= MemberSource.GetType()
			etDest 		= MemberDest.GetType()

			If (etSource = etDest) Then
				MemberDest.Value = MemberSource.Value
			End If

			memberCount = memberCount + 1
			MemberSource 	= objSource.GetMemberObjectFromIndex(memberCount)
			MemberDest 		= objDest.GetMemberObjectFromIndex(memberCount)
		End While

	End If

	MemberSource 	= Nothing
	MemberDest 		= Nothing
	objSource 		= Nothing
	objDest 		= Nothing

End Sub

Function MovimentatoPiuVecchio() As Integer
	MovimentatoPiuVecchio = 0

	If ([MAG1_ES2_ACT:DEPO] Or [MAG1_ES2_ACT:ID_CASSETTO] = 0) And ([MAG2_ES2_ACT:DEPO] Or [MAG2_ES2_ACT:ID_CASSETTO] = 0) Then
		'ho tutti i pezzi dei due estrattori depositati allora prendo quello che ha il timestamp più vecchio
		Dim objRet1 As DBVarObjCmdTarget
		Dim dTimeStamp1 As Date
		Dim nMS1 As Integer
		Dim dt1 As Double

		Dim objRet2 As DBVarObjCmdTarget
		Dim dTimeStamp2 As Date
		Dim nMS2 As Integer
		Dim dt2 As Double

		Dim differenza As Double

		objRet1 = GetVariableObject("MAG1_ES2_ACT:DEPO")
		dTimeStamp1 = objRet1.GetTimeStamp()
		nMS1 = objRet1.GetTimeStampMs()
		dt1 = CLng(dTimeStamp1) * 1000
		dt1 = dt1 + nMS1

		objRet2 = GetVariableObject("MAG2_ES2_ACT:DEPO")
		dTimeStamp2 = objRet2.GetTimeStamp()
		nMS2 = objRet2.GetTimeStampMs()
		dt2 = CLng(dTimeStamp2) * 1000
		dt2 = dt2 + nMS2

		differenza = dt1 - dt2
		DebugMsg "MovimentatoPiuVecchio() -&gt; differenza = dt1-dt2 = " &amp; CStr(dt1 -dt2)

		If differenza &gt; 0 Then
			'pezzo da Q1 più recente
			MovimentatoPiuVecchio = 2	'prendo da Q2 perchè più vecchio
		Else
			MovimentatoPiuVecchio = 1	'prendo da Q1 perchè più vecchio
		End If

		objRet1 = Nothing
		objRet2 = Nothing
	Else
		'ho solo un pezzo pronto o nessuno
		If [MAG1_ES2_ACT:DEPO]  Or [MAG1_ES2_ACT:ID_CASSETTO] = 0 Then
			MovimentatoPiuVecchio = 1
		End If
		If [MAG2_ES2_ACT:DEPO] Or [MAG2_ES2_ACT:ID_CASSETTO] = 0 Then
			MovimentatoPiuVecchio = 2
		End If
		'se no MovimentatoPiuVecchio = 0
	End If

End Function

Sub ResetDatiMembriStruttura(varname As String)
	'metto a 0 i membri di tipo numerico
	'a "" i membri stringa
	'a false i bit

	Dim objVar As DBVarObjCmdTarget
	Dim MemberVar As DBVarObjCmdTarget

	Dim mCount As Integer	'contatore dei membri
	Dim et As movicon.eVariableType

	objVar = GetVariableObject(varname)

	et = objVar.GetType()

	If et &lt;&gt; movicon.eVariableType.enum_VAR_TYPE_STRUCT Then
		DebugMsg 		"ResetDatiMembriStruttura() -&gt; Variabile = " 	&amp; varname 	&amp; " NON è una Struct."
		Exit Sub
	End If

	mCount = 0	'inizializzo a 0

	MemberVar 	= objVar.GetMemberObjectFromIndex(mCount)

	While Not MemberVar Is Nothing
		'DebugMsg 		"ResetDatiMembriStruttura() -&gt; MemberVar name = " 	&amp; MemberVar.GetName 	&amp; "; value = " &amp; CStr(MemberVar.Value) 	&amp; "; Tipo = " &amp; CStr(MemberVar.GetType())
		'Debug.Print 	"ResetDatiMembriStruttura() -&gt; MemberVar name = " 	&amp; MemberVar.GetName 	&amp; "; value = " &amp; CStr(MemberVar.Value) 	&amp; "; Tipo = " &amp; CStr(MemberVar.GetType())

		et = MemberVar.GetType()
		Select Case et
			Case movicon.eVariableType.enum_VAR_TYPE_BIT
				MemberVar.Value 	= False

			Case movicon.eVariableType.enum_VAR_TYPE_BYTE _
				, movicon.eVariableType.enum_VAR_TYPE_DOUBLE _
				, movicon.eVariableType.enum_VAR_TYPE_DWORD _
				, movicon.eVariableType.enum_VAR_TYPE_FLOAT _
				, movicon.eVariableType.enum_VAR_TYPE_SIGNBYTE _
				, movicon.eVariableType.enum_VAR_TYPE_SIGNDWORD _
				, movicon.eVariableType.enum_VAR_TYPE_SIGNWORD _
				, movicon.eVariableType.enum_VAR_TYPE_WORD

				MemberVar.Value 	= 0

			Case movicon.eVariableType.enum_VAR_TYPE_STRING
				MemberVar.Value 	= ""
			Case Else
				'tipo non resettabile :movicon.eVariableType.enum_VAR_TYPE_ARRAY movicon.eVariableType.enum_VAR_TYPE_E_UNKNOWN movicon.eVariableType.enum_VAR_TYPE_STRUCT
		End Select

		mCount = mCount + 1
		MemberVar 	= objVar.GetMemberObjectFromIndex(mCount)
	End While
	MemberVar 	= Nothing
	objVar 		= Nothing
End Sub
</ScriptCode>
<BreakPoints xsi:type="xsd:base64Binary">AiC2BQ==</BreakPoints>
<Mode RunAtServer="1" UseUIInterface="1" SeparateThread="1" UseItsTrace="1" ModalDialogs="1"/>
<Execution ThreadPriority="0" StatusVariable="statoScriptGestioneZonaR1" MaxInstances="1" SleepExecution="50" SyncroScriptTimeout="5000"/>
</MovResource>
