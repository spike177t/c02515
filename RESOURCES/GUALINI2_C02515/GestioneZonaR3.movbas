<?xml version="1.0" encoding="ISO-8859-1" ?>
<MovResource xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
<ScriptCode StartSel="9143" SelLength="0" OutStatusBar="1" OutLog="1" OutPrinter="0">'#Reference #System.Data, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089, processorArchitecture=x86

'#Language "WWB.NET"

Option Explicit

Imports System
Imports System.IO
Imports System.Data.Odbc

Public Structure DSnMembers
    Dim DSn As String
    Dim Uid As String
    Dim Pwd As String
End Structure


Const TOUT_RICHIEDIBILE 	As Integer 	= 2 'in secondi
Const TOUT_STEP				As Integer	= 120 'in secondi
Const UPDATE_ESTRATTORI		As Integer = 16500

Dim MySqlConnectionString As String
Dim richiedibileLastCheck As Double

Dim StatoCicloR3_Old As Integer


Dim enableLogMsg As Boolean = True

Sub Main()
	Dim ValutaProssimaCondizione As Boolean 'serve per valutare le condizioni dello stato Attesa

	Dim stepTout As Double

	Dim ret As Integer
	Dim retMsgBox As VbMsgBoxResult
	Dim strMsgBox As String

	Dim timerInvioDati As Double
	Dim datiR3_OK As Boolean

	'variabili per gestire operazioni da fare ogni tanto durante il ciclo
	Dim timerAggiornaOgniTanto As Double
	Dim timerAggiornaOgniTantoOld As Double
	Dim timerAggiornaOgniTantoDiff As Double
	Const timerAggiornaOgniTantoTOUT As Double = 2 'secondi


	If [loc_ImpostazioniImpianto:MySqlConnectionString] &lt;&gt; "" Then
	    MySqlConnectionString = [loc_ImpostazioniImpianto:MySqlConnectionString]
	Else
	    MySqlConnectionString = "DRIVER={MySQL ODBC 5.3 ANSI Driver};" &amp; _
	      "SERVER=localhost;" &amp; _
	      "DATABASE=gualini;" &amp; _
	      "UID=root;" &amp; _
	      "PASSWORD=co.mar;" &amp; _
	      "OPTION=3;"
	End If

	'####DEBUG
'GoTo ONDEBUG

	'####FINE DEBUG

	'inizializzo alcune variabili
	enableLogMsg = True

    If  StatoCicloR3 &lt; 100 Then
		StatoCicloR3 = 1000
    End If
    If StatoCicloR3 &lt;&gt; 1000 Then
    	retMsgBox = MsgBox("Attenzione: StatoCicloR3 = " &amp; CStr(StatoCicloR3) &amp; "!" &amp; vbCrLf &amp; "Resettare?", vbYesNo, "Attenzione")
    	If retMsgBox = vbYes Then
			StatoCicloR3 = 1000
    	End If
    End If


	'################
	Do
		'azioni da fare tutti i cicli
		If [loc_ImpostazioniImpianto:ResetCicloR3] Then
			[loc_ImpostazioniImpianto:ResetCicloR3] = False
			StatoCicloR3 = 100
		End If

		timerAggiornaOgniTanto = Timer()
		timerAggiornaOgniTantoDiff = Abs(timerAggiornaOgniTanto - timerAggiornaOgniTantoOld)
		If timerAggiornaOgniTantoDiff &gt; timerAggiornaOgniTantoTOUT Then
			timerAggiornaOgniTantoOld = Timer()
			If StatoCicloR3_Counter &lt; 1000 Then
				StatoCicloR3_Counter = StatoCicloR3_Counter + 1
			Else
				StatoCicloR3_Counter = 0
			End If
		End If

		'gestisco eventuali aggiornamenti da fare al DB per le posizioni degli estrattori


		'ciclo
		If Not alm_Presenti_ZonaR3 Then
			Select Case StatoCicloR3

				Case 100	'StatoIniziale
					DebugMsg "StatoCicloSarico = 100	'StatoIniziale"
					StatoCicloR3_txt = "100	'StatoIniziale"
					StatoCicloR3 = 1000			'Attesa

				Case 1000	'Attesa
					'DebugMsg "StatoCicloR3 = 1000	'Attesa"
					StatoCicloR3_txt = "1000	'Attesa"
					ValutaProssimaCondizione = True
					'inizio a scorrere le condizioni di uscita dallo stato

					'condizione finestra pronta lato R2 e tolta lato R3
					If ValutaProssimaCondizione Then
						'
						If [Assemblatrice_Stato:FinestraProntaR2] _
							And [Assemblatrice_Stato:FinestraToltaR3] _
							And [Assemblatrice_In:ALTEZZA_FINESTRA] = [Assemblatrice_Out:ALTEZZA_FINESTRA] _
							And [Assemblatrice_In:LARGHEZZA_FINESTRA] = [Assemblatrice_Out:LARGHEZZA_FINESTRA] _
							And [Assemblatrice_In:APERTURA] = [Assemblatrice_Out:APERTURA] _
							And [Assemblatrice_Stato:R2_FuoriIngombro_Ass] _
							And [Assemblatrice_Stato:R3_FuoriIngombro_Ass] _
							And (Pilz_Virt_OVo05_SpvAss0_ Or Pilz_Virt_OVo06_SpvAss180_) _
							And [Assemblatrice_Out:AUTO] _
							And [Assemblatrice_Stato:Ass_ON] _
							Then
							'And Not Pilz_Esp0i00_EmgAssCh1 _
							'And Not Pilz_Esp2i00_EmgRbt2Ch1 _
							'And Not Pilz_Esp0i08_EmgRbt3Ch1 _
							'
							'And Pilz_Virt_OVo01_SpvRipZona2Ok _
							'And Pilz_Virt_OVo02_SpvRipZona3aOk _
							'And Pilz_Virt_OVo03_SpvRipZona3bOk _
							'Then

							'avvio rotazione assemblatrice
							[Assemblatrice_In:START_ROTAZIONE] = True
							StatoCicloR3 = 2100	'AttesaFineRotazione

							ValutaProssimaCondizione = False
						End If
					End If

					'condizione xxxxxx
					'If ValutaProssimaCondizione Then
					'	'controllo solo ogni tanto se c'è un cassetto pronto
					'	If SuperatoTimeout(richiedibileLastCheck, TOUT_RICHIEDIBILE) Then
					'		richiedibileLastCheck = Timer()
					'		StatoCicloR3 = 50000			'xxxxxx
					'		ValutaProssimaCondizione = False
					'	End If
					'End If

					'condizione per assegnare missione a Robot R3
					If ValutaProssimaCondizione Then

						ValutaProssimaCondizione = False
					End If


				Case 2100	'AttesaFineRotazione
					StatoCicloR3_txt = "2100		'AttesaFineRotazione"
					LogMsg "StatoCicloR3 = 2100		'AttesaFineRotazione"

					If [Assemblatrice_Out:FINE_ROTAZIONE] Then

						'invio dati a plc per R3
						'copio i dati del telaio lato R2 su lato R3
						AggiornaMembri("Assemblatrice_TelaioLatoR2", "Assemblatrice_TelaioLatoR3")

						[Assemblatrice_In:START_ROTAZIONE] = False
						[Assemblatrice_Stato:FinestraProntaR2] = False
						[Assemblatrice_Stato:FinestraToltaR3] = False

						'reset dati telaio in R2
						ResetDatiMembriStruttura("Assemblatrice_TelaioLatoR2")

						timerInvioDati = Timer()
						StatoCicloR3 = 3100	'AttesaDatiValidiPerR3
					End If

				Case 3100	'AttesaDatiValidiPerR3
					StatoCicloR3_txt = "3100	'AttesaDatiValidiPerR3"
					LogMsg "StatoCicloR3 = 3100	'AttesaDatiValidiPerR3"
''''

ONDEBUG:
'Dim s As String
's = "123;456;12;"

Dim parts() As String
Const separatore As String = ";"
Dim part As String
Dim index As Integer

'parts = Split(s,";")
parts = Split(Plc_R3_DATI_ACK, separatore)

' Loop through result strings with For Each.


						Dim R3_ALTEZZA_FINESTRA_OFFSET_CHK As UShort
						Dim R3_ALTEZZA_PROFILO_CHK_CHK  As UShort
						Dim R3_CODICE_TIPO_PROFILO_CHK  As Byte
						Dim R3_LARGHEZZA_FINESTRA_OFFSET_CHK  As UShort
						Dim R3_LARGHEZZA_PROFILO_CHK  As UShort
						Dim R3_OFFSET_SQUADRETTA1_CHK  As UShort
						Dim R3_OFFSET_SQUADRETTA2_CHK  As UShort
						Dim R3_TEMPO_COLLA_CHK  As UShort

						R3_ALTEZZA_FINESTRA_OFFSET_CHK = 0
						R3_ALTEZZA_PROFILO_CHK_CHK  = 0
						R3_CODICE_TIPO_PROFILO_CHK =0
						R3_LARGHEZZA_FINESTRA_OFFSET_CHK  =0
						R3_LARGHEZZA_PROFILO_CHK  =0
						R3_OFFSET_SQUADRETTA1_CHK  =0
						R3_OFFSET_SQUADRETTA2_CHK  =0
						R3_TEMPO_COLLA_CHK  =0

index = 0
alm_ZonaR3_ErrDatiAss = False
Try
	For Each part In parts
		index = index +1
	    Debug.Print(part)
	    If part &lt;&gt; "" Then
			Select Case index
			    Case 1
					R3_ALTEZZA_FINESTRA_OFFSET_CHK = CUShort(part)
				Case 2
					R3_ALTEZZA_PROFILO_CHK_CHK  = CUShort(part)
				Case 3
					R3_CODICE_TIPO_PROFILO_CHK = CByte(part)
				Case 4
					R3_LARGHEZZA_FINESTRA_OFFSET_CHK = CUShort(part)
				Case 5
					R3_LARGHEZZA_PROFILO_CHK = CUShort(part)
				Case 6
					R3_OFFSET_SQUADRETTA1_CHK = CUShort(part)
				Case 7
					R3_OFFSET_SQUADRETTA2_CHK = CUShort(part)
				Case 8
					R3_TEMPO_COLLA_CHK = CUShort(part)
				Case Else
					Throw New System.Exception("GestioneZonaR3.movbas -&gt; Main() ECCEZZIONE: Case 2100: Verifica dati da Assemblatrice, valore non previsto.")
			End Select
	    End If
	Next

Catch Ex As System.Exception
	Debug.Print ("GestioneZonaR3.movbas -&gt; Main() ECCEZZIONE: Case 2100: Errore di conversione per l'indice: " _
		&amp; CStr(index) &amp; "; part:" &amp; part &amp; ".")
	Debug.Print ("GestioneZonaR3.movbas -&gt; Main() ECCEZZIONE: Case 2100: Ex.ToString() = " &amp; Ex.ToString() )
	alm_ZonaR3_ErrDatiAss = True
End Try

					''''

					datiR3_OK = False

					While Not datiR3_OK And Not alm_ZonaR3_ErrDatiAss And Not alm_Presenti_ZonaR3
						If ([Assemblatrice_TelaioLatoR3:R3_ALTEZZA_FINESTRA_OFFSET]	= R3_ALTEZZA_FINESTRA_OFFSET_CHK) _
							And ([Assemblatrice_TelaioLatoR3:R3_ALTEZZA_PROFILO] 	= R3_ALTEZZA_PROFILO_CHK_CHK) _
							And ([Assemblatrice_TelaioLatoR3:R3_CODICE_TIPO_PROFILO] = R3_CODICE_TIPO_PROFILO_CHK) _
							And ([Assemblatrice_TelaioLatoR3:R3_LARGHEZZA_FINESTRA_OFFSET] = R3_LARGHEZZA_FINESTRA_OFFSET_CHK) _
							And ([Assemblatrice_TelaioLatoR3:R3_LARGHEZZA_PROFILO] 	= R3_LARGHEZZA_PROFILO_CHK) _
							And ([Assemblatrice_TelaioLatoR3:R3_OFFSET_SQUADRETTA1] = R3_OFFSET_SQUADRETTA1_CHK) _
							And ([Assemblatrice_TelaioLatoR3:R3_OFFSET_SQUADRETTA2] = R3_OFFSET_SQUADRETTA2_CHK) _
							And ([Assemblatrice_TelaioLatoR3:R3_TEMPO_COLLA] 		= R3_TEMPO_COLLA_CHK) _
							Then

							datiR3_OK = True
						End If
						'
						'TODO TOGLIERE PER DEBUG
						datiR3_OK = True
						DoEvents
					End While

					'StatoCicloR3 = 1000	'Attesa
					StatoCicloR3 = 7100 'AttesaFineR3

				Case 4100 'StartR3
					LogMsg "StatoCicloR3 = 4100 'StartR3"

				Case 7100 'AttesaFineR3
					LogMsg "StatoCicloR3 = 7100 'AttesaFineR3"
					If Plc_I_RBT3END Then
						'TODO
						'Stampa Etichetta
						RunScript("Etichetta_R3_Stampa,R3",100,False)
						'log dati produzione

						StatoCicloR3 = 7200	'AckR3End
					End If

				Case 7200 'AckR3End
					LogMsg "StatoCicloR3 = 7200 'AckR3End"
					Plc_ACKRBT3END = True
					If Not Plc_I_RBT3END Then
						Plc_ACKRBT3END = False
						StatoCicloR3 = 1000	'Attesa
					End If

				Case Else
					LogMsg("Main() -&gt; Case StatoCicloR3 Else; StatoCicloR3 = " &amp; CStr(StatoCicloR3))
					Throw New System.Exception("GestioneZonaR3.movbas -&gt; Main() ECCEZZIONE: StatoCicloR3 valore non ammesso: " &amp; CStr(StatoCicloR3) &amp; ".")
			End Select
		End If
	DoEvents

	'abilito LogMsg solo su cambio valore di StatoCicloR3
	If StatoCicloR3_Old &lt;&gt; StatoCicloR3 Then
		enableLogMsg = True
		StatoCicloR3_Old = StatoCicloR3
	Else
		enableLogMsg = False
	End If
	Loop Until IsInStoppingMode

End Sub

Function SuperatoTimeout(ByRef lastcheck As Double, tout As Integer) As Boolean
	Dim tempo As Double
	tempo = Abs(lastcheck - Timer)
	If tempo &gt; tout Then
		SuperatoTimeout = True
	Else
		SuperatoTimeout = False
	End If

End Function


Sub DebugMsg(msg As String)
	Dim prefix As String
	If [loc_ImpostazioniImpianto:AbilitaDbgMsg_ZonaR3] Then
		prefix = "GestioneZonaR3.movbas -&gt; "
		Debug.Print prefix &amp; msg
	End If
End Sub

Sub LogMsg(msg As String)
	If enableLogMsg Then
		Dim prefix As String
		prefix = "GestioneZonaR3.movbas -&gt; "
		Debug.Print prefix &amp; msg
	End If
End Sub


Sub AggiornaMembri(source As String, dest As String)
	Dim objDest As DBVarObjCmdTarget
	Dim objSource As DBVarObjCmdTarget
	Dim MemberDest As DBVarObjCmdTarget
	Dim MemberSource As DBVarObjCmdTarget

	Dim memberCount As Integer	'contatore dei membri

	Dim etSource As movicon.eVariableType
	Dim etDest As movicon.eVariableType

	DebugMsg("AggiornaMembri(source As String, dest As String) : " &amp; source &amp; "," &amp; dest)
	objSource 	= GetVariableObject(source)
	objDest 	= GetVariableObject(dest)

	If  objSource Is Nothing Or  objDest Is Nothing Then
		Throw New System.Exception("GestioneZonaR3.movbas -&gt; AggiornaMembri() objSource Is Nothing Or  objDest Is Nothing")
	End If

	'guardo se le var hanno tipo identico e sono struct Var
	etSource 	= objSource.GetType()
	etDest 		= objDest.GetType()

	If Not etSource = movicon.eVariableType.enum_VAR_TYPE_STRUCT Then
		Throw New System.Exception("GestioneZonaR3.movbas -&gt; AggiornaMembri() Not etSource = movicon.eVariableType.enum_VAR_TYPE_STRUCT")
		Exit Sub
	End If
	If Not etDest = movicon.eVariableType.enum_VAR_TYPE_STRUCT Then
		Throw New System.Exception("GestioneZonaR3.movbas -&gt; AggiornaMembri() Not etDest = movicon.eVariableType.enum_VAR_TYPE_STRUCT")
		Exit Sub
	End If

	memberCount = 0	'inizializzo a 0
	MemberSource 	= objSource.GetMemberObjectFromIndex(memberCount)
	MemberDest 		= objDest.GetMemberObjectFromIndex(memberCount)

	If (etSource = etDest) Then
		While (Not MemberSource Is Nothing) And (Not MemberDest Is Nothing )
			'DebugMsg "AggiorrnaMembri() -&gt; MemberSource name = " 	&amp; MemberSource.GetName 	&amp; "; value = " &amp; CStr(MemberSource.Value) 	&amp; "; Tipo = " &amp; CStr(MemberSource.GetType())
			'DebugMsg "AggiorrnaMembri() -&gt; MemberDest name = " 		&amp; MemberDest.GetName 	&amp; "; value = " &amp; CStr(MemberDest.Value) 	&amp; "; Tipo = " &amp; CStr(MemberDest.GetType())

			etSource 	= MemberSource.GetType()
			etDest 		= MemberDest.GetType()

			If (etSource = etDest) Then
				MemberDest.Value = MemberSource.Value
			End If

			memberCount = memberCount + 1
			MemberSource 	= objSource.GetMemberObjectFromIndex(memberCount)
			MemberDest 		= objDest.GetMemberObjectFromIndex(memberCount)
		End While

	End If

	MemberSource 	= Nothing
	MemberDest 		= Nothing
	objSource 		= Nothing
	objDest 		= Nothing

End Sub


Sub ResetDatiMembriStruttura(varname As String)
	'metto a 0 i membri di tipo numerico
	'a "" i membri stringa
	'a false i bit

	Dim objVar As DBVarObjCmdTarget
	Dim MemberVar As DBVarObjCmdTarget

	Dim mCount As Integer	'contatore dei membri
	Dim et As movicon.eVariableType

	objVar = GetVariableObject(varname)

	et = objVar.GetType()

	If et &lt;&gt; movicon.eVariableType.enum_VAR_TYPE_STRUCT Then
		DebugMsg 		"ResetDatiMembriStruttura() -&gt; Variabile = " 	&amp; varname 	&amp; " NON è una Struct."
		Exit Sub
	End If

	mCount = 0	'inizializzo a 0

	MemberVar 	= objVar.GetMemberObjectFromIndex(mCount)

	While Not MemberVar Is Nothing
		'DebugMsg 		"ResetDatiMembriStruttura() -&gt; MemberVar name = " 	&amp; MemberVar.GetName 	&amp; "; value = " &amp; CStr(MemberVar.Value) 	&amp; "; Tipo = " &amp; CStr(MemberVar.GetType())
		'Debug.Print 	"ResetDatiMembriStruttura() -&gt; MemberVar name = " 	&amp; MemberVar.GetName 	&amp; "; value = " &amp; CStr(MemberVar.Value) 	&amp; "; Tipo = " &amp; CStr(MemberVar.GetType())

		et = MemberVar.GetType()
		Select Case et
			Case movicon.eVariableType.enum_VAR_TYPE_BIT
				MemberVar.Value 	= False

			Case movicon.eVariableType.enum_VAR_TYPE_BYTE _
				, movicon.eVariableType.enum_VAR_TYPE_DOUBLE _
				, movicon.eVariableType.enum_VAR_TYPE_DWORD _
				, movicon.eVariableType.enum_VAR_TYPE_FLOAT _
				, movicon.eVariableType.enum_VAR_TYPE_SIGNBYTE _
				, movicon.eVariableType.enum_VAR_TYPE_SIGNDWORD _
				, movicon.eVariableType.enum_VAR_TYPE_SIGNWORD _
				, movicon.eVariableType.enum_VAR_TYPE_WORD

				MemberVar.Value 	= 0

			Case movicon.eVariableType.enum_VAR_TYPE_STRING
				MemberVar.Value 	= ""
			Case Else
				'tipo non resettabile :movicon.eVariableType.enum_VAR_TYPE_ARRAY movicon.eVariableType.enum_VAR_TYPE_E_UNKNOWN movicon.eVariableType.enum_VAR_TYPE_STRUCT
		End Select

		mCount = mCount + 1
		MemberVar 	= objVar.GetMemberObjectFromIndex(mCount)
	End While
	MemberVar 	= Nothing
	objVar 		= Nothing
End Sub
</ScriptCode>
<Mode RunAtServer="1" UseUIInterface="1" SeparateThread="1" UseItsTrace="1" ModalDialogs="1"/>
<Execution ThreadPriority="0" StatusVariable="statoScriptGestioneZonaR1" MaxInstances="1" SleepExecution="50" SyncroScriptTimeout="5000"/>
</MovResource>
